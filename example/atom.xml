<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Sample Site Posts</title><id>https://example.com/atom.xml</id><updated>2018-03-24T00:00:00Z</updated><link href="https://example.com"/><entry><id>https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html</id><title type="text">多相バリアントを使いこなそう with Haskell</title><updated>2018-03-24T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;多相バリアントを使いこなそう with Haskell&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-03-24&#34; itemprop=&#34;datePublished&#34;&gt;
        Mar 24, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/extensible-package.html&#34;&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;a href=&#34;https://sampou.connpass.com/event/80492/&#34;&gt;この前の「『Haskellによる関数プログラミングの思考法』読書会」&lt;/a&gt;の後の懇親会(？)で &lt;strong&gt;多相バリアント&lt;/strong&gt; の話になりまして，その時に以下の記事が話題にあがった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://osiire.hatenablog.com/entry/20090510/1241957550&#34;&gt;多相バリアントを使いこなそう(1) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://osiire.hatenablog.com/entry/20090512/1242055541&#34;&gt;多相バリアントを使いこなそう(2) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://osiire.hatenablog.com/entry/20090514/1242235108&#34;&gt;多相バリアントを使いこなそう(3) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://osiire.hatenablog.com/entry/20090516/1242456737&#34;&gt;多相バリアントを使いこなそう(4) - osiire’s blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの記事は OCaml で多相バリアントの紹介をしています． ということで，同様の議論を Haskell でもしてみた！というのが，この記事の内容です．&lt;/p&gt;
&lt;h3 id=&#34;haskell-と多相バリアント&#34;&gt;Haskell と多相バリアント&lt;/h3&gt;
&lt;p&gt;悲しいことに，Haskell には組み込みで多相バリアントは無い(バリアントとは Haskell の代数的データ型における直和型と概ね一緒)． なので，多相バリアントを Haskell で模倣するために，毎度おなじみ &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージを用いる．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ネタバレをすると Haskell で同じことをするのは難しかった． なので，本質的な議論は osiire’s blog の方を読んだ方がいいと思うよ． 結局，本記事は osiire’s blog のと同様のことを Haskell もとい，&lt;code&gt;extensible&lt;/code&gt; パッケージでどのように行うか，という記事って感じになった．&lt;/p&gt;
&lt;h2 id=&#34;多相バリアントの基本&#34;&gt;多相バリアントの基本&lt;/h2&gt;
&lt;p&gt;多相バリアントとは，名前の通り，多相的なバリアントである． バリアントは前述したとおり，直和型と基本的に同じ．&lt;/p&gt;
&lt;p&gt;例えば，普通の直和型として次のようなものがあったとする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Joker&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Number&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Str&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Number&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「最初の型はジョーカーと数字札があるトランプの型，次の型は何かファイルからデータを読み込む時に文字列と数字のデータを統一的に扱うための型」だそうです(&lt;a href=&#34;http://osiire.hatenablog.com/entry/20090510/1241957550&#34;&gt;多相バリアントを使いこなそう(1)&lt;/a&gt; より)． どちらの型にも &lt;code&gt;Number Int&lt;/code&gt; という部分があるので次のような関数を両方に適用できそうな気がする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;getNumber (&lt;span class=&#34;dt&#34;&gt;Number&lt;/span&gt; n) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;getNumber _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん，そんなことはできない(そもそも，Haskell の値コンストラクタは名前空間を共有してしまうので同時に利用はできないのだが…)． そこで多相バリアントを用いれば，このような関数を実装することが出来るようになる．&lt;/p&gt;
&lt;h3 id=&#34;多相バリアントを定義&#34;&gt;多相バリアントを定義&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;extensible&lt;/code&gt; パッケージを使って多相バリアント(拡張可能バリアント)を定義すると次のようになる(&lt;code&gt;DataKinds&lt;/code&gt; と &lt;code&gt;TypeOperators&lt;/code&gt; 言語拡張が必要)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;joker&amp;quot; &amp;gt;: (), &amp;quot;number&amp;quot; &amp;gt;: Int ]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InData&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;str&amp;quot; &amp;gt;: String, &amp;quot;number&amp;quot; &amp;gt;: Int ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とくに細かい説明はしないが，なんとなく意味が読み取れるだろう． &lt;code&gt;getNumber&lt;/code&gt; 関数の実装は難しいので後回しにするとして，&lt;code&gt;getNumber&lt;/code&gt; 関数の型は &lt;code&gt;extensible&lt;/code&gt; パッケージの &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#t:-8838-&#34;&gt;&lt;code&gt;⊆&lt;/code&gt;&lt;/a&gt; 型クラスを用いて次のように書ける(意味は見た通り)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getNumber ::&lt;/span&gt; (&lt;span class=&#34;ch&#34;&gt;&amp;#39;[&amp;quot;number&amp;quot; &amp;gt;: Int] ⊆ xs) =&amp;gt; Variant xs -&amp;gt; Maybe Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;getNumber &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GHCi で試してみる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t getNumber (undefined&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Card&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;getNumber (undefined&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Card&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t getNumber (undefined&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InData&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;getNumber (undefined&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InData&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに動作する．&lt;/p&gt;
&lt;h2 id=&#34;包含関係&#34;&gt;包含関係&lt;/h2&gt;
&lt;p&gt;さて，&lt;code&gt;getNumber&lt;/code&gt; 関数をどのように実装するかだが，その前に多相バリアントの包含関係を議論しておく(この議論は&lt;a href=&#34;http://osiire.hatenablog.com/entry/20090514/1242235108&#34;&gt;多相バリアントを使いこなそう(3)&lt;/a&gt;に対応する)．&lt;/p&gt;
&lt;p&gt;次のような簡単なバリアント型を考える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HogeFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HogeFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;hoge&amp;quot; &amp;gt;: ()&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このバリアント型に対し，&lt;code&gt;⊆&lt;/code&gt; を用いて多相的な関数は2種類考えれる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toInt1 ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;HogeFields&lt;/span&gt; ⊆ xs) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;toInt1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toInt2 ::&lt;/span&gt; (xs ⊆ &lt;span class=&#34;dt&#34;&gt;HogeFields&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;toInt2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toInt1&lt;/code&gt; は &lt;code&gt;&amp;quot;hoge&amp;quot; &amp;gt;: ()&lt;/code&gt; と &lt;code&gt;&amp;quot;fuga&amp;quot; &amp;gt;: ()&lt;/code&gt; を要素に持つバリアント型全てが利用できる関数である(さっきの &lt;code&gt;getNumber&lt;/code&gt; と同じ)． &lt;code&gt;toInt2&lt;/code&gt; は &lt;code&gt;&amp;quot;hoge&amp;quot; &amp;gt;: ()&lt;/code&gt; か &lt;code&gt;&amp;quot;fuga&amp;quot; &amp;gt;: ()&lt;/code&gt; のどれかを要素に持つ(それ以外は持ってはいけない)バリアント型全てに利用できる関数である． 試しに，次の3つのバリアント型の値を定義し，GHCi で試してみよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;hoge1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;hoge1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;hoge2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;piyo&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; () &lt;span class=&#34;ch&#34;&gt;&amp;#39;: HogeFields)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;hoge2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;piyo &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;hoge3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[&amp;quot;hoge&amp;quot; &amp;gt;: ()]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;hoge3 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;見てわかるように(？)，&lt;code&gt;hoge3 ⊆ hoge1 ⊆ hoge2&lt;/code&gt; である(厳密にはバリアントの要素の集合で成り立つ関係だが)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t toInt1 hoge1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;toInt1&lt;span class=&#34;ot&#34;&gt; hoge1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t toInt1 hoge2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;toInt1&lt;span class=&#34;ot&#34;&gt; hoge2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t toInt1 hoge3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; error&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Couldn&amp;#39;t&lt;/span&gt; match &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; ‘&lt;span class=&#34;ch&#34;&gt;&amp;#39;Missing (&amp;quot;fuga&amp;quot; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; ())’&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;                     with ‘&lt;span class=&#34;ch&#34;&gt;&amp;#39;Expecting pos0’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;        arising from a use &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘toInt1’&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; toInt1 hoge3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t toInt2 hoge1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; data-line-number=&#34;13&#34;&gt;toInt2&lt;span class=&#34;ot&#34;&gt; hoge1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t toInt2 hoge2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; error&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; data-line-number=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Couldn&amp;#39;t&lt;/span&gt; match &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; ‘&lt;span class=&#34;ch&#34;&gt;&amp;#39;Missing (&amp;quot;piyo&amp;quot; &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; ())’&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; data-line-number=&#34;18&#34;&gt;                     with ‘&lt;span class=&#34;ch&#34;&gt;&amp;#39;Expecting pos0’&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-19&#34; data-line-number=&#34;19&#34;&gt;        arising from a use &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; ‘toInt2’&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-20&#34; data-line-number=&#34;20&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the expression&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; toInt2 hoge2&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-21&#34; data-line-number=&#34;21&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t toInt2 hoge3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-22&#34; data-line-number=&#34;22&#34;&gt;toInt2&lt;span class=&#34;ot&#34;&gt; hoge3 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに，&lt;code&gt;toInt1&lt;/code&gt; は &lt;code&gt;hoge1&lt;/code&gt; と &lt;code&gt;hoge2&lt;/code&gt; に適用でき，&lt;code&gt;toInt2&lt;/code&gt; は &lt;code&gt;hoge1&lt;/code&gt; と &lt;code&gt;hoge3&lt;/code&gt; に適用できている．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;さて，&lt;code&gt;toInt1&lt;/code&gt; と &lt;code&gt;toInt2&lt;/code&gt; の実装を与えてみる． 実は簡単なのは後者 &lt;code&gt;toInt2&lt;/code&gt; だ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toInt2 ::&lt;/span&gt; (xs ⊆ &lt;span class=&#34;dt&#34;&gt;HogeFields&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;toInt2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; flip matchField (spread&lt;span class=&#34;ot&#34;&gt; xs ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (const &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;fuga &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (const &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;a href=&#34;https://matsubara0507.github.io/posts/2017-11-28-fun-of-extensible-1.html&#34;&gt;昔の記事&lt;/a&gt;でも紹介した) &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#v:spread&#34;&gt;&lt;code&gt;spread&lt;/code&gt;&lt;/a&gt; 関数を用いることで &lt;strong&gt;バリアント型を拡張できる&lt;/strong&gt; (&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Field.html#v:matchField&#34;&gt;&lt;code&gt;matchField&lt;/code&gt;&lt;/a&gt; 関数の使い方についてはこの&lt;a href=&#34;https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html&#34;&gt;記事&lt;/a&gt;を参照して)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;shrink ::&lt;/span&gt; (xs ⊆ ys) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; ys &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;spread ::&lt;/span&gt; (xs ⊆ ys) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; ys&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡縮する関数 &lt;code&gt;spread&lt;/code&gt; や &lt;code&gt;shrink&lt;/code&gt; は強力なのだが，多相的すぎて前後の型が分からないとエラーになる(気がする(パッケージの作者じゃないので細かいことはよくわからん))ので，型注釈 (&lt;code&gt;spread xs :: Hoge&lt;/code&gt; の部分)を与える必要がある．&lt;/p&gt;
&lt;h3 id=&#34;必殺-coinclusion&#34;&gt;必殺 Coinclusion&lt;/h3&gt;
&lt;p&gt;前者が難しいのは，&lt;code&gt;spread&lt;/code&gt; や &lt;code&gt;shrink&lt;/code&gt; とは逆の振る舞いを要求するからだ． そのために(この前作者から教えてもらった隠し技(別に隠してない)) &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Nullable.html&#34;&gt;&lt;code&gt;Nullable&lt;/code&gt;&lt;/a&gt; を使う！ &lt;code&gt;Nullable&lt;/code&gt; を使うとバリアントやレコードの全ての要素を簡単に &lt;code&gt;Maybe&lt;/code&gt; でラップできる(なんかいいテーマがあったら，そのうち解説する)． さらに &lt;code&gt;Nullable&lt;/code&gt; を用いることで，Coinclusion を定義できる！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;wrench ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (h &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nullable&lt;/span&gt; h &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; ys&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;retrench ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (h &lt;span class=&#34;fu&#34;&gt;:|&lt;/span&gt; ys) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nullable&lt;/span&gt; ((&lt;span class=&#34;fu&#34;&gt;:|&lt;/span&gt;) h) xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;wrench&lt;/code&gt; や &lt;code&gt;retrench&lt;/code&gt; は &lt;code&gt;shrink&lt;/code&gt; と &lt;code&gt;spread&lt;/code&gt; の逆向きの変換になっているのが分かるだろうか？ 逆向きにしたせいで足りない部分は &lt;code&gt;Nullable&lt;/code&gt; によって &lt;code&gt;Nothing&lt;/code&gt; となる． 例えば &lt;code&gt;Variant (&amp;quot;piyo&amp;quot; &amp;gt;: () &#39;: HogeFields)&lt;/code&gt; から &lt;code&gt;Hoge&lt;/code&gt; に縮小する場合は，&lt;code&gt;embedAssoc (#piyo @= ())&lt;/code&gt; が &lt;code&gt;Nothing&lt;/code&gt; となり，他が &lt;code&gt;Just&lt;/code&gt; でラップされる．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Coinclusion を用いて &lt;code&gt;toInt2&lt;/code&gt; 関数を実装してみると次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds           #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RankNTypes          #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toInt1 ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Generate&lt;/span&gt; xs, &lt;span class=&#34;dt&#34;&gt;HogeFields&lt;/span&gt; ⊆ xs) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; data-line-number=&#34;6&#34;&gt;toInt1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchFieldWithDefault &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (const &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; data-line-number=&#34;8&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;fuga &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (const &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; data-line-number=&#34;9&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;matchFieldWithDefault ::&lt;/span&gt; forall xs ys h r &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-12&#34; data-line-number=&#34;12&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; h r) xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VariantOf&lt;/span&gt; h ys &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-13&#34; data-line-number=&#34;13&#34;&gt;matchFieldWithDefault defaultValue pat &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-14&#34; data-line-number=&#34;14&#34;&gt;  fromMaybe defaultValue &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; matchFieldWithMaybe pat&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;matchFieldWithMaybe ::&lt;/span&gt; forall xs ys h r &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-17&#34; data-line-number=&#34;17&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Generate&lt;/span&gt; ys, xs ⊆ ys) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; h r) xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VariantOf&lt;/span&gt; h ys &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; r&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-18&#34; data-line-number=&#34;18&#34;&gt;matchFieldWithMaybe pat &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchWith func (wrench pat)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-19&#34; data-line-number=&#34;19&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;ot&#34;&gt;    func ::&lt;/span&gt; forall x &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nullable&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; h r)) x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; h x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; r&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-21&#34; data-line-number=&#34;21&#34;&gt;    func fx gx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runMatch (getField x) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; getField gx) &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getNullable fx&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;めんどくさいので細かい解説はしない(そもそももっといい方法があるかもしれない)． この &lt;code&gt;matchFieldWithMaybe&lt;/code&gt; を用いれば &lt;code&gt;getNumber&lt;/code&gt; も簡単に実装できるだろう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getNumber ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Generate&lt;/span&gt; xs, &lt;span class=&#34;ch&#34;&gt;&amp;#39;[&amp;quot;number&amp;quot; &amp;gt;: Int] ⊆ xs) =&amp;gt; Variant xs -&amp;gt; Maybe Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;getNumber &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchFieldWithMaybe &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;number &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; id &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;例-イベントを拡張する&#34;&gt;例 : イベントを拡張する&lt;/h2&gt;
&lt;p&gt;ここからは「多相バリアントを使いこなそう」で取り上げられてた例を Haskell で示そう． ひとつ目は次のふたつのイベント型を考える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KeyboardEvent&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KeyboardEventFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KeyboardEventFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;keyPress&amp;quot; &amp;gt;: Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;keyRelease&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MouseEvent&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MouseEventFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MouseEventFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;mousePress&amp;quot; &amp;gt;: (Int, Int)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; data-line-number=&#34;10&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;mouseRelease&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; data-line-number=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; data-line-number=&#34;12&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，これらの両方の型許容する型 &lt;code&gt;Event&lt;/code&gt; を作りたい． 普通の直和型を用いて次のように書くことが出来る．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Event&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KeyboardEvent&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mouse&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MouseEvent&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん，これでは元のふたつの型をうまく再利用できていない． 既に何度か登場している型レベルリストの連結 &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Product.html#t:-43--43-&#34;&gt;&lt;code&gt;++&lt;/code&gt;&lt;/a&gt; を使って次のように書くこともできる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Event&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyboardEventFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MouseEventFields&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こうすると，&lt;code&gt;Event&lt;/code&gt; 型と &lt;code&gt;KeyboardEvent&lt;/code&gt; 型・&lt;code&gt;MouseEvent&lt;/code&gt; 型には包含関係ができ，前述した &lt;code&gt;Hoge&lt;/code&gt; 型で示した方法により各々で関数を共有することが出来る． 例えば次の &lt;code&gt;getCharFromEvent&lt;/code&gt; 関数は &lt;code&gt;KeyboardEvent&lt;/code&gt; 型と &lt;code&gt;Event&lt;/code&gt; 型の両方で利用できる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getCharFromEvent ::&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; data-line-number=&#34;2&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Generate&lt;/span&gt; xs, &lt;span class=&#34;dt&#34;&gt;KeyboardEventFields&lt;/span&gt; ⊆ xs) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; data-line-number=&#34;3&#34;&gt;getCharFromEvent &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchFieldWithDefault (error &lt;span class=&#34;st&#34;&gt;&amp;quot;not a key&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;keyPress   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; id&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; data-line-number=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;keyRelease &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; id&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-6&#34; data-line-number=&#34;6&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;例-トランプで-expression-problem&#34;&gt;例 : トランプで Expression Problem&lt;/h2&gt;
&lt;p&gt;Expression Problem が何なのかは各位ググってもらうとして，「多相バリアントを使いこなそう」の最後で紹介されていた，多相バリアントによる Expression Problem の解法を Haskell でもやってみる．&lt;/p&gt;
&lt;p&gt;次のような型と関数があったとする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;number&amp;quot; &amp;gt;: Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; data-line-number=&#34;4&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-5&#34; data-line-number=&#34;5&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;queen&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-6&#34; data-line-number=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;king&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-7&#34; data-line-number=&#34;7&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cardNum ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-10&#34; data-line-number=&#34;10&#34;&gt;cardNum &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchField cardNumPattern&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cardNumPattern ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;CardFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-13&#34; data-line-number=&#34;13&#34;&gt;cardNumPattern&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-14&#34; data-line-number=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;number &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; id&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-15&#34; data-line-number=&#34;15&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;jack   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; const &lt;span class=&#34;dv&#34;&gt;11&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-16&#34; data-line-number=&#34;16&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;queen  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; const &lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-17&#34; data-line-number=&#34;17&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;king   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; const &lt;span class=&#34;dv&#34;&gt;13&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-18&#34; data-line-number=&#34;18&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;code&gt;cardNumPattern&lt;/code&gt; を切り出しているのがあからさまに恣意的だが…)これに以下のことは可能だろうか？&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;静的で安全に(キャストせず)&lt;/li&gt;
&lt;li&gt;元のコードを一切変更せず&lt;/li&gt;
&lt;li&gt;新しい場合分けを加え&lt;/li&gt;
&lt;li&gt;新しい操作も加えた&lt;/li&gt;
&lt;li&gt;新しい場合分け構造を定義する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最後の「構造」というのは今回は置いておいて(OCaml ではモジュールとして定義してたが，Haskell でモジュールに切り分けるにはファイルを切り分ける必要があるので…めんどい…)，1-4を考えてみよう． &lt;code&gt;Card&lt;/code&gt; 型やその関数を拡張したものとして，次のような &lt;code&gt;CardExt&lt;/code&gt; 型とその関数を定義した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardExt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardExtFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardExtFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[&amp;quot;joker&amp;quot; &amp;gt;: ()]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cardExtNum ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardExt&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-5&#34; data-line-number=&#34;5&#34;&gt;cardExtNum &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-6&#34; data-line-number=&#34;6&#34;&gt;  matchField &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; shrink (&lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;joker &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (const &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; () &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; cardNumPattern)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;nextCardExt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardExt&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CardExt&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-9&#34; data-line-number=&#34;9&#34;&gt;nextCardExt &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchField&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-10&#34; data-line-number=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;number &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (\n &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; n &lt;span class=&#34;fu&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;number &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; n &lt;span class=&#34;fu&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;jack &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-11&#34; data-line-number=&#34;11&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;jack   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;queen  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-12&#34; data-line-number=&#34;12&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;queen  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;king   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-13&#34; data-line-number=&#34;13&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;king   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;joker  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-14&#34; data-line-number=&#34;14&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;joker  &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; const (embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;number &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-15&#34; data-line-number=&#34;15&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで一応&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;静的で安全に(もちろん!)&lt;/li&gt;
&lt;li&gt;既存のコードを改造せず&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;joker&amp;quot; &amp;gt;: ()&lt;/code&gt; という新しい場合分けを加え&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nextCardExt&lt;/code&gt; という新しい操作(関数)を加える&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ことができた．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;組込みでこれらの機能がある OCaml はいいなぁとなった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html</id><title type="text">tasty-discover が Windows+日本語環境で動かなかったので直す</title><updated>2018-03-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;tasty-discover が Windows+日本語環境で動かなかったので直す&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-03-04&#34; itemprop=&#34;datePublished&#34;&gt;
        Mar 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;おそらく少数派であろう Windows + 日本語環境の Haskeller のひげです．&lt;/p&gt;
&lt;p&gt;最近は知人のすゝめで，Haskell のテストフレームワークに &lt;a href=&#34;https://hackage.haskell.org/package/tasty&#34;&gt;&lt;code&gt;tasty&lt;/code&gt;&lt;/a&gt; を使ってます． &lt;code&gt;tasty&lt;/code&gt; にも例に漏れず &lt;a href=&#34;http://hackage.haskell.org/package/tasty-discover&#34;&gt;&lt;code&gt;tasty-discover&lt;/code&gt;&lt;/a&gt; というテスト用の関数を &lt;code&gt;.hs&lt;/code&gt; ファイルから集めてきてくれるツールがある． しかし，悲しいことに &lt;code&gt;tasty-discover&lt;/code&gt; がマルチバイト文字(日本語とか)を Windows で読み込むと &lt;strong&gt;いつもの&lt;/strong&gt; エラーで死んでしまう．&lt;/p&gt;
&lt;p&gt;なので，直して PR 出した． この記事はそのメモです．&lt;/p&gt;
&lt;h2 id=&#34;問題のエラー&#34;&gt;問題のエラー&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Building test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
tasty-discover: test\ConfigTest.hs: hGetContents: invalid argument (invalid byte sequence)
`tasty-discover&amp;#39; failed in phase `Haskell pre-processor&amp;#39;. (Exit code: 1)
Progress: 1/2
--  While building custom Setup.hs for package tasty-discover-4.1.3 using:
      C:\Users\Hoge\AppData\Roaming\stack\setup-exe-cache\i386-windows\Cabal-simple_Z6RU0evB_2.0.1.0_ghc-8.2.2.exe --builddir=.stack-work\dist\010ee936 build lib:tasty-discover exe:tasty-discover test:test --ghc-options &amp;quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&amp;quot;
    Process exited with code: ExitFailure 1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hGetContents: invalid argument (invalid byte sequence)&lt;/code&gt; は 日本語 Windows Haskeller なら親の顔より良く見るエラーメッセージですね(そんなことは無い)． このエラーは &lt;code&gt;hGetContents&lt;/code&gt; で読み込もうとしているファイルの文字コードが，&lt;code&gt;hGetContents&lt;/code&gt; で設定されている文字コードと違うために起きている(&lt;code&gt;hGetContents&lt;/code&gt; 関数は，例えば &lt;code&gt;readFile&lt;/code&gt; 関数などで呼び出されている)．&lt;/p&gt;
&lt;h2 id=&#34;対処法&#34;&gt;対処法&lt;/h2&gt;
&lt;p&gt;日本語 Windows Haskeller 筆頭の igrep 氏が Haskell-jp Blog に投稿してくれてる．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/windows-gotchas.html&#34;&gt;WindowsでHaskellを扱う時によく遭遇するエラーと対処法 - Haskell-jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は(孫プロセスとして読んでるせいか)「それでもダメな場合」に当たる． つまり，場当たり的な解決方法(&lt;code&gt;chcp 65001&lt;/code&gt; と打つとか)ではダメで，プログラムを修正するしかない．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;神な igrep 氏は，この場合の解決策も書いておいてくれた． この &lt;a href=&#34;https://github.com/haskell/haddock/pull/566&#34;&gt;PR&lt;/a&gt; を参考にして書き換えてやればよい．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tasty-discover&lt;/code&gt; も&lt;a href=&#34;https://github.com/lwm/tasty-discover/pull/138/files&#34;&gt;こんな感じに書き加えた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;pr-を出す&#34;&gt;PR を出す&lt;/h2&gt;
&lt;p&gt;修正自体は1時間ほどで終わり(移動中の新幹線の中で直した)，これでテストを実行できるようになったので PR を出さずに満足してしまった(あるある)． 半月ほどほっといてたら，同じケースで困った知り合いに &lt;a href=&#34;https://github.com/lwm/tasty-discover/issues/135&#34;&gt;Issue&lt;/a&gt; を出されてしまった(笑)&lt;/p&gt;
&lt;p&gt;しょうがないので PR を出そうとしたら，「Windows は良く分からないから，ぜひ Windows 環境用の自動テストも欲しい！」と&lt;a href=&#34;https://github.com/lwm/tasty-discover/issues/127&#34;&gt;作者に言われてしまった&lt;/a&gt;(「時間があればやって」とね)．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.appveyor.com/&#34;&gt;AppVeyor&lt;/a&gt; と言うのを使えばいいみたい． 調べたらサクッとできそうなので，やってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci&#34;&gt;Using AppVeyor for Haskell+Windows CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記事にある設定ファイルをそのままコピペしてやってみたが，問題がふたつあった． ひとつ目は，&lt;code&gt;tasty-discover&lt;/code&gt; のテスト自体に &lt;code&gt;tasty-discover&lt;/code&gt; を使っている点だ． 最初に &lt;code&gt;stack test&lt;/code&gt; を実行するときにはまだ &lt;code&gt;tasty-discover&lt;/code&gt; はインストールされてないのでテストが落ちてしまう．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[2 of 2] Compiling Paths_tasty_discover ( .stack-work\dist\010ee936\build\tasty-discover\autogen\Paths_tasty_discover.hs, .stack-work\dist\010ee936\build\tasty-discover\tasty-discover-tmp\Paths_tasty_discover.o )
Linking .stack-work\dist\010ee936\build\tasty-discover\tasty-discover.exe ...
Preprocessing test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
Building test suite &amp;#39;test&amp;#39; for tasty-discover-4.1.3..
ghc.EXE: could not execute: tasty-discover&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なので，&lt;code&gt;stack test&lt;/code&gt; する前に &lt;code&gt;stack install&lt;/code&gt; することにした．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ふたつ目は，そもそも WIndows のビルドが落ちる点． &lt;code&gt;System.FilePath&lt;/code&gt; に関するバグだったので，&lt;a href=&#34;https://github.com/lwm/tasty-discover/pull/136/files#diff-383b12983902facd1ce205458e1061b6&#34;&gt;サクッと直した&lt;/a&gt;． Windows のテストに関する &lt;a href=&#34;https://github.com/lwm/tasty-discover/pull/136&#34;&gt;PR&lt;/a&gt; もマージされたので，本命の &lt;a href=&#34;https://github.com/lwm/tasty-discover/pull/138&#34;&gt;PR&lt;/a&gt; も出した(これもマージされた)．&lt;/p&gt;
&lt;h2 id=&#34;今回の問題をテストする&#34;&gt;今回の問題をテストする(？)&lt;/h2&gt;
&lt;p&gt;今回の問題のテストも欲しいと言われた． &lt;code&gt;tasty-discover&lt;/code&gt; のテスト自体が &lt;code&gt;tasty-discover&lt;/code&gt; を使うため，ユニットテストとして表現できない． &lt;code&gt;stack test&lt;/code&gt; そのものが落ちるか落ちないかのテストはできるが，それはなんか違うなぁと思い，結局コミットはしていない．&lt;/p&gt;
&lt;p&gt;ただし，いちおう AppVeyor で&lt;a href=&#34;https://ci.appveyor.com/project/matsubara0507/tasty-discover/build/1.0.9&#34;&gt;再現できるようにはした&lt;/a&gt;． AppVeyor はデフォルトだと日本語環境になっていない(即ち Shift-JIS じゃない)ため落ちない． なので，以下を参考にして日本語環境にして実行した．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/appveyor/ci/issues/846&#34;&gt;Support a different code page · Issue #846 · appveyor/ci&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;init:
- ps: Set-WinSystemLocale ja-JP
- ps: Start-Sleep -s 5
- ps: Restart-Computer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というのを &lt;code&gt;appveyor.yml&lt;/code&gt; に書き加えるだけで良い．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;なんか &lt;a href=&#34;https://github.com/lwm/tasty-discover/issues/139&#34;&gt;Push 権限を貰った&lt;/a&gt;． こういうこともあるんですね(OSS歴が浅いので驚いた)．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html</id><title type="text">拡張可能タングルでDo記法レスプログラミング♪ (Haskell)</title><updated>2018-02-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;拡張可能タングルでDo記法レスプログラミング♪ (Haskell)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-02-22&#34; itemprop=&#34;datePublished&#34;&gt;
        Feb 22, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/extensible-package.html&#34;&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;「&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージの楽しみ その３」です．&lt;/p&gt;
&lt;p&gt;拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1&#34;&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; について，割とドキュメントには無い(？)ネタを書いておくシリーズ第三弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．&lt;/p&gt;
&lt;p&gt;また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2017-11-28-fun-of-extensible-1.html&#34;&gt;前々回&lt;/a&gt;は拡張可能レコードの拡縮の話を，&lt;a href=&#34;/posts/2018-01-31-fun-of-extensible-2.html&#34;&gt;前回&lt;/a&gt;は拡張可能直和型(バリアント)を引数に取る関数の話を書きました．&lt;/p&gt;
&lt;p&gt;今回は &lt;strong&gt;拡張可能タングル&lt;/strong&gt; で遊んでみます． 今回の Haskell コードは基本的に&lt;a href=&#34;https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96&#34;&gt;コレ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;拡張可能タングル&#34;&gt;拡張可能タングル&lt;/h2&gt;
&lt;p&gt;作者さんの拡張可能タングルについての記事があり，非常に分かりやすいです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fumieval.hatenablog.com/entry/2016/12/18/181540&#34;&gt;波打たせるものの正体(エクステンシブル・タングル) - モナドとわたしとコモナド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拡張可能タングルを用いれば，文脈付き(&lt;code&gt;IO&lt;/code&gt; などの &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス)で拡張可能レコードを生成し，更にフィールド間で依存関係を持つ際に，型クラスを用いて各フィールドごとに振る舞いを記述できるようになる． まぁこのヒトコトでは伝わらないですよね．&lt;/p&gt;
&lt;p&gt;百聞は一見に如かず．例えば&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rec&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge2&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge3&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;     ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;makeRec ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rec&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;makeRec &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;  hoge1 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getLine&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;  hoge3 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; randomRIO (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; length hoge1)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;  pure&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; data-line-number=&#34;13&#34;&gt;     &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge1 &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; hoge1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; data-line-number=&#34;14&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge2 &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (length hoge1 &lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt; hoge3)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; data-line-number=&#34;15&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge3 &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; hoge3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; data-line-number=&#34;16&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;というような関数があったとする． これを拡張可能タングルを使って書き直すと次のようになります．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;makeRec ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rec&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;makeRec &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; runTangles tangles (wrench emptyRecord)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;tangles ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Comp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;tangles &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeRec&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;  \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Comp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; pure &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; make m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeRec&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  make ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeRec&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;hoge1&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; lift getLine&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeRec&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;hoge2&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;&amp;lt;=&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (length &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge1) &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge3&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; data-line-number=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeRec&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;hoge3&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; data-line-number=&#34;20&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; data-line-number=&#34;21&#34;&gt;    ml &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; length &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;hoge1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; data-line-number=&#34;22&#34;&gt;    lift &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; randomRIO (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; ml)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コード量そのものは倍近くなっている． しかし，フィールドの構築方法ごとにインスタンスメソッドとして切り分けることが出来ている． しかも，&lt;strong&gt;摩訶不思議な &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Tangle.html#v:lasso&#34;&gt;&lt;code&gt;lasso&lt;/code&gt;&lt;/a&gt; 関数により依存関係も勝手に解決してくれる&lt;/strong&gt; ． もちろん，フィールドのインスタンスが足りないときは，足りないというコンパイルエラーになるよ．&lt;/p&gt;
&lt;h2 id=&#34;do記法レスプログラミング&#34;&gt;Do記法レスプログラミング&lt;/h2&gt;
&lt;p&gt;Haskell はなんらかの作用付きの振る舞いは次のように &lt;code&gt;Monad&lt;/code&gt; と &lt;code&gt;do&lt;/code&gt; 記法を用いて書くのが一般的だ． しかし，便利な Do 記法に甘えて無駄に長い，数十行もある Do 式を書いたことは無いだろうか？ たしかに(関数合成だけで記述するより)読みやすいが，なんかこう…ちがうじゃないですか！？&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;そこで，先述した拡張可能タングルを用いて長いDo式をフィールドごとに切り分けてみよう． 例題として次のようなログ(っぽいなにか)を読み込む関数を考える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Log&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;path&amp;quot;    &amp;gt;: FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Time&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;     ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogCsv&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CsvFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CsvFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;    &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;time&amp;quot;    &amp;gt;: Time&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; data-line-number=&#34;15&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;info&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; data-line-number=&#34;16&#34;&gt;     ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; data-line-number=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; data-line-number=&#34;19&#34;&gt;    &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;code&amp;quot;    &amp;gt;: Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; data-line-number=&#34;20&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; data-line-number=&#34;21&#34;&gt;     ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; data-line-number=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eff&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-24&#34; data-line-number=&#34;24&#34;&gt;    &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ EitherDef String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-25&#34; data-line-number=&#34;25&#34;&gt;     , &lt;span class=&#34;st&#34;&gt;&amp;quot;IO&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-26&#34; data-line-number=&#34;26&#34;&gt;     ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-27&#34; data-line-number=&#34;27&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-28&#34; data-line-number=&#34;28&#34;&gt;&lt;span class=&#34;ot&#34;&gt;runEIO ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-29&#34; data-line-number=&#34;29&#34;&gt;runEIO &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; retractEff &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; runEitherDef&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-30&#34; data-line-number=&#34;30&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-31&#34; data-line-number=&#34;31&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-32&#34; data-line-number=&#34;32&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-33&#34; data-line-number=&#34;33&#34;&gt;  result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; runEIO &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-34&#34; data-line-number=&#34;34&#34;&gt;    (path&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;_) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO getArgs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-35&#34; data-line-number=&#34;35&#34;&gt;    file &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt;  liftIO (LB.readFile path)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-36&#34; data-line-number=&#34;36&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-37&#34; data-line-number=&#34;37&#34;&gt;      csv &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat [header, &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, file]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-38&#34; data-line-number=&#34;38&#34;&gt;    (_, logs) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; either throwError pure (decodeByName csv)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Header&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;LogCsv&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-39&#34; data-line-number=&#34;39&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-40&#34; data-line-number=&#34;40&#34;&gt;      log&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; V.head logs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-41&#34; data-line-number=&#34;41&#34;&gt;    info &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; either throwError pure (eitherDecode &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; log&amp;#39; &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;info)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-42&#34; data-line-number=&#34;42&#34;&gt;    pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-43&#34; data-line-number=&#34;43&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;path &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; path &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;time &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (log&amp;#39; &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;time) &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; info&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-44&#34; data-line-number=&#34;44&#34;&gt;  either error print result&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-45&#34; data-line-number=&#34;45&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-46&#34; data-line-number=&#34;46&#34;&gt;&lt;span class=&#34;ot&#34;&gt;header ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-47&#34; data-line-number=&#34;47&#34;&gt;header &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; LB.intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap fromString &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; henumerateFor&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-48&#34; data-line-number=&#34;48&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyValue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-49&#34; data-line-number=&#34;49&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CsvFields&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-50&#34; data-line-number=&#34;50&#34;&gt;  ((&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; symbolVal &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; proxyAssocKey)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-51&#34; data-line-number=&#34;51&#34;&gt;  []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このメイン関数は次のような CSV をログデータとして読み込んで，2行目の JSON もパースしたうえで，ひとつの拡張可能レコードとして吐き出す．&lt;/p&gt;
&lt;pre class=&#34;csv&#34;&gt;&lt;code&gt;2018-02-23T03:10:00,&amp;quot;{&amp;quot;&amp;quot;code&amp;quot;&amp;quot;:123,&amp;quot;&amp;quot;message&amp;quot;&amp;quot;:&amp;quot;&amp;quot;hello&amp;quot;&amp;quot;}&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;正直，この例だと大した長さではないので切り分けるメリットはなーーんにもないんですけど．&lt;/p&gt;
&lt;h3 id=&#34;stack-script-とカスタムスナップショット&#34;&gt;&lt;code&gt;stack script&lt;/code&gt; とカスタムスナップショット&lt;/h3&gt;
&lt;p&gt;その前に，このメイン関数をどうやって実行するか． この程度のモノをいちいち stack プロジェクトにしていてはスペースの無駄なので，&lt;code&gt;stack script&lt;/code&gt; を使う．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stack script&lt;/code&gt; コマンド知っていますか？ &lt;code&gt;stack runghc&lt;/code&gt; と基本的には一緒なのだが，違いは2点(たぶん)．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;resolver の指定が必須 (たしか &lt;code&gt;runghc&lt;/code&gt; は指定しなければプロジェクトのを使うはず)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;パッケージを引数で指定する必要が無い&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(2)がすごいよね． &lt;code&gt;runghc&lt;/code&gt; の場合，使ってるパッケージを &lt;code&gt;--package hoge&lt;/code&gt; と一つずつ指定しなければならない(今回は&lt;a href=&#34;https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96#file-fun-of-tangle-hs-L13&#34;&gt;使ってるパッケージが多い&lt;/a&gt;ので尚更大変)が，&lt;code&gt;script&lt;/code&gt; なら指定した resolver から自動で解決してくれる．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ただ問題がひとつ． 今回は &lt;a href=&#34;https://hackage.haskell.org/package/aeson&#34;&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;https://hackage.haskell.org/package/cassava&#34;&gt;&lt;code&gt;cassava&lt;/code&gt;&lt;/a&gt; の型クラスのインスタンスを拡張可能レコードで使いたいので，Stackage に登録していない &lt;a href=&#34;https://github.com/matsubara0507/extensible-instances&#34;&gt;&lt;code&gt;matsubara0507/extensible-instances&lt;/code&gt;&lt;/a&gt; にも依存したい． そこで，カスタムスナップショットだ． 日本語で詳しくは下記のサイトにまとまっていた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html&#34;&gt;カスタムスナップショットの紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここには書いてないが，カスタムスナップショットは &lt;code&gt;stack script&lt;/code&gt; にも使える． 例えば今回は次のようなカスタムスナップショットを作った．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;resolver:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-10.6&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;packages:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://github.com/matsubara0507/extensible-instances.git&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;commit:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 8dabe7a3dd9cf162e2d81e4ca16dbe73b98a3809&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;snapshot.yaml&lt;/code&gt; とし，例題のコードを &lt;code&gt;fun-of-tangle.hs&lt;/code&gt; とすると次のように実行できる&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;$ &lt;span class=&#34;fu&#34;&gt;cat&lt;/span&gt; sampleLog.csv&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;2018-02-23T03&lt;/span&gt;:10:00,&lt;span class=&#34;st&#34;&gt;&amp;quot;{&amp;quot;&amp;quot;code&amp;quot;&amp;quot;:123,&amp;quot;&amp;quot;message&amp;quot;&amp;quot;:&amp;quot;&amp;quot;hello&amp;quot;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;$ &lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; script --resolver ./snapshot.yaml -- fun-of-tangle.hs sampleLog.csv&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ex&#34;&gt;Using&lt;/span&gt; resolver: custom: ./snapshot.yaml specified on command line&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ex&#34;&gt;path&lt;/span&gt; @= &lt;span class=&#34;st&#34;&gt;&amp;quot;sampleLog.csv&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;: time @= &lt;span class=&#34;st&#34;&gt;&amp;quot;2018-02-23T03:10:00&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;: code @= 123 &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;: message @= &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;: nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;ヘッダの生成&#34;&gt;ヘッダの生成&lt;/h3&gt;
&lt;p&gt;CSV の読み込みには &lt;code&gt;cassava&lt;/code&gt; というパッケージを使っている． このパッケージには &lt;code&gt;FromRecord&lt;/code&gt; と &lt;code&gt;FromNamedRecord&lt;/code&gt; 型クラスがある． 前者は前から順に勝手に取っていくのに対し，後者はフィールド名と CSV の列名を対応させて取ってきてくれる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cassava&lt;/code&gt; 系の拡張可能レコードのインスタンスを書いてるときは &lt;code&gt;extensible&lt;/code&gt; 力がまだ低く，フィールドからインデックスをとっていくる方法が分からなかった． そのため &lt;code&gt;FromRecord&lt;/code&gt; 型クラスのインスタンスが &lt;code&gt;extensible-instances&lt;/code&gt; にはない(何故かついこの前，&lt;a href=&#34;https://github.com/fumieval/extensible/commit/074210e76ed5bd35f62d452f66c940a40d821534&#34;&gt;本家へコミット&lt;/a&gt;されたけど)．&lt;/p&gt;
&lt;p&gt;なので，型から列名のヘッダーを生成してしまおう，というのが &lt;code&gt;header&lt;/code&gt; 関数．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;header ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LB.ByteString&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;header &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; LB.intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap fromString &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; henumerateFor&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyValue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CsvFields&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;  ((&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; symbolVal &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; proxyAssocKey)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;  []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proxy (KeyValue KnownSymbol Show)&lt;/code&gt; ってのが悲しいですよね…(&lt;code&gt;Show&lt;/code&gt; は全く無意味)． キー側だけ型クラスを指定する方法は無いような気がしたんだよなぁ．&lt;/p&gt;
&lt;h2 id=&#34;分割しましょう&#34;&gt;分割しましょう&lt;/h2&gt;
&lt;p&gt;では本題．&lt;/p&gt;
&lt;p&gt;まずは型クラスを考えよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  make ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFields&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試しに，&lt;code&gt;&amp;quot;path&amp;quot; &amp;gt;: FilePath&lt;/code&gt; のインスタンスを書いてみる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; FilePath) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; lift &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; liftIO getArgs &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;    (path &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; _) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; pure path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;    _          &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; throwError &lt;span class=&#34;st&#34;&gt;&amp;quot;please path.&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;他のはできるだろうか？ 元のメイン関数を見ればわかると思うが，たぶん無理だと思う． 他のフィールドは &lt;code&gt;log&#39;&lt;/code&gt; 変数に保存した中間状態を共有するからだ．&lt;/p&gt;
&lt;h3 id=&#34;中間状態をどうするか&#34;&gt;中間状態をどうするか&lt;/h3&gt;
&lt;p&gt;他にもっといい手はあるかもしれないが，今回は &lt;strong&gt;レコードを中間状態も加えて拡張する&lt;/strong&gt; ことにする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MidFields&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[&amp;quot;log&amp;quot; &amp;gt;: LogCsv &amp;#39;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;info&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt;] &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  make ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MidFields&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;AssocValue&lt;/span&gt; kv)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Product.html#t:-43--43-&#34;&gt;&lt;code&gt;(++)&lt;/code&gt;&lt;/a&gt; は型レベルリストの連結演算子だ． &lt;code&gt;&#39;[&amp;quot;log&amp;quot; &amp;gt;: LogCsv &#39;: &amp;quot;info&amp;quot; &amp;gt;: Info]&lt;/code&gt; が追加する中間状態にあたる． これを最後にどうやって外すかと言うと，実は簡単で &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:shrink&#34;&gt;&lt;code&gt;shrink&lt;/code&gt;&lt;/a&gt; 関数で縮小してやればよい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;makeLog ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Log&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;makeLog &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; shrink &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; runTangles tangles (wrench emptyRecord)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;tangles ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Comp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MidFields&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EIO&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;FieldI&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:*&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MidFields&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; data-line-number=&#34;5&#34;&gt;tangles &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; data-line-number=&#34;6&#34;&gt;  \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Comp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; pure &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; make m&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;中間状態のインスタンス定義してしまう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogCsv&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;    file &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; liftIO &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; LB.readFile &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;    (_, log&amp;#39;) &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;      either throwError pure (decodeByName &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; mconcat [header, &lt;span class=&#34;st&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, file])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; data-line-number=&#34;6&#34;&gt;    pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; V.head log&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;info&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; data-line-number=&#34;9&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; data-line-number=&#34;10&#34;&gt;    log&amp;#39; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;log&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; data-line-number=&#34;11&#34;&gt;    lift &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; either throwError pure (eitherDecode &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; log&amp;#39; &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;info)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;うん…まぁ…読みやすさのためにね，多少は &lt;code&gt;do&lt;/code&gt; を残しましたよ(タイトル詐欺)．&lt;/p&gt;
&lt;h3 id=&#34;残りは簡単&#34;&gt;残りは簡単&lt;/h3&gt;
&lt;p&gt;あとは，フィールドを取り出すだけなので簡単．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Time&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;time &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;log&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; data-line-number=&#34;5&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;code &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;info&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MakeLog&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; data-line-number=&#34;8&#34;&gt;  make _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;message &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lasso &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;info&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;メイン関数はこんな感じ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; either error print &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; runEIO makeLog&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;わぁすっきり(メイン関数は)．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;これぐらいの規模だとメリットが皆無なんですが，もっと CSV の列数が多くなったらどうでしょう？ うーーーん，あんまり変わらないかも(笑) まぁ，少なくとも面白い(不思議な)プログラミングが出来るのは確かです．&lt;/p&gt;
&lt;p&gt;僕は試しにこの方法で，&lt;a href=&#34;https://github.com/matsubara0507/source-gh-pages/blob/tangle/app/Rules.hs&#34;&gt;このサイトの Hakyll コード&lt;/a&gt;を切り刻んでみました．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html</id><title type="text">このサイトに機能を追加 2018</title><updated>2018-02-21T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;このサイトに機能を追加 2018&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-02-21&#34; itemprop=&#34;datePublished&#34;&gt;
        Feb 21, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/site.html&#34;&gt;site&lt;/a&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;このサイトは Haskell の静的サイトジェネレーター &lt;a href=&#34;https://jaspervdj.be/hakyll/&#34;&gt;Hakyll&lt;/a&gt; を使っています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2016-07-07-started-github-pages.html&#34;&gt;GitHub Pages はじめました - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定期的に自分のサイトをいじってるんだけど，久々に本腰入れて改良した． このサイトを作り始めたころと違い「Haskell力」が段違いなのでサクサクできたぜ．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;追加したのは以下の7つ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リンクチェッカー&lt;/li&gt;
&lt;li&gt;LTS 10 に対応&lt;/li&gt;
&lt;li&gt;可変なキーバリューストアを aeson で&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post/&lt;/code&gt; 以下のマークダウン置き場を変更&lt;/li&gt;
&lt;li&gt;フィードの生成&lt;/li&gt;
&lt;li&gt;ページネーションの追加&lt;/li&gt;
&lt;li&gt;タグの追加&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初のリンクチェッカーは &lt;code&gt;stack test&lt;/code&gt; で行うのだが，追加したのは実は結構前． 記事にしてなかったので書き足しておく．&lt;/p&gt;
&lt;h2 id=&#34;リンクチェッカー&#34;&gt;リンクチェッカー&lt;/h2&gt;
&lt;p&gt;記事内にあるリンクを実際に ping して，リンクが有効かを検査するテストを作った． もちろん Haskell で書いて &lt;code&gt;stack test&lt;/code&gt; で実行できるようにした． コードはこんな感じ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;                   &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;, null)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;                 (nub, sort)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Maybe&lt;/span&gt;                (fromMaybe)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt;                 (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;, isPrefixOf, null, unpack)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Traversable&lt;/span&gt;          (traverse)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Network.HTTP.Client&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Network.HTTP.Client.TLS&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Network.HTTP.Types.Status&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt;, ok200)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Shelly&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Test.Hspec&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Text.HTML.Scalpel.Core&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; data-line-number=&#34;17&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; data-line-number=&#34;18&#34;&gt;  urls &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fmap mconcat &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; shelly &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; data-line-number=&#34;19&#34;&gt;    run_ &lt;span class=&#34;st&#34;&gt;&amp;quot;stack&amp;quot;&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;--&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;site&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; data-line-number=&#34;20&#34;&gt;    files &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; ls &lt;span class=&#34;st&#34;&gt;&amp;quot;_site/posts&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; data-line-number=&#34;21&#34;&gt;    traverse (fmap scrapeLinks &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; readfile) files&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; data-line-number=&#34;22&#34;&gt;  hspec &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; mapM_ spec &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; nub &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; sort &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; filter check urls&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; data-line-number=&#34;23&#34;&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; data-line-number=&#34;24&#34;&gt;  check url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; not &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; or &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;) (null url) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fmap&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; data-line-number=&#34;25&#34;&gt;    (&lt;span class=&#34;ot&#34;&gt;`isPrefixOf`&lt;/span&gt; url)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; data-line-number=&#34;26&#34;&gt;    [&lt;span class=&#34;st&#34;&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;../&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; data-line-number=&#34;27&#34;&gt;  spec url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; it (unpack url) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; linkStatus url &lt;span class=&#34;ot&#34;&gt;`shouldReturn`&lt;/span&gt; ok200&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; data-line-number=&#34;28&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; data-line-number=&#34;29&#34;&gt;&lt;span class=&#34;ot&#34;&gt;scrapeLinks ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-30&#34; data-line-number=&#34;30&#34;&gt;scrapeLinks txt &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fromMaybe [] &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; scrapeStringLike txt scraper&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-31&#34; data-line-number=&#34;31&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; scraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; attrs &lt;span class=&#34;st&#34;&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-32&#34; data-line-number=&#34;32&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-33&#34; data-line-number=&#34;33&#34;&gt;&lt;span class=&#34;ot&#34;&gt;linkStatus ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-34&#34; data-line-number=&#34;34&#34;&gt;linkStatus url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-35&#34; data-line-number=&#34;35&#34;&gt;  manager &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; newManager tlsManagerSettings&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-36&#34; data-line-number=&#34;36&#34;&gt;  request &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; parseRequest &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; unpack url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-37&#34; data-line-number=&#34;37&#34;&gt;  responseStatus&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-38&#34; data-line-number=&#34;38&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; httpNoBody (request { requestHeaders &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; [(&lt;span class=&#34;st&#34;&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)] }) manager&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTTPクライアントには &lt;a href=&#34;https://hackage.haskell.org/package/http-client&#34;&gt;&lt;code&gt;http-client&lt;/code&gt;&lt;/a&gt; を，スクレイピングには &lt;a href=&#34;https://hackage.haskell.org/package/scalpel&#34;&gt;&lt;code&gt;scalpel&lt;/code&gt;&lt;/a&gt; を使っている． &lt;a href=&#34;https://hackage.haskell.org/package/shelly&#34;&gt;&lt;code&gt;shelly&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;ls&lt;/code&gt; 関数を使って記事の一覧を取得してきている(これが Windows でも動くからうれしい)． 表示をそれっぽくするために &lt;a href=&#34;https://hackage.haskell.org/package/hspec&#34;&gt;&lt;code&gt;hspec&lt;/code&gt;&lt;/a&gt; を使っている． &lt;code&gt;check&lt;/code&gt; 補助関数で自分のページや空文字を排除している．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;これでリンク切れや単純にタイポなんかを検出できるようになったんだが，直すのがめんどくさくて結局放置していること(オイ)．&lt;/p&gt;
&lt;h2 id=&#34;lts-10-に対応&#34;&gt;LTS 10 に対応&lt;/h2&gt;
&lt;p&gt;リンクチェッカを回すために TravisCI を使い始めたが，なぜか GHC8 系の LTS だと OUT OF MEMORY してしまう…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--  While building custom Setup.hs for package Cabal-2.0.1.1 using:
      /home/travis/.stack/setup-exe-cache/x86_64-linux/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-linux/Cabal-2.0.1.0 build --ghc-options &amp;quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&amp;quot;
    Process exited with code: ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)
    Logs have been written to: /home/travis/build/matsubara0507/source-gh-pages/.stack-work/logs/Cabal-2.0.1.1.log
    Configuring Cabal-2.0.1.1...
    Preprocessing library for Cabal-2.0.1.1..
    Building library for Cabal-2.0.1.1..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;かなーーり古い LTS だとうまくいくので，仕方なくそれを使っていたのだが直すことにした． というか知り合いが直し方を記事にしてくれてたのでやってみた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2017-12-31-travis-out-of-memory.html&#34;&gt;travis-ci の初回ビルドで OUT OF MEMORY が出た時の対処法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;戦犯は &lt;code&gt;Cabal&lt;/code&gt; パッケージなので，こいつだけ先に &lt;code&gt;-j 1&lt;/code&gt; オプション(メモリを節約するが速度が遅い)でビルドしてしまうという戦略． この記事のサイトの &lt;a href=&#34;https://github.com/e-bigmoon/haskell-blog/blob/a229f118f121e0ad843faae1412e938e3e4f3a6b/.travis.yml&#34;&gt;&lt;code&gt;.travis.yml&lt;/code&gt;&lt;/a&gt; を &lt;del&gt;コピペ&lt;/del&gt; 参考にして次のようにした&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;install:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; mkdir -p ~/.local/bin&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;export PATH=$HOME/.local/bin:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;$PATH&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;travis_retry curl -L https:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;//www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &amp;#39;*/stack&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;jobs:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;include:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; install cabal&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal build -j 1 Cabal&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; install pandoc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; travis_wait 30 stack --no-terminal build pandoc&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; install deprndences&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal test --only-dependencies&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stage:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack test&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;script:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --no-terminal test --no-run-benchmarks --no-haddock-deps&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;hakyll-4.10-が落ちる&#34;&gt;hakyll-4.10 が落ちる&lt;/h3&gt;
&lt;p&gt;OUT OF MEMORY は突破したが…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;tmp&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;stack3402&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;hakyll&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;4.10&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fl&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;rts&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;posix&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;OSThreads.c&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;137&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; error&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;         error&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; undefined reference to &lt;span class=&#34;ch&#34;&gt;&amp;#39;pthread_create&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なぜだ… 最新の &lt;a href=&#34;https://github.com/jaspervdj/hakyll/commit/480da307d22aff8ab3817d1586710c5f4ff6d779&#34;&gt;&lt;code&gt;hakyll-4.11&lt;/code&gt; では直ってるみたい&lt;/a&gt;なので，&lt;code&gt;stack.yaml&lt;/code&gt; に追加したら上手くいった．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; hakyll-4.11.0.0&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; pandoc-citeproc-0.13.0.1&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;シンタックスハイライトが&#34;&gt;シンタックスハイライトが…&lt;/h3&gt;
&lt;p&gt;おかしくなった． 理由は簡単で，Hakyll というか Pandoc がシンタックスハイライトにもともと使っていた &lt;a href=&#34;https://hackage.haskell.org/package/highlighting-kate&#34;&gt;&lt;code&gt;highlighting-kate&lt;/code&gt;&lt;/a&gt; をやめて &lt;a href=&#34;https://hackage.haskell.org/package/skylighting&#34;&gt;&lt;code&gt;skylighting&lt;/code&gt;&lt;/a&gt; に対応したからみたいだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fixpt.de/blog/2017-12-03-hakyll-highlighting-themes.html&#34;&gt;fixpt - Hakyll Code Highlighting Themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので，パッケージを変えたら元に戻った．&lt;/p&gt;
&lt;h2 id=&#34;可変なキーバリューストアを-aeson-で&#34;&gt;可変なキーバリューストアを aeson で&lt;/h2&gt;
&lt;p&gt;テンプレートの方だけで出てくる変数(e.g. &lt;code&gt;$github$&lt;/code&gt; とか)は &lt;code&gt;site.hs&lt;/code&gt; の実装に依存したくなくて，Hakyll をビルドせずとも &lt;code&gt;config.yaml&lt;/code&gt; に好きに追加できるようにしたかった． &lt;a href=&#34;https://hackage.haskell.org/package/yaml&#34;&gt;yaml&lt;/a&gt; パッケージ(というか &lt;a href=&#34;https://hackage.haskell.org/package/aeson&#34;&gt;&lt;code&gt;aeson&lt;/code&gt;&lt;/a&gt;)ではそういうのを出来ないと &lt;strong&gt;思い込んでいたが &lt;code&gt;Map k v&lt;/code&gt; 型を使えばできる&lt;/strong&gt; と最近分かった(インスタンスのリストを眺めてたら気づいた)． なので，今まで使ってた &lt;a href=&#34;https://hackage.haskell.org/package/yaml-light&#34;&gt;&lt;code&gt;yaml-light&lt;/code&gt;&lt;/a&gt; パッケージを捨てて &lt;code&gt;yaml&lt;/code&gt; パッケージで次のように実装した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Yaml&lt;/span&gt;   (decodeFileEither)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Map&lt;/span&gt;    (&lt;span class=&#34;dt&#34;&gt;Map&lt;/span&gt;, foldMapWithKey)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Hakyll&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;  configYaml &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; either (error &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; show) id &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; decodeFileEither &lt;span class=&#34;st&#34;&gt;&amp;quot;config.yaml&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;    siteCtx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mkSiteCtx configYaml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;  hakyllWith config &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mkSiteCtx ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; data-line-number=&#34;16&#34;&gt;mkSiteCtx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; foldMapWithKey constField&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こういう &lt;code&gt;config.yaml&lt;/code&gt; を書いておくと，全てテンプレートの中で参照できる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;site_title:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;baseurl:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;github:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;  matsubara0507&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;post-以下のマークダウン置き場を変更&#34;&gt;&lt;code&gt;post/&lt;/code&gt; 以下のマークダウン置き場を変更&lt;/h2&gt;
&lt;p&gt;記事のマークダウンは全て &lt;code&gt;posts/&lt;/code&gt; 以下に置いていたのだが，各年ごとにディレクトリを切りたいなぁと思った． 例えば &lt;code&gt;posts/2018/02-21-add-feats-mysite-2018.md&lt;/code&gt; といった具合に． しかし，出力は今まで通り &lt;code&gt;posts/2018-02-21-add-feats-mysite-2018.html&lt;/code&gt; としたい(リンクが変わっちゃうからね)． まんま&lt;a href=&#34;http://daimatz.net/text/2014/0126-hakyll.html&#34;&gt;同じことをしてくれている記事&lt;/a&gt;があったので，参考にして次のように書き換えた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;  match &lt;span class=&#34;st&#34;&gt;&amp;quot;posts/*/*&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;    route &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; composeRoutes (gsubRoute &lt;span class=&#34;st&#34;&gt;&amp;quot;/[0-9]{4}/&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; init)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;                          (setExtension &lt;span class=&#34;st&#34;&gt;&amp;quot;html&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;    compile&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;   pandocCompiler&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; data-line-number=&#34;9&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; loadAndApplyTemplate &lt;span class=&#34;st&#34;&gt;&amp;quot;templates/post.html&amp;quot;&lt;/span&gt; postCtx&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; loadAndApplyTemplate &lt;span class=&#34;st&#34;&gt;&amp;quot;templates/default.html&amp;quot;&lt;/span&gt; (postCtx &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; siteCtx)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; data-line-number=&#34;11&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; relativizeUrls&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;gsubRoute&lt;/code&gt; 関数を使うことで，ファイル名を特有のパターン記法(？)でマッチさせ置換できる． &lt;code&gt;gsubRoute &amp;quot;/[0-9]{4}/&amp;quot; $ (++ &amp;quot;-&amp;quot;) . init&lt;/code&gt; の場合，&lt;code&gt;/2018/&lt;/code&gt; をマッチさせ &lt;code&gt;init&lt;/code&gt; して &lt;code&gt;/2018&lt;/code&gt; となり，末尾に &lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt; を追加している．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;さて実はもう一つ問題があって，Hakyll は日時を表すテンプレート変数(&lt;code&gt;$date$&lt;/code&gt; とか)を次のように取得する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;postCtx ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;postCtx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;  [ dateField &lt;span class=&#34;st&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;  , dateField &lt;span class=&#34;st&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%b %-d, %Y&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;  , defaultContext&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;dateField&lt;/code&gt; 関数が記事のファイル名(&lt;code&gt;yyyy-mm-dd-*.md&lt;/code&gt; の部分)かマークダウンのメタ変数から取得している． つまり，&lt;code&gt;posts/2018/02-21-add-feats-mysite-2018.md&lt;/code&gt; というファイル名じゃ日時の変数を取得できない． しょうがないので Hakyll のソースコードを読んで無理やり書き換えた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Time&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.FilePath&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;dateField&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;dateField&amp;#39; key format &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; field key &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; \item &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;  time &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getItemUTC&amp;#39; defaultTimeLocale &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; itemIdentifier item&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;  return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; formatTime defaultTimeLocale format time&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getItemUTC&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadMetadata&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TimeLocale&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identifier&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;UTCTime&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; data-line-number=&#34;10&#34;&gt;getItemUTC&amp;#39; locale ident &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; data-line-number=&#34;11&#34;&gt;  pure &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; parseTimeOrError &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; locale &lt;span class=&#34;st&#34;&gt;&amp;quot;%Y%m-%d&amp;quot;&lt;/span&gt; (yyyy &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; mmdd)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; data-line-number=&#34;12&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; data-line-number=&#34;13&#34;&gt;    path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toFilePath ident&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; data-line-number=&#34;14&#34;&gt;    yyyy &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; takeFileName &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; takeDirectory path&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; data-line-number=&#34;15&#34;&gt;    mmdd &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; take &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; takeBaseName path&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さっきの &lt;code&gt;dateField&lt;/code&gt; の部分を &lt;code&gt;dateField&#39;&lt;/code&gt; にすれば記事のビルドが出来る！&lt;/p&gt;
&lt;h3 id=&#34;vs-recentfirst-関数&#34;&gt;vs &lt;code&gt;recentFirst&lt;/code&gt; 関数&lt;/h3&gt;
&lt;p&gt;記事を日時順に並び変えてくれる &lt;code&gt;recentFirst&lt;/code&gt; 関数もファイル名に依存してる． しょうがないので力技で書き換える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;       (sortBy)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Ord&lt;/span&gt;        (comparing)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;recentFirst&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadMetadata&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Item&lt;/span&gt; a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class=&#34;dt&#34;&gt;Item&lt;/span&gt; a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; data-line-number=&#34;5&#34;&gt;recentFirst&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmap reverse &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; chronological&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;chronological&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadMetadata&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Item&lt;/span&gt; a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class=&#34;dt&#34;&gt;Item&lt;/span&gt; a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; data-line-number=&#34;8&#34;&gt;chronological&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; data-line-number=&#34;9&#34;&gt;  sortByM &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; getItemUTC&amp;#39; defaultTimeLocale &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; itemIdentifier&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;sortByM ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt; k) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m k) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; data-line-number=&#34;12&#34;&gt;sortByM f &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmap (map fst &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; sortBy (comparing snd)) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; mapM (fmap &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (,) &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; f)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;sortByM&lt;/code&gt; 関数は &lt;code&gt;sortBy&lt;/code&gt; の &lt;code&gt;Monad&lt;/code&gt; 版． &lt;code&gt;[a]&lt;/code&gt; を &lt;code&gt;[(a, m k)]&lt;/code&gt; とし &lt;code&gt;[m (a, k)]&lt;/code&gt; にして &lt;code&gt;m [(a, k)]&lt;/code&gt; にしてから &lt;code&gt;k&lt;/code&gt; でソートし最後に &lt;code&gt;a&lt;/code&gt; だけ取り出している． ちなみに，&lt;code&gt;fmap &amp;lt;$&amp;gt; (,) &amp;lt;*&amp;gt; f&lt;/code&gt; の部分は分かりますか？ &lt;code&gt;\x -&amp;gt; (,) x &amp;lt;$&amp;gt; f x&lt;/code&gt; をしてるだけですよ．&lt;/p&gt;
&lt;h2 id=&#34;フィードページネーションタグ&#34;&gt;フィード・ページネーション・タグ&lt;/h2&gt;
&lt;p&gt;実はフィード生成・ページネーション・タグは，もとから Hakyll で提供されている機能だ． どれもこの記事に日本語で書いてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html&#34;&gt;Hakyllでブログを作る(実践編2) - Wake up! Good night*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part3.html&#34;&gt;Hakyllでブログを作る(実践編3) - Wake up! Good night*&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だが躓きポイントはいくつかあった(だいたい日時のやつだけど…)．&lt;/p&gt;
&lt;h3 id=&#34;フィードを生成&#34;&gt;フィードを生成&lt;/h3&gt;
&lt;p&gt;記事の通りに作っても &lt;code&gt;$published$&lt;/code&gt; 変数が無いと怒られる． &lt;code&gt;renderAtom&lt;/code&gt; 関数の中で &lt;code&gt;dateField&lt;/code&gt; 関数を使っているからだ． さすがに書き換えるのはめんどいので，自分で取ってくることにした．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;postCtx ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;postCtx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;  [ dateField &lt;span class=&#34;st&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%Y-%m-%d&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;  , dateField &lt;span class=&#34;st&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%b %-d, %Y&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;  , dateField&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;published&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; data-line-number=&#34;6&#34;&gt;  , dateField&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;updated&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; data-line-number=&#34;7&#34;&gt;  , defaultContext&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; data-line-number=&#34;8&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あと，&lt;a href=&#34;https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Feed.html#t:FeedConfiguration&#34;&gt;フィードに渡す変数&lt;/a&gt;は &lt;code&gt;config.yaml&lt;/code&gt; に書くことにした．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;site_title:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;author:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;email:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;baseurl:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;https://matsubara0507.github.io&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;fu&#34;&gt;val:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;github:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;Config&lt;/code&gt; 型という拡張可能レコードにマッピングし，そのあとに &lt;code&gt;FeedConfiguration&lt;/code&gt; 型に変換する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; ((^.))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;site_title&amp;quot; &amp;gt;: String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;baseurl&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;val&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mkFeedConfig ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FeedConfiguration&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; data-line-number=&#34;14&#34;&gt;mkFeedConfig conf &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FeedConfiguration&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-15&#34; data-line-number=&#34;15&#34;&gt;  { feedTitle       &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;site_title&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-16&#34; data-line-number=&#34;16&#34;&gt;  , feedDescription &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;description&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-17&#34; data-line-number=&#34;17&#34;&gt;  , feedAuthorName  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;author&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-18&#34; data-line-number=&#34;18&#34;&gt;  , feedAuthorEmail &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;email&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-19&#34; data-line-number=&#34;19&#34;&gt;  , feedRoot        &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; conf &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;baseurl&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-20&#34; data-line-number=&#34;20&#34;&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もちろん，&lt;code&gt;siteCtx&lt;/code&gt; も書き換える必要がある．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mkSiteCtx ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;mkSiteCtx &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hfoldMapFor&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyValue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToContext&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;  (toContext &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; symbolVal &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; proxyAssocKey &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; getField)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToContext&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  toContext ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToContext&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; data-line-number=&#34;10&#34;&gt;  toContext _ &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mempty&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; data-line-number=&#34;11&#34;&gt;  toContext k v  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; constField k v&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToContext&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToContext&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-14&#34; data-line-number=&#34;14&#34;&gt;  toContext _ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; foldMapWithKey toContext&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToContext&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToContext&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-17&#34; data-line-number=&#34;17&#34;&gt;  toContext k &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; toContext k &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; runIdentity&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコード最高です．&lt;/p&gt;
&lt;h3 id=&#34;ページネーションを追加&#34;&gt;ページネーションを追加&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html#%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%8D%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3&#34;&gt;参考記事&lt;/a&gt;の中で使われている &lt;code&gt;sortRecentFirst&lt;/code&gt; も日時を取得しているので書き換える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;sortRecentFirst&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadMetadata&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Identifier&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m [&lt;span class=&#34;dt&#34;&gt;Identifier&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;sortRecentFirst&amp;#39; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  fmap (fmap itemIdentifier) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; recentFirst&amp;#39; &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap (flip &lt;span class=&#34;dt&#34;&gt;Item&lt;/span&gt; ())&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;タグを追加&#34;&gt;タグを追加&lt;/h3&gt;
&lt;p&gt;躓きと言うかデザインの問題なのだが，タグのテンプレート変数を生成する &lt;a href=&#34;https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Tags.html#v:tagsField&#34;&gt;&lt;code&gt;tagsField&lt;/code&gt;&lt;/a&gt; 関数が，タグをカンマ区切りの文字列にしちゃうのがあった． 個人的には空白区切りにして欲しいので書き換えた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;                   (intersperse)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Text.Blaze.Html&lt;/span&gt;             (toHtml, toValue, (!))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Blaze.Html5&lt;/span&gt;            &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;H&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Blaze.Html5.Attributes&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;A&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;tagsFieldWithSep ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;H.Html&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tags&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-7&#34; data-line-number=&#34;7&#34;&gt;tagsFieldWithSep sep &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-8&#34; data-line-number=&#34;8&#34;&gt;  tagsFieldWith getTags simpleRenderLink (mconcat &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; intersperse sep)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;simpleRenderLink ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; FilePath &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;H.Html&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-11&#34; data-line-number=&#34;11&#34;&gt;simpleRenderLink tag &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-12&#34; data-line-number=&#34;12&#34;&gt;  fmap (\path &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; H.a &lt;span class=&#34;fu&#34;&gt;!&lt;/span&gt; A.href (toValue &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; toUrl path) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; toHtml tag)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tagsFieldWithSep &amp;quot; &amp;quot;&lt;/code&gt; とすれば空白区切りになる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ずーーとやろうやろうと思ってたことをいっきに片したぜ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html</id><title type="text">自己紹介ページを生成する whoami CLI を作った (Haskell)</title><updated>2018-02-19T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;自己紹介ページを生成する whoami CLI を作った (Haskell)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-02-19&#34; itemprop=&#34;datePublished&#34;&gt;
        Feb 19, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt; &lt;a href=&#34;/tags/extensible-package.html&#34;&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/whoami&#34;&gt;whoami&lt;/a&gt; という CLI を作りました． こんな感じの Yaml ファイルから&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;account:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;github:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;qiita:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;site:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ひげメモ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;url:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://matsubara0507.github.io&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; メモ書きブログ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;post:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;latest:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 10&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;posts:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://haskell.jp/blog/posts/2017/advent-calendar-2017.html&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; data-line-number=&#34;13&#34;&gt;      &lt;span class=&#34;fu&#34;&gt;date:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 2017-12-31&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; data-line-number=&#34;14&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;url:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://iggg.github.io/2017/06/01/make-tweet-slack-bot&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;fu&#34;&gt;library:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; data-line-number=&#34;16&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; chatwork&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; data-line-number=&#34;17&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;url:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://hackage.haskell.org/package/chatwork&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; data-line-number=&#34;18&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; The ChatWork API in Haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; data-line-number=&#34;19&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;language:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; data-line-number=&#34;20&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; thank_you_stars&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; data-line-number=&#34;21&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;url:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://hex.pm/packages/thank_you_stars&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; data-line-number=&#34;22&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;language:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; elixir&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;fu&#34;&gt;qiita:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; data-line-number=&#34;24&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;posts:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; data-line-number=&#34;25&#34;&gt;&lt;span class=&#34;fu&#34;&gt;app:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; data-line-number=&#34;26&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;name:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; AnaQRam&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; data-line-number=&#34;27&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;url:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; http://github.com/matsubara0507/AnaQRam&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; data-line-number=&#34;28&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;description:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; QRコードを利用したアナグラム(並び替えパズル)&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こんな感じの Markdown を生成する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode markdown&#34;&gt;&lt;code class=&#34;sourceCode markdown&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;# MATSUBARA Nobutada&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;- &lt;span class=&#34;ot&#34;&gt;[GitHub](https://github.com/matsubara0507)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fl&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[Qiita](https://qiita.com/matsubara0507)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;## My Sites&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;- &lt;span class=&#34;ot&#34;&gt;[ひげメモ](http://matsubara0507.github.io)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - メモ書きブログ&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;fu&#34;&gt;## My Posts&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;- &lt;span class=&#34;ot&#34;&gt;[Haskell Advent Calendar 2017 まとめ - Haskell-jp](http://haskell.jp/blog/posts/2017/advent-calendar-2017.html)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - posted on 2017-12-31&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;fl&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[LINE の Echo Bot を Google Cloud Functions に作る](https://qiita.com/matsubara0507/items/04ab3c2197aa5f68e499)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - posted on 2017-11-21&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;fl&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[GitHub にチャット機能のようなものが追加された (team discussions)](https://qiita.com/matsubara0507/items/47d2e2545553e415f969)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - posted on 2017-11-21&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;fl&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[GitHub Project に自動でカードのカラム遷移をする機能が追加された](https://qiita.com/matsubara0507/items/f384991b4854aa28745a)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - posted on 2017-10-31&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;fl&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[Slack から特定のアカウントでツイートする Bot を作った｜群馬大学電子計算機研究会 IGGG](http://iggg.github.io/2017/06/01/make-tweet-slack-bot)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - posted on 2017-06-01&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; data-line-number=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; data-line-number=&#34;21&#34;&gt;&lt;span class=&#34;fu&#34;&gt;## Applications&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-22&#34; data-line-number=&#34;22&#34;&gt;- &lt;span class=&#34;ot&#34;&gt;[AnaQRam](http://github.com/matsubara0507/AnaQRam)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - QRコードを利用したアナグラム(並び替えパズル)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-24&#34; data-line-number=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-25&#34; data-line-number=&#34;25&#34;&gt;&lt;span class=&#34;fu&#34;&gt;## Libraries&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-26&#34; data-line-number=&#34;26&#34;&gt;- &lt;span class=&#34;ot&#34;&gt;[chatwork](http://hackage.haskell.org/package/chatwork)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-27&#34; data-line-number=&#34;27&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - The ChatWork API in Haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-28&#34; data-line-number=&#34;28&#34;&gt;&lt;span class=&#34;fl&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;[thank_you_stars](http://hex.pm/packages/thank_you_stars)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-29&#34; data-line-number=&#34;29&#34;&gt;&lt;span class=&#34;fl&#34;&gt;    - A tool for starring GitHub repositories.&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yaml ファイルでは足りない情報をスクレイピングや各種 Web サービスの API で拾ってくる． なんか自分のアクティビティを紹介するページを SNS にリンクしてる人が多いと思うんだけど，そのページをできるだけ楽して生成したいなぁというのがモチベーション．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ホントはバイト先で作ってる Haskell 製の社内用 CLI ツールを公開したくて，内容を公開できるようにしたツールです． こんな感じのデータ処理をするツールを，バイト先では Haskell で作ってた．&lt;/p&gt;
&lt;h2 id=&#34;extensible&#34;&gt;extensible&lt;/h2&gt;
&lt;p&gt;このツールの(まぁまぁ)面白いところは，&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; というパッケージの機能をふんだんに使っている． 拡張可能レコード，バリアント，作用を使い，ついでに &lt;a href=&#34;https://hackage.haskell.org/package/extensible/docs/Data-Extensible-GetOpt.html&#34;&gt;GetOpt&lt;/a&gt; も使ってみた． 軽く補足しておく(&lt;strong&gt;但し，作者ではないので間違っている部分はあるかも&lt;/strong&gt;)．&lt;/p&gt;
&lt;h3 id=&#34;拡張可能レコード&#34;&gt;拡張可能レコード&lt;/h3&gt;
&lt;p&gt;Haskell のレコード構文&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; hoge1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;,&lt;span class=&#34;ot&#34;&gt; hoge2 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を，型レベル辞書を用いて次のように書ける．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: Int, &amp;quot;hoge2&amp;quot; &amp;gt;: Text ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;OverloadedLabels&lt;/code&gt; 言語拡張と組み合わせて，名前衝突の無いフィールド名を扱えたり，&lt;code&gt;lens&lt;/code&gt; を用いた OOP のような参照(e.g. &lt;code&gt;hoge ^. #hoge1&lt;/code&gt;)が出来る． また，&lt;a href=&#34;/posts/2017-11-28-fun-of-extensible-1.html&#34;&gt;レコードの拡縮もできる&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id=&#34;拡張可能バリアント&#34;&gt;拡張可能バリアント&lt;/h3&gt;
&lt;p&gt;次のような直和型&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge2&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を，型レベル辞書を用いて，バリアント型のように書ける．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Hoge&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;hoge1&amp;quot; &amp;gt;: Int, &amp;quot;hoge2&amp;quot; &amp;gt;: Text ]&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(正直あんまり利点が分かってないけど)拡縮はもちろん，&lt;a href=&#34;/posts/2018-01-31-fun-of-extensible-2.html&#34;&gt;バリアントの操作関数をファイル分割して実装&lt;/a&gt;もできる．&lt;/p&gt;
&lt;h3 id=&#34;拡張可能作用&#34;&gt;拡張可能作用&lt;/h3&gt;
&lt;p&gt;型レベル辞書によってモナドスタックを表現する． 今回は次のようなモナドを定義した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceM&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eff&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ ReaderDef Config&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;dt&#34;&gt;EitherDef&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceException&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;   , &lt;span class=&#34;dt&#34;&gt;LoggerDef&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;IO&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;基本的に&lt;a href=&#34;/posts/2017-12-09-extensible-effects-step-by-step.html&#34;&gt;普通のモナドトランスフォーマーのように扱える&lt;/a&gt;． じゃぁ素直にモナドトランスフォーマー使えよって感じかもしれないけど気にしないで．&lt;/p&gt;
&lt;h3 id=&#34;getopt-ラッパー&#34;&gt;&lt;code&gt;GetOpt&lt;/code&gt; ラッパー&lt;/h3&gt;
&lt;p&gt;GHCには標準で &lt;code&gt;--output hoge&lt;/code&gt; みたいな CLI のオプション引数をパースしてくれるモジュール &lt;a href=&#34;https://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html&#34;&gt;&lt;code&gt;GetOpt&lt;/code&gt;&lt;/a&gt; がある(ぼくは初めて使った)． extensible では，パース結果を拡張可能レコードにマッピングするための補助関数が&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-GetOpt.html&#34;&gt;提供されている&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;キモになるのは &lt;code&gt;withGetOpt&lt;/code&gt; 関数である．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;withGetOpt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;OptionDescr&lt;/span&gt; h) xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; h xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一引数目の文字列はパース失敗したとき(要するにオプションが間違ってるとき)に表示する「使い方」に使われる． 例えば，whoami だと&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;whoami [options] [input-file]
  -o FILE               --output=FILE                Write output to FILE instead of stdout.
  -t FORMAT, -w FORMAT  --to=FORMAT, --write=FORMAT  Specify output format. default is `markdown`.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;の &lt;code&gt;[options] [input-file]&lt;/code&gt; が一引数目だ． 二引数目はオプションのパーサー(？)の定義を拡張可能レコードで与えており，三引数目がパース結果の拡張可能レコードと残りの(空白区切りの)文字列を受け取ってどうするかの振る舞いを与える．&lt;/p&gt;
&lt;p&gt;まぁ詳しくは&lt;a href=&#34;https://www.schoolofhaskell.com/user/fumieval/extensible/getopt-and-extensible-records&#34;&gt;作者さんの記事&lt;/a&gt;で紹介されている(英語だけど，あと一引数目の文字列はこの記事以降に追加された機能らしく，サンプルコードにはない)．&lt;/p&gt;
&lt;h3 id=&#34;extensible-instances&#34;&gt;extensible-instances&lt;/h3&gt;
&lt;p&gt;拡張可能レコードは全て &lt;code&gt;Record &#39;[...]&lt;/code&gt; の型エイリアスで定義する． つまり，拡張可能レコードの何らかの型クラスのインスタンスは &lt;code&gt;Record &#39;[...]&lt;/code&gt; に適用しておけば全部で使える(逆に影響力がでかいともいえる)．&lt;/p&gt;
&lt;p&gt;いくつかの自作アプリーケーションでインスタンスを作っていて，ダブってたのでひとつのリポジトリにまとめた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/extensible-instances&#34;&gt;matsubara0507/extensible-instances - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(なんか作者本人じゃないから気が引けて) Hackage にはあげてないがパッケージの体はしてるので，&lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos&#34;&gt;&lt;code&gt;stack.yaml&lt;/code&gt; の &lt;code&gt;extra-deps&lt;/code&gt; に記述&lt;/a&gt;することで使えるはず．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;注意点として &lt;a href=&#34;https://github.com/fumieval/extensible&#34;&gt;fumieval/extensible&lt;/a&gt; の&lt;a href=&#34;https://github.com/fumieval/extensible/blob/master/examples/aeson.hs&#34;&gt;例にある &lt;code&gt;FromJSON&lt;/code&gt; のインスタンス&lt;/a&gt;とは微妙に実装が違う． 作者さんのは &lt;code&gt;Maybe a&lt;/code&gt; にしてもキーが存在しないといけないのだが，&lt;code&gt;aeson&lt;/code&gt; の &lt;code&gt;Generics&lt;/code&gt; は &lt;code&gt;Maybe a&lt;/code&gt; ならキーが無くても良いので，そっちに合わせた．&lt;/p&gt;
&lt;h2 id=&#34;仕組み&#34;&gt;仕組み&lt;/h2&gt;
&lt;p&gt;コード自体は&lt;a href=&#34;https://github.com/matsubara0507/whoami&#34;&gt;このリポジトリ&lt;/a&gt;にある．&lt;/p&gt;
&lt;h3 id=&#34;基本的な部分&#34;&gt;基本的な部分&lt;/h3&gt;
&lt;p&gt;基本的に Yaml ファイルにはサイト・記事・ライブラリ・アプリケーションを列挙してもらう． それらは次のような型になっている(型の値として取り出せる)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;name&amp;quot;    &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Accounts&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;site&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;SiteConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt;    &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;latest&amp;quot; &amp;gt;: Maybe Int, &amp;quot;posts&amp;quot; &amp;gt;: [PostConfig]]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;library&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;LibConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;     &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;AppConfig&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;qiita&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QiitaConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; data-line-number=&#34;9&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Accounts&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SiteConfig&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-16&#34; data-line-number=&#34;16&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-17&#34; data-line-number=&#34;17&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-18&#34; data-line-number=&#34;18&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-19&#34; data-line-number=&#34;19&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-20&#34; data-line-number=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-21&#34; data-line-number=&#34;21&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PostConfig&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-22&#34; data-line-number=&#34;22&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Maybe Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-23&#34; data-line-number=&#34;23&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-24&#34; data-line-number=&#34;24&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-25&#34; data-line-number=&#34;25&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-26&#34; data-line-number=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-27&#34; data-line-number=&#34;27&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LibConfig&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-28&#34; data-line-number=&#34;28&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-29&#34; data-line-number=&#34;29&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-30&#34; data-line-number=&#34;30&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-31&#34; data-line-number=&#34;31&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;language&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-32&#34; data-line-number=&#34;32&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-33&#34; data-line-number=&#34;33&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-34&#34; data-line-number=&#34;34&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AppConfig&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-35&#34; data-line-number=&#34;35&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-36&#34; data-line-number=&#34;36&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-37&#34; data-line-number=&#34;37&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-38&#34; data-line-number=&#34;38&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/yaml&#34;&gt;yaml&lt;/a&gt;パッケージを使って，Yaml ファイルから &lt;code&gt;Config&lt;/code&gt; 型にデコードしてもらう． &lt;code&gt;Maybe a&lt;/code&gt; になっているところは書いてあっても無くても良い項目だ．&lt;/p&gt;
&lt;p&gt;そしてサイト・記事・ライブラリ・アプリケーション固有の &lt;code&gt;Config&lt;/code&gt; 型を共通のフォーマットである &lt;code&gt;Info&lt;/code&gt; 型に変換する手続きを型クラスを用いて定義した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;name&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; data-line-number=&#34;4&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; data-line-number=&#34;5&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; data-line-number=&#34;6&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceType&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;post&amp;quot; &amp;gt;: Post&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; data-line-number=&#34;10&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Application&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; data-line-number=&#34;11&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Library&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; data-line-number=&#34;12&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;site&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Site&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; data-line-number=&#34;13&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uniform&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  fetch ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceM&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  fill ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceM&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  uniform ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceM&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; data-line-number=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; data-line-number=&#34;22&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toInfo ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uniform&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceM&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; data-line-number=&#34;23&#34;&gt;toInfo conf &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; uniform &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; fill conf &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; fetch conf&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Uniform&lt;/code&gt; 型クラスに3つの関数は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt; 関数は共通のフォーマットにするための足りない情報(&lt;code&gt;Maybe a&lt;/code&gt; で &lt;code&gt;Nothing&lt;/code&gt; だったところ)をスクレイピングなどで補完&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt; 関数はスクレイピングするための HTML などを取ってくる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniform&lt;/code&gt; 関数は実際に共通フォーマットに変換する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった具合だ(正直分けなくてもいい)．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;他にも GitHub・BitBacket・GitLab なんかを全部一緒に取り扱う &lt;code&gt;Repo&lt;/code&gt; とかも作ってもいいかもしれない． 問題は，自分が GitHub 以外に使ってないのでテストできない点だ．&lt;/p&gt;
&lt;h3 id=&#34;qiita-とか&#34;&gt;Qiita とか&lt;/h3&gt;
&lt;p&gt;Qiita とかは RESTful API を叩いて記事を集めてる． そもそも記事自体を集めるところと，&lt;code&gt;Uniform&lt;/code&gt; 型クラスのインスタンスを共通化するのに &lt;code&gt;Service&lt;/code&gt; 型クラスを作った(名前が微妙)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Service&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  genInfo ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ServiceM&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Info&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Proxy a&lt;/code&gt; なのはしょうがない． お好きなサービス(自分のサイトとかでも)を &lt;code&gt;Service&lt;/code&gt; 型クラスのインスタンスにして，&lt;code&gt;Whoami&lt;/code&gt; 型のインスタンスを書き換えれば，いろんなサイトを共通の形式で扱える．&lt;/p&gt;
&lt;h2 id=&#34;on-github-pages&#34;&gt;on GitHub Pages&lt;/h2&gt;
&lt;p&gt;GitHub Pages で簡単に使えるようにした． サンプルのリポジトリを作ったので，これをフォークして Travis CI と GitHub Pages を設定するだけで使えるはずだ(もちろん &lt;code&gt;whoami.yaml&lt;/code&gt; を書き換えて)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/whoami-example&#34;&gt;matsubara0507/whoami-example - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stackage (というか Hackage)に置いていないツールを &lt;code&gt;stack install&lt;/code&gt; するために，&lt;code&gt;package.yaml&lt;/code&gt; と &lt;code&gt;stack.yaml&lt;/code&gt; と &lt;code&gt;.gitignore&lt;/code&gt; を置いてるけど気にしないで． Travis CI の定期実行を設定しておけば定期的に Qita の記事とかを更新してくれる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;そーいえば，UNIX 系には &lt;code&gt;whoami&lt;/code&gt; というコマンドがあるんでしたね(Windowsユーザー)． 紛らわしい名前にしてしまった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html</id><title type="text">「積み木の水槽」問題の Haskell での回答を読み解く</title><updated>2018-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;「積み木の水槽」問題の Haskell での回答を読み解く&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-02-04&#34; itemprop=&#34;datePublished&#34;&gt;
        Feb 4, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;今朝，バイト先で&lt;a href=&#34;http://nabetani.sakura.ne.jp/hena/ord13blocktup/&#34;&gt;「積み木の水槽」問題&lt;/a&gt;の &lt;a href=&#34;https://rosettacode.org/wiki/Water_collected_between_towers#Haskell&#34;&gt;Haskell での回答&lt;/a&gt;について話題になりました． リンク先の解答を見ると，恐ろしいことに，一行で書けてしまいます(正しくは，この解答では &lt;code&gt;nabetani&lt;/code&gt; さんの問題は解けませんが…)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 2 == solve [1,5,3,7,2]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;solve &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sum &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; filter (&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (zipWith (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; scanl1 max &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;普通の Haskeller であれば，これぐらい目コンパイルして振る舞いを読み解くのは朝飯前でしょうが，Haskell 初学者のために簡単な解説を残しておこうかなと思います．&lt;/p&gt;
&lt;h2 id=&#34;手直し&#34;&gt;手直し&lt;/h2&gt;
&lt;p&gt;前述したとおり，そもそもこれでは &lt;code&gt;nabetani&lt;/code&gt; さんの問題は解けないので，解けるように手直しします． もちろん &lt;strong&gt;1行で&lt;/strong&gt; ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;solve &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sum &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap (sum &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (zipWith (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; scanl1 max &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap (read &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; []))) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; words &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap (bool &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;/=&lt;/span&gt;) &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Data.List&lt;/code&gt; と &lt;code&gt;Data.Bool&lt;/code&gt; を &lt;code&gt;import&lt;/code&gt; してる前提だが，一応一行で書けた． 雑に直したのでもう少し短くできるような気もしますが，まぁそもそも本質的なところでないので勘弁してください．&lt;/p&gt;
&lt;p&gt;ちなみに，そもそもなんで元のコードでは解けないのかというと，&lt;code&gt;nabetani&lt;/code&gt; さんの問題には &lt;code&gt;0&lt;/code&gt; が含むからだ． しかし，&lt;code&gt;0&lt;/code&gt; で水槽を切り分けてあげて，元の解答を &lt;code&gt;map&lt;/code&gt; してあげれば良いだけなのでコアのところはそのまんま(&lt;code&gt;filter (&amp;gt; 0)&lt;/code&gt; は要らない気がしたので消したけど)．&lt;/p&gt;
&lt;h2 id=&#34;読み解く&#34;&gt;読み解く&lt;/h2&gt;
&lt;p&gt;手直しした最終的なコードはテストコードと共に&lt;a href=&#34;https://gist.github.com/matsubara0507/10a44fb2a9676bde9658c3eeec456676&#34;&gt;ココ&lt;/a&gt;にあげた．&lt;/p&gt;
&lt;h3 id=&#34;トップダウンに&#34;&gt;トップダウンに&lt;/h3&gt;
&lt;p&gt;順に読み解く． Haskell でプログラミングするとき(というか関数型プログラミング)はトップダウンに書いていくのが基本なので，読み解くときも上から順に切り分けてく．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;solve ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;solve &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sum &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap countWater &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; splitTank&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;splitTank ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;splitTank &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;  words &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap (bool &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;/=&lt;/span&gt;) &lt;span class=&#34;ch&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;countWater ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;countWater &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sum &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (zipWith (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; scanl1 max &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fmap (read &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; []))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;splitTank&lt;/code&gt; 関数は &lt;code&gt;0&lt;/code&gt; を区切り文字として文字列を切り分けてるだけだ． 悲しいことに，Haskell (というか GHC)の標準モジュールには「任意の文字で文字列を切り分ける」関数がない． なので，&lt;code&gt;0&lt;/code&gt; だけを空白 &lt;code&gt;&#39; &#39;&lt;/code&gt; に置換してから，&lt;code&gt;words&lt;/code&gt; で切り分けている(空白で切り分ける関数 &lt;code&gt;words&lt;/code&gt; は何故か標準にある)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;countWater&lt;/code&gt; 関数が各水槽の水の数を数え上げており，それを最後に総和 &lt;code&gt;sum&lt;/code&gt; しているだけだ．&lt;/p&gt;
&lt;h3 id=&#34;fmap-はわかるよね&#34;&gt;&lt;code&gt;fmap&lt;/code&gt; はわかるよね？&lt;/h3&gt;
&lt;p&gt;ちなみに，さっきから出てきている &lt;code&gt;fmap&lt;/code&gt; という関数はわかりますよね？ 多くの言語でも導入されている，リストや配列の各要素に関数を適用する関数(あるいはメソッド) &lt;code&gt;map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt; をより一般化したものだ． 今回はリストにしか使わないので &lt;code&gt;map&lt;/code&gt; と同義だと考えてくれていい(hlint で注意されるので，&lt;code&gt;fmap&lt;/code&gt; と書く癖がついた)．&lt;/p&gt;
&lt;h3 id=&#34;コアの部分&#34;&gt;コアの部分&lt;/h3&gt;
&lt;p&gt;さて，本題でもある &lt;code&gt;countWater&lt;/code&gt; 関数を読み解く． まずは切り分けよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;countWater ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;countWater &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; sum &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; toWaterLine &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; toInts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toInts ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;toInts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fmap (read &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; []))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toWaterLine ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; data-line-number=&#34;8&#34;&gt;toWaterLine &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; zipWith (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; (zipWith min &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; scanl1 max &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; scanr1 max)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toInts&lt;/code&gt; 関数は数列の文字列から数値のリストに変換している． Haskell で文字列を任意の型に変換するには &lt;code&gt;read :: String -&amp;gt; a&lt;/code&gt; 関数を使う． Haskell において &lt;code&gt;String = [Char]&lt;/code&gt; なので，&lt;code&gt;fmap (: [])&lt;/code&gt; をして &lt;code&gt;String&lt;/code&gt; のリストに変換し，各文字列を &lt;code&gt;read&lt;/code&gt; をしているというわけだ(&lt;code&gt;singleton&lt;/code&gt; みたいな関数が標準にあればいいのに)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toWaterLine&lt;/code&gt; 関数が水槽の各列の水の量を計算し，&lt;code&gt;sum&lt;/code&gt; で総和している． なので，重要なのは &lt;code&gt;toWaterLine&lt;/code&gt; 関数だ． &lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; 演算子や &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt; 演算子などがあって意味不明かもしれないが，この辺りはポイントフリーにするためのツールみたいなもので，アルゴリズムの本質的な部分ではないよ．&lt;/p&gt;
&lt;h3 id=&#34;関数も-monad-型クラスのインスタンス&#34;&gt;関数も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;*&amp;gt;)&lt;/code&gt; 演算子や &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt; 演算子が何をしているかと言うのは &lt;strong&gt;関数型 &lt;code&gt;(-&amp;gt;) a&lt;/code&gt; も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンス&lt;/strong&gt; だという事実を知っていれば簡単に読めますね． Haskell 界隈では常識(要出典)なので，説明しなくても良いかもしれないが，初学者のために念のためしておく．&lt;/p&gt;
&lt;p&gt;それぞれの演算子の型は以下の通り(めんどいので &lt;code&gt;Monad&lt;/code&gt; で統一)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;*&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m b&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(=&amp;lt;&amp;lt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，前述したとおり，関数型 &lt;code&gt;(c -&amp;gt;)&lt;/code&gt; も &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンスなので，&lt;code&gt;m = (c -&amp;gt;)&lt;/code&gt; と置き換えれる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;*&amp;gt;) ::&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(=&amp;lt;&amp;lt;) ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;便利そうなコンビネーターになった． なので，&lt;code&gt;toWaterLine&lt;/code&gt; 関数のこれらの演算子を同様のラムダ式で置き換えてあげよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toWaterLine ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;toWaterLine&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; \xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;) ((\ys &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (zipWith min &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; scanl1 max &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; ys) (scanr1 max ys)) xs) xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; \xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;) ((\ys &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; zipWith min (scanl1 max ys) (scanr1 max ys)) xs) xs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; \xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; zipWith (&lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;) (zipWith min (scanl1 max xs) (scanr1 max xs)) xs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ついでに，他の言語の人では分かりにくい演算子も置き換えたので，これでどの言語の人でも読めるはずだ．&lt;/p&gt;
&lt;h3 id=&#34;アルゴリズム&#34;&gt;アルゴリズム&lt;/h3&gt;
&lt;p&gt;ここからは Haskell 関係ない． ひとつひとつ見ていこう．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scanl :: (b -&amp;gt; a -&amp;gt; b) -&amp;gt; b -&amp;gt; [a] -&amp;gt; [b]&lt;/code&gt; 関数は左畳み込み関数 &lt;code&gt;foldl :: (b -&amp;gt; a -&amp;gt; b) -&amp;gt; b -&amp;gt; [a] -&amp;gt; b&lt;/code&gt; の途中経過もリストで残したような関数だ． つまり &lt;code&gt;foldl f x xs = last $ scanl f x xs&lt;/code&gt; が成り立つ． &lt;code&gt;scanl1 :: (a -&amp;gt; a -&amp;gt; a) -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt; 関数は初期値を無くしたバージョンだ． &lt;code&gt;scanr1&lt;/code&gt; は &lt;code&gt;scanl1&lt;/code&gt; の右畳み込みバージョン．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;scanl max xs&lt;/code&gt; は左から順に，水槽の高さを比較して高い方を残しているので，各列の最も高い左側が残る． &lt;code&gt;scanr1 max xs&lt;/code&gt; は各列の最も高い右側が残る．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/water-towers-hs/water1.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;そして，それらの低い方を残して，もとの高さを引く．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/water-towers-hs/water2.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;すごいできた！&lt;/p&gt;
&lt;h2 id=&#34;試しに&#34;&gt;試しに&lt;/h2&gt;
&lt;p&gt;次のテストコードを走らせてみた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- WalterTowers.hs&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; print &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; all ((&lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; snd &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (show &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; solve &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; fst)) testSet&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;solve &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;testSet ::&lt;/span&gt; [(&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;testSet &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; data-line-number=&#34;9&#34;&gt;  [ (&lt;span class=&#34;st&#34;&gt;&amp;quot;83141310145169154671122&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; data-line-number=&#34;10&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;923111128&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;45&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; data-line-number=&#34;11&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;923101128&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; data-line-number=&#34;12&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;903111128&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;9&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; data-line-number=&#34;13&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; data-line-number=&#34;14&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;31&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; data-line-number=&#34;15&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;412&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; data-line-number=&#34;16&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;3124&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-17&#34; data-line-number=&#34;17&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;11111&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-18&#34; data-line-number=&#34;18&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;222111&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-19&#34; data-line-number=&#34;19&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;335544&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-20&#34; data-line-number=&#34;20&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;1223455321&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-21&#34; data-line-number=&#34;21&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;000&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-22&#34; data-line-number=&#34;22&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;000100020003121&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-23&#34; data-line-number=&#34;23&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;1213141516171819181716151413121&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;56&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-24&#34; data-line-number=&#34;24&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;712131415161718191817161514131216&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;117&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-25&#34; data-line-number=&#34;25&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;712131405161718191817161514031216&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;64&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-26&#34; data-line-number=&#34;26&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;03205301204342100&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-27&#34; data-line-number=&#34;27&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;0912830485711120342&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;18&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-28&#34; data-line-number=&#34;28&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;1113241120998943327631001&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-29&#34; data-line-number=&#34;29&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;7688167781598943035023813337019904732&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;41&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-30&#34; data-line-number=&#34;30&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;2032075902729233234129146823006063388&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;79&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-31&#34; data-line-number=&#34;31&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;8323636570846582397534533&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;44&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-32&#34; data-line-number=&#34;32&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;2142555257761672319599209190604843&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;41&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-33&#34; data-line-number=&#34;33&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;06424633785085474133925235&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;51&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-34&#34; data-line-number=&#34;34&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;503144400846933212134&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;21&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-35&#34; data-line-number=&#34;35&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;1204706243676306476295999864&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;21&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-36&#34; data-line-number=&#34;36&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;050527640248767717738306306596466224&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;29&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-37&#34; data-line-number=&#34;37&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;5926294098216193922825&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;65&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-38&#34; data-line-number=&#34;38&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;655589141599534035&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;29&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-39&#34; data-line-number=&#34;39&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;7411279689677738&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;34&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-40&#34; data-line-number=&#34;40&#34;&gt;  , (&lt;span class=&#34;st&#34;&gt;&amp;quot;268131111165754619136819109839402&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;102&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-41&#34; data-line-number=&#34;41&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;stack runghc&lt;/code&gt; で走らせると．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack runghc WalterTowers.hs
True&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;こういうのを自分で思いつけるようになりたいね…&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html</id><title type="text">拡張可能直和型を引数に取る関数の定義 (Haskell)</title><updated>2018-01-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;拡張可能直和型を引数に取る関数の定義 (Haskell)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-01-31&#34; itemprop=&#34;datePublished&#34;&gt;
        Jan 31, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/extensible-package.html&#34;&gt;extensible-package&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;「&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; パッケージの楽しみ その２」です．&lt;/p&gt;
&lt;p&gt;拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1&#34;&gt;&lt;code&gt;extensible&lt;/code&gt;&lt;/a&gt; について，割とドキュメントには無い(？)ネタを書いておくシリーズ第二弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．&lt;/p&gt;
&lt;p&gt;また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2017-11-28-fun-of-extensible-1.html&#34;&gt;前回&lt;/a&gt;は拡張可能レコードの拡縮の話を書きました． その最後の方に，おまけとして拡張可能直和型の話を書きました． 実際に自分のプログラムで，この拡張可能直和型を使おうとしてみたんですが，パターンマッチが分からず分岐が出来なかったので調べました，ってのが今回のハナシ．&lt;/p&gt;
&lt;p&gt;今回の Haskell コードは基本的に&lt;a href=&#34;https://github.com/matsubara0507/test-extensible/blob/master/src/Sample/Variant.hs&#34;&gt;コレ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;拡張可能直和型&#34;&gt;拡張可能直和型&lt;/h2&gt;
&lt;p&gt;ここでは，Haskell の代数的データ型において&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RGB&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CMYK&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;のように複数の値コンストラクタをとり得る型を直和型ということにします(あんまり一般的ではない？)． このようなデータ型を extensible を使って書くと次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;rgb&amp;quot;  &amp;gt;: (Int,Int,Int)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;cmyk&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;,&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが拡張可能直和型である(と呼んでいる)． 例えば次のような，&lt;code&gt;Color&lt;/code&gt; 型の構造的に部分型である &lt;code&gt;RGB&lt;/code&gt; 型の値を &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:spread&#34;&gt;&lt;code&gt;spread&lt;/code&gt;&lt;/a&gt; という関数を使って持ち上げることが出来る．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RGB&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;rgb&amp;quot; &amp;gt;: (Int,Int,Int) ]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; color1 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; embedAssoc &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;rgb &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RGB&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; color2 &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; spread&lt;span class=&#34;ot&#34;&gt; color1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに「拡張可能直和型」って単語は，ほぼほぼ造語です(すいません)． 作者さんは &lt;strong&gt;Extensible Variants&lt;/strong&gt; と書いているので，正確には拡張可能バリアント型ですかね． ML 系では「バリアント型」って単語は良く使われてますが，Haskell では馴染みが無いので「直和型」って単語を用います．&lt;/p&gt;
&lt;h2 id=&#34;パターンマッチ&#34;&gt;パターンマッチ&lt;/h2&gt;
&lt;p&gt;ここからが本題． 例として次のような図形の型を用いる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Circle&lt;/code&gt; が円で中心点の座標と半径を持ち，&lt;code&gt;Rect&lt;/code&gt; が矩形で左下と右上の座標を持つ． 例えば，図形の面積を求める関数 &lt;code&gt;area&lt;/code&gt; を書くときはパターンマッチを用いて次のように書きますよね．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;area ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;area (&lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; _ r) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pi &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; (r &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;area (&lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; (x1,y1) (x2,y2)) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; abs (x2 &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; x1) &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; abs (y2 &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; y1)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;では，この &lt;code&gt;Shape&lt;/code&gt; 型を拡張可能直和型で書いてみる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;circle&amp;quot; &amp;gt;: Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;rect&amp;quot;&lt;/span&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;   ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;x&amp;quot; &amp;gt;: Double, &amp;quot;y&amp;quot; &amp;gt;: Double ]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;mid&amp;quot; &amp;gt;: Point, &amp;quot;r&amp;quot; &amp;gt;: Double ]) deriving (Show, Eq)&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;ll&amp;quot; &amp;gt;: Point, &amp;quot;ur&amp;quot; &amp;gt;: Point ]) deriving (Show, Eq)&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Record&lt;/code&gt; は拡張可能レコードだ． 後の話の流れのために &lt;code&gt;newtype&lt;/code&gt; で &lt;code&gt;Circle&lt;/code&gt; 型と &lt;code&gt;Rect&lt;/code&gt; 型を定義したが，別に型エイリアスでもいい．&lt;/p&gt;
&lt;p&gt;問題はココからで，どうやって &lt;code&gt;area&lt;/code&gt; 関数を定義するか． (作者さんに聞いてしまえば早いんだけど)パッケージを漁ってたらそれらしい関数 &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Match.html#v:match&#34;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; があった． イロイロ試した結果，&lt;code&gt;match&lt;/code&gt; よりも &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Field.html#v:matchField&#34;&gt;&lt;code&gt;matchField&lt;/code&gt;&lt;/a&gt; の方が使いやすかったので，こっちを使って次のように書ける．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;area ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;area &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchField&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;circle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (\(&lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; s) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; pi &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;r) &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;rect   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; ((&lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; width &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; height)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; data-line-number=&#34;7&#34;&gt;width,&lt;span class=&#34;ot&#34;&gt; height ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; data-line-number=&#34;8&#34;&gt;width  (&lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; s) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; abs &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; s &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;ur &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; s &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;ll &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; data-line-number=&#34;9&#34;&gt;height (&lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; s) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; abs &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; s &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;ur &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;y &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; s &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;ll &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;y&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;意外と簡単にできた！&lt;/p&gt;
&lt;p&gt;(なんでこれでうまくいくかを説明しようと思ったけど，ぼくには説明するのが難しすぎてやめた．) (ちなみに，すごい簡潔に書けるのは &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Wrapper.html#t:Wrapper&#34;&gt;&lt;code&gt;Wrapper&lt;/code&gt;&lt;/a&gt; 型クラスのおかげだと思う．)&lt;/p&gt;
&lt;h2 id=&#34;型クラスを使う&#34;&gt;型クラスを使う&lt;/h2&gt;
&lt;p&gt;ここからが拡張可能直和型のすごいところ(パターンマッチしかできないなら普通の直和型でもいいもんね…)． 型クラスを用いて次のようにも &lt;code&gt;area&lt;/code&gt; 関数を定義できる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  area ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;  area (&lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; s) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pi &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; (s &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;r) &lt;span class=&#34;fu&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;  area &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; width &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; height&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyValue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt;) xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; data-line-number=&#34;11&#34;&gt;  area &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; matchField &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; data-line-number=&#34;12&#34;&gt;    htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyValue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt;)) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; data-line-number=&#34;13&#34;&gt;      \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; area &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; runIdentity)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Forall (KeyValue KnownSymbol Area) xs&lt;/code&gt; という型制約の直観的な解釈は，型レベルリスト &lt;code&gt;xs&lt;/code&gt; の全ての要素 &lt;code&gt;k &amp;gt;: v&lt;/code&gt; が &lt;code&gt;KnownSymbol k&lt;/code&gt; と &lt;code&gt;Area v&lt;/code&gt; を満たす，という意味だ． 即ち，拡張可能直和型の全ての要素が &lt;code&gt;Area&lt;/code&gt; 型クラスのインスタンスであれば，その拡張可能直和型は &lt;code&gt;Area&lt;/code&gt; 型クラスのインスタンスになり得るのだ． ちゃんと次のように動作する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; shape1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;(mkMembership &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (circle &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Circle&lt;/span&gt; (mid &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; (x &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; y &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil) &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; r &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;2.0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;t shape1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;shape1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;ghci&lt;span class=&#34;fu&#34;&gt;&amp;gt;&lt;/span&gt; area shape1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;fl&#34;&gt;12.566370614359172&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これの何がすごいかと言うと，例えば次のように &lt;code&gt;Shape&lt;/code&gt; 型を拡張しよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Point&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;circle&amp;quot; &amp;gt;: Circle&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;rect&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Rect&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;triangle&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;   ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般的な直和型の場合は，&lt;code&gt;Shape&lt;/code&gt; 型のパターンマッチしている部分を全て増やさないといけない． しかし，型クラスを用いた拡張可能直和型の関数であれば，次のようにインスタンスを増やすだけで良い．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;  area (&lt;span class=&#34;dt&#34;&gt;Triangle&lt;/span&gt; (p1, p2, p3)) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;    abs ((p1 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; p3 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;x) &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; (p2 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;y &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; p3 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;y) &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; (p2 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;x &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; p3 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;x) &lt;span class=&#34;fu&#34;&gt;*&lt;/span&gt; (p1 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;y &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt; p3 &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;y)) &lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;書き込んでる行数は大差ないかもしれないが，例えばファイルを分けたりなど，より柔軟に関数を定義できる！&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;code&gt;area&lt;/code&gt; 関数は &lt;code&gt;a -&amp;gt; Double&lt;/code&gt; で返り値の型が &lt;code&gt;Double&lt;/code&gt; だったから楽だった． これが，例えば座標移動をする &lt;code&gt;nudge :: a -&amp;gt; Point -&amp;gt; a&lt;/code&gt; のように，返り値が &lt;code&gt;a&lt;/code&gt; なものは &lt;code&gt;Variant&lt;/code&gt; のインスタンスを定義するのが大変(&lt;a href=&#34;https://github.com/matsubara0507/test-extensible/blob/d5e58f59ad4b1a2f4809bbecd79eeffbe04eec51/src/Sample/Variant.hs#L94&#34;&gt;頑張った&lt;/a&gt;)．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html</id><title type="text">AdC の Haskell 記事を Haskell で集めた</title><updated>2018-01-30T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;AdC の Haskell 記事を Haskell で集めた&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2018-01-30&#34; itemprop=&#34;datePublished&#34;&gt;
        Jan 30, 2018
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Haskell.html&#34;&gt;Haskell&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt; &lt;a href=&#34;/tags/scraping.html&#34;&gt;scraping&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;昨年最後に，Haskell-jp へ以下の記事を寄稿しました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2017/advent-calendar-2017.html&#34;&gt;Haskell Advent Calendar 2017 まとめ - Haskell-jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2017年のアドベントカレンダーに投稿された Haskell 記事を分類して紹介してるだけです． &lt;a href=&#34;https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_まとめ&#34;&gt;Elm のやつ&lt;/a&gt;を見かけて &lt;del&gt;パクリ&lt;/del&gt; オマージュしました．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;分類は温もりのある手作業ですが，Haskell 記事は機械的にあ集めました． 本記事はそのために作った Haskell プログラムに関するメモ書きです．&lt;/p&gt;
&lt;p&gt;全てのコードは以下のリポジトリにあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar&#34;&gt;matsubara0507/haskell-advent-calendar - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に本質的な意味は無いんですが CLI として作っています．&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;ゴールとしては，&lt;strong&gt;年を指定すると Qiita と ADVENTAR の全てのカレンダーをスクレイピングして，結果(Haskell 記事のリスト)を JSON ファイルに書き出す&lt;/strong&gt; プログラムを作る． Haskell に関する記事かどうかは，単純にカレンダーか記事のタイトルに “Haskell” という単語か含まれているかどうかで判断する．&lt;/p&gt;
&lt;h3 id=&#34;パッケージ&#34;&gt;パッケージ&lt;/h3&gt;
&lt;p&gt;お世話になった主要なパッケージ達を先に示しておく(&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/blob/master/package.yaml&#34;&gt;package.yaml&lt;/a&gt; を見れば十分なんだけどね)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; : フィールド数の多いレコード型は拡張可能レコードにしちゃえ
&lt;ul&gt;
&lt;li&gt;フィールドへのアクセスには &lt;a href=&#34;https://hackage.haskell.org/package/lens&#34;&gt;lens&lt;/a&gt; を用いる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/aeson&#34;&gt;aeson&lt;/a&gt; : JSON の読み書きパッケージの金字塔
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/aeson-pretty&#34;&gt;aeson-pretty&lt;/a&gt; : JSON を綺麗にインデントしてくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/scalpel-core&#34;&gt;scalpel-core&lt;/a&gt; : スクレイパーパッケージ(core じゃなくて &lt;a href=&#34;https://hackage.haskell.org/package/scalpel&#34;&gt;scalpel&lt;/a&gt; は Windows だとビルドめんどい)
&lt;ul&gt;
&lt;li&gt;Qiita の HTML の取得には &lt;a href=&#34;https://hackage.haskell.org/package/wreq&#34;&gt;wreq&lt;/a&gt; を使った(操作が簡単なので)&lt;/li&gt;
&lt;li&gt;ADVENTAR は React 製なので &lt;a href=&#34;https://hackage.haskell.org/package/webdriver&#34;&gt;webdriver&lt;/a&gt; で Selenium を使う&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/shelly&#34;&gt;shelly&lt;/a&gt; : スクレイピングが攻撃にならんよう1秒スリープ(OSに依存せずに書ける)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/conduit-combinators&#34;&gt;conduit-combinators&lt;/a&gt; : ストリーミングパッケージの金字塔
&lt;ul&gt;
&lt;li&gt;コッチの方が &lt;a href=&#34;https://hackage.haskell.org/package/conduit&#34;&gt;conduit&lt;/a&gt; より名前の衝突なく関数が使えるので(大本は同じ)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; : CLI の引数をいい感じに処理してくれる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回の主目的ではないが，このプログラムは extensible の拡張可能レコードを用いた optparse-applicative のサンプルコードにもなっていると思う．&lt;/p&gt;
&lt;h3 id=&#34;記事の型を考える&#34;&gt;記事の型を考える&lt;/h3&gt;
&lt;p&gt;最低限必要なのは，記事のタイトルと URL である． 他に，記事の著者と記事が投稿されたカレンダー・日付があった方が，あとで列挙するときに映えるだろう． ということで，以下の型を考えた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds         #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators     #-}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;   &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;auther&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; data-line-number=&#34;11&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; data-line-number=&#34;12&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;calendar&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calendar&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; data-line-number=&#34;13&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;category&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; data-line-number=&#34;14&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; data-line-number=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calendar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; data-line-number=&#34;20&#34;&gt;   &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;title&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; data-line-number=&#34;21&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; data-line-number=&#34;22&#34;&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;category&amp;quot;&lt;/code&gt; は後の(手作業による)分類で用いる． extensible による拡張可能レコードな型だが，何となく読めるだろう(分からなかったググって)．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;インターフェースを揃えるために，&lt;code&gt;Qiita&lt;/code&gt; や &lt;code&gt;ADVENTAR&lt;/code&gt; って感じの型から 記事のリスト &lt;code&gt;[Post]&lt;/code&gt; を返す型クラスを定義しておく(正直あんまり意味はない)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToPosts&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  getPosts ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;順にインスタンスを定義していく．&lt;/p&gt;
&lt;h3 id=&#34;adventar&#34;&gt;ADVENTAR&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2017-12-02-re-adventar-slack-bot-part1.html&#34;&gt;ADVENTAR は昔集めた&lt;/a&gt;ので簡単だ．&lt;/p&gt;
&lt;h4 id=&#34;カレンダーの記事を集める&#34;&gt;カレンダーの記事を集める&lt;/h4&gt;
&lt;p&gt;まずは，カレンダーの URL を与えたら記事のリストを返す関数を書く．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text.IO&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TIO&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shelly&lt;/span&gt; (shelly, sleep)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.WebDriver&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;WDConfig&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.HTML.Scalpel.Core&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WDConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToPosts&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;  getPosts (&lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; url conf) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;    html &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fetchHtmlWith conf url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;    posts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fromMaybe [] &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;  TIO.putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;  shelly &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; sleep &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; data-line-number=&#34;15&#34;&gt;  return posts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;scrapeHtml ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; data-line-number=&#34;18&#34;&gt;scrapeHtml &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; flip scrapeStringLike&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; data-line-number=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; data-line-number=&#34;22&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fetchHtmlWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WDConfig&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; data-line-number=&#34;23&#34;&gt;fetchHtmlWith &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-24&#34; data-line-number=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-25&#34; data-line-number=&#34;25&#34;&gt;&lt;span class=&#34;ot&#34;&gt;postsScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-26&#34; data-line-number=&#34;26&#34;&gt;postsScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ADVENTAR のカレンダーのページは React 製(?)かなんからしく，静的な HTML からでは記事を参照することが出来ない そのために，Selenium などのヘッドレスブラウザを使ってアクセスする． &lt;code&gt;WDConfig&lt;/code&gt; は Haskell から Selenium などを操作するための Web Driver の設定値の型である．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shelly $ sleep 1&lt;/code&gt; はDOS攻撃にならないように，ここで処理を1秒止めるために書いている．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fetchHtmlWith&lt;/code&gt; と &lt;code&gt;postsScraper&lt;/code&gt; はこんな感じ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fetchHtmlWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WDConfig&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;fetchHtmlWith config url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; runSession config &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;  openPage (unpack url)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;  html &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getSource&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;  closeSession&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;  return html&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Default&lt;/span&gt; (def)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;postsScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;postsScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;  chroots (&lt;span class=&#34;st&#34;&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@:&lt;/span&gt; [hasClass &lt;span class=&#34;st&#34;&gt;&amp;quot;mod-entryList&amp;quot;&lt;/span&gt;] &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;) entryScraper&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;entryScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;entryScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title    &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; titleScraper&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;auther   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; autherScraper&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; data-line-number=&#34;11&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;url      &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; urlScraper&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; data-line-number=&#34;12&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date     &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; dateScraper&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; data-line-number=&#34;13&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;calendar &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; pure def&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; data-line-number=&#34;14&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;category &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; pure &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; data-line-number=&#34;15&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;autherScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; data-line-number=&#34;18&#34;&gt;autherScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; text &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;td&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@:&lt;/span&gt; [hasClass &lt;span class=&#34;st&#34;&gt;&amp;quot;mod-entryList-user&amp;quot;&lt;/span&gt;] &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;span&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;xxxScraper&lt;/code&gt; を全部書いてると長くなるので割愛(&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Adventar/Scraper.hs&#34;&gt;ココ&lt;/a&gt;に全部ある)．&lt;/p&gt;
&lt;h4 id=&#34;脱線-拡張可能レコードの-etc..&#34;&gt;脱線 : 拡張可能レコードの etc..&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-60--64--61--62-&#34;&gt;&lt;code&gt;(&amp;lt;@=&amp;gt;)&lt;/code&gt;&lt;/a&gt; 演算子は拡張可能レコードの値を設定する演算子 &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-64--61-&#34;&gt;&lt;code&gt;(@=)&lt;/code&gt;&lt;/a&gt; のモナディック版(正確には &lt;code&gt;Functor&lt;/code&gt;)というイメージだ． &lt;strong&gt;かなり&lt;/strong&gt; 直感的に型を書くと次のようになる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(@=) ::&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; v &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (k &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; v)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(&amp;lt;@=&amp;gt;) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f v &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (k &lt;span class=&#34;fu&#34;&gt;:&amp;gt;&lt;/span&gt; v)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコードはフィールド名とフィールドの値の型レベル辞書みたいなモノであり，&lt;code&gt;k :&amp;gt; v&lt;/code&gt; が辞書のイチ要素というイメージだ． &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:-60-:&#34;&gt;&lt;code&gt;(&amp;lt;:)&lt;/code&gt;&lt;/a&gt; で &lt;code&gt;[kv1, kv2, ... kvn]&lt;/code&gt; のような辞書を構築する(&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:nil&#34;&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/a&gt; が空リスト)．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:hsequence&#34;&gt;&lt;code&gt;hsequence&lt;/code&gt;&lt;/a&gt; 関数で &lt;code&gt;[f (k1 :&amp;gt; v1), ..., f (kn :&amp;gt; vn)] -&amp;gt; f [(k1 :&amp;gt; v1), ... (kn :&amp;gt; vn)]&lt;/code&gt; という型の変換をしているイメージだ(あくまでイメージね)．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;def&lt;/code&gt; は &lt;a href=&#34;https://hackage.haskell.org/package/data-default&#34;&gt;data-default&lt;/a&gt; パッケージの値で，&lt;a href=&#34;https://hackage.haskell.org/package/data-default-0.7.1.1/docs/Data-Default.html#t:Default&#34;&gt;&lt;code&gt;Default&lt;/code&gt;&lt;/a&gt; 型クラスのインスタンスにしないと使えない． 拡張可能レコードのインスタンス化の説明はめんどくさいので割愛する． &lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Default.hs&#34;&gt;ココ&lt;/a&gt;に書いてあるので参照してください．&lt;/p&gt;
&lt;h4 id=&#34;カレンダーを加える&#34;&gt;カレンダーを加える&lt;/h4&gt;
&lt;p&gt;このままだとカレンダーが &lt;code&gt;def&lt;/code&gt; のまま(URL もカレンダー名も &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;)なので，スクレイピングしたカレンダーの情報を加えよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; (set)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (strip)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;getPosts (&lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; url conf) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;  html &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fetchHtmlWith conf url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; data-line-number=&#34;7&#34;&gt;    posts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fromMaybe [] &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; data-line-number=&#34;8&#34;&gt;    calendar&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; data-line-number=&#34;9&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (scrapeHtml headerTitleScraper html)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; data-line-number=&#34;10&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;url   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; data-line-number=&#34;11&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; data-line-number=&#34;12&#34;&gt;  TIO.putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; data-line-number=&#34;13&#34;&gt;  shelly &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; sleep &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; data-line-number=&#34;14&#34;&gt;  return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fmap (set &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;calendar calendar) posts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; data-line-number=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; data-line-number=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;headerTitleScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; data-line-number=&#34;17&#34;&gt;headerTitleScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; strip &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; text (&lt;span class=&#34;st&#34;&gt;&amp;quot;head&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;strip&lt;/code&gt; は文字列の前後の空白などを排除してくれる．&lt;/p&gt;
&lt;h4 id=&#34;カレンダーを集める&#34;&gt;カレンダーを集める&lt;/h4&gt;
&lt;p&gt;カレンダーから記事を集めるだとまだ半分． カレンダー自体を集めないと全ての記事を確認できない．&lt;/p&gt;
&lt;p&gt;ADVENTAR の場合は，&lt;code&gt;&amp;quot;https://adventar.org/calendars?year=2017&lt;/code&gt; という URL で任意の年のカレンダーの一覧を取得できる． この URL からカレンダーの URL のリストを返す関数を定義する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getUrls ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;getUrls url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;  html &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fetchHtml url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;  return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromMaybe [] (scrapeHtml calendarUrlsScraper html)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fetchHtml ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-7&#34; data-line-number=&#34;7&#34;&gt;fetchHtml url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-8&#34; data-line-number=&#34;8&#34;&gt;  response &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; get &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; unpack url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-9&#34; data-line-number=&#34;9&#34;&gt;  return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (decodeConvertText &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UTF8&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; response &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; responseBody)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;calendarUrlsScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-12&#34; data-line-number=&#34;12&#34;&gt;calendarUrlsScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-13&#34; data-line-number=&#34;13&#34;&gt;  chroots (&lt;span class=&#34;st&#34;&gt;&amp;quot;div&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@:&lt;/span&gt; [hasClass &lt;span class=&#34;st&#34;&gt;&amp;quot;mod-calendarList&amp;quot;&lt;/span&gt;] &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;li&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-14&#34; data-line-number=&#34;14&#34;&gt;    url &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; attr &lt;span class=&#34;st&#34;&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-15&#34; data-line-number=&#34;15&#34;&gt;      (&lt;span class=&#34;st&#34;&gt;&amp;quot;div&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@:&lt;/span&gt; [hasClass &lt;span class=&#34;st&#34;&gt;&amp;quot;mod-calendarList-title&amp;quot;&lt;/span&gt;]) &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-16&#34; data-line-number=&#34;16&#34;&gt;    return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; append &lt;span class=&#34;st&#34;&gt;&amp;quot;http://adventar.org&amp;quot;&lt;/span&gt; url&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こっちは静的な HTML で動作するのでヘッドレスブラウザは使わない． ただ単に HTML の文字列さへ手に入ればいいので，扱うのが簡単な wreq を今回は使った． &lt;code&gt;get&lt;/code&gt; という関数に URL を適用するだけで，HTML (型は &lt;code&gt;ByteString&lt;/code&gt;) を返してくれる．&lt;/p&gt;
&lt;h5 id=&#34;vs.文字コード&#34;&gt;vs. 文字コード&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;ByteString&lt;/code&gt; から &lt;code&gt;Text&lt;/code&gt; への変換はかなりめんどくさい． というのも，文字コード回りで簡単に例外を投げるからだ．&lt;/p&gt;
&lt;p&gt;例えば，記事のリンク先が PDF のようなバイナリファイルだと UTF-8 の &lt;code&gt;Text&lt;/code&gt; に変換できなくて例外を投げてくる． もちろん，カレンダーの URL を集める場合は，そんな心配は無いんだけど，Qiita のところで困る…&lt;/p&gt;
&lt;h2 id=&#34;section-4&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちゃんとやるなら例外に合わせて処理を分けるべきだが，めんどくさいので例外を返す場合は &lt;code&gt;Nothing&lt;/code&gt; が返ってくる &lt;a href=&#34;https://hackage.haskell.org/package/text-conversions&#34;&gt;text-conversions&lt;/a&gt; パッケージを文字列変換に用いた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; decodeConvertText (&lt;span class=&#34;dt&#34;&gt;UTF8&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;))&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; decodeConvertText (&lt;span class=&#34;dt&#34;&gt;UTF8&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;\xc3\x28&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ByteString&lt;/span&gt;))&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;インスタンスの更新&#34;&gt;インスタンスの更新&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;getUrls&lt;/code&gt; を使ってインスタンスを書き換える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToPosts&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;  getPosts (&lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; url conf) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;    urls &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getUrls url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;    mconcat &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mapM (getPosts&amp;#39; conf) urls&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WDConfig&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;getPosts&amp;#39; conf url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getPosts&#39;&lt;/code&gt; は，もともとの &lt;code&gt;getPosts&lt;/code&gt; 関数と同じ実装である． 扱うのが楽になるように，スマートコンストラクタを定義しておく．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;adventar ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WDConfig&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;adventar year &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https://adventar.org/calendars?year=&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`mappend`&lt;/span&gt; year&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mkDriver ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WDConfig&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; data-line-number=&#34;6&#34;&gt;mkDriver host port &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; useBrowser chrome &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; data-line-number=&#34;7&#34;&gt;  defaultConfig { wdHost &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; T.unpack host, wdPort &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; port }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;haskell-の記事か否か&#34;&gt;Haskell の記事か否か&lt;/h4&gt;
&lt;p&gt;分類はカレンダーか記事のタイトルに「Haskell」という単語か含まれるか否かで判断する． 雑だけど，自然言語処理とか良く分からないので勘弁して．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;isHaskellPost ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;isHaskellPost post &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; any (&lt;span class=&#34;st&#34;&gt;&amp;quot;Haskell&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`isInfixOf`&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;  [ post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;  , post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;calendar &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数を使って &lt;code&gt;filter&lt;/code&gt; すれば良い．&lt;/p&gt;
&lt;h4 id=&#34;実行&#34;&gt;実行&lt;/h4&gt;
&lt;p&gt;Selenium を &lt;code&gt;localhost:4444&lt;/code&gt; として何らかの方法で起動しておく．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; fmap (filter isHaskellPost) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getPosts &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; adventar &lt;span class=&#34;st&#34;&gt;&amp;quot;2017&amp;quot;&lt;/span&gt; (mkDriver &lt;span class=&#34;st&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4444&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;get posts on http&lt;span class=&#34;fu&#34;&gt;://&lt;/span&gt;adventar&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;org&lt;span class=&#34;fu&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1111&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すっごい時間かかるよ(笑)&lt;/p&gt;
&lt;h3 id=&#34;qiita&#34;&gt;Qiita&lt;/h3&gt;
&lt;p&gt;やることは基本同じなのでサクッと．&lt;/p&gt;
&lt;h4 id=&#34;カレンダーの-url-を集める&#34;&gt;カレンダーの URL を集める&lt;/h4&gt;
&lt;p&gt;Qiita の場合，カレンダーの一覧は複数ページに分かれている(URL は &lt;code&gt;https://qiita.com/advent-calendar/2017/calendars?page=1&lt;/code&gt; って感じ)． 無限リストで試しにカレンダーの一覧を取得し，ひとつも取得できなければ止めるようにする．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getUrls ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;getUrls _ [] &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; pure []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;getUrls url (n&lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;ns) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;  result &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; func n&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; result &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;    [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; pure result&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;    _  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; mappend result &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getUrls url ns&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;    func index &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;      html &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fetchHtml &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; calendarsUrl url index&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;      shelly &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; sleep &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; data-line-number=&#34;12&#34;&gt;      return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fromMaybe [] (scrapeHtml calendarUrlsScraper html)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; data-line-number=&#34;13&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; data-line-number=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;calendarsUrl ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-15&#34; data-line-number=&#34;15&#34;&gt;calendarsUrl url index &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat [url, &lt;span class=&#34;st&#34;&gt;&amp;quot;?page=&amp;quot;&lt;/span&gt;, pack &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; show index]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-17&#34; data-line-number=&#34;17&#34;&gt;&lt;span class=&#34;ot&#34;&gt;calendarUrlsScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-18&#34; data-line-number=&#34;18&#34;&gt;calendarUrlsScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-19&#34; data-line-number=&#34;19&#34;&gt;  chroots (&lt;span class=&#34;st&#34;&gt;&amp;quot;table&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@:&lt;/span&gt; [hasClass &lt;span class=&#34;st&#34;&gt;&amp;quot;adventCalendarList&amp;quot;&lt;/span&gt;] &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;tbody&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-20&#34; data-line-number=&#34;20&#34;&gt;    url &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; attr &lt;span class=&#34;st&#34;&gt;&amp;quot;href&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-21&#34; data-line-number=&#34;21&#34;&gt;      (&lt;span class=&#34;st&#34;&gt;&amp;quot;td&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;@:&lt;/span&gt; [hasClass &lt;span class=&#34;st&#34;&gt;&amp;quot;adventCalendarList_calendarTitle&amp;quot;&lt;/span&gt;]) &lt;span class=&#34;fu&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-22&#34; data-line-number=&#34;22&#34;&gt;    return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; append &lt;span class=&#34;st&#34;&gt;&amp;quot;http://qiita.com&amp;quot;&lt;/span&gt; url&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんかもっといい方法ありそう．&lt;/p&gt;
&lt;h4 id=&#34;カレンダーを集める-1&#34;&gt;カレンダーを集める&lt;/h4&gt;
&lt;p&gt;インスタンスを定義しよう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToPosts&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;  getPosts (&lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt; url) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;    urls &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getUrls url [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;    mconcat &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mapM getPosts&amp;#39; urls&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;getPosts&amp;#39; url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; data-line-number=&#34;10&#34;&gt;  html &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fetchHtml url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; data-line-number=&#34;11&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; data-line-number=&#34;12&#34;&gt;    posts &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fromMaybe [] &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; scrapeHtml postsScraper html&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; data-line-number=&#34;13&#34;&gt;    calendar&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-14&#34; data-line-number=&#34;14&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; fromMaybe &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (scrapeHtml headerTitleScraper html)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-15&#34; data-line-number=&#34;15&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;url   &lt;span class=&#34;fu&#34;&gt;@=&lt;/span&gt; url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-16&#34; data-line-number=&#34;16&#34;&gt;       &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; emptyRecord&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-17&#34; data-line-number=&#34;17&#34;&gt;  TIO.putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-18&#34; data-line-number=&#34;18&#34;&gt;  shelly &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; sleep &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-19&#34; data-line-number=&#34;19&#34;&gt;  return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; fmap (set &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;calendar calendar) posts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-20&#34; data-line-number=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-21&#34; data-line-number=&#34;21&#34;&gt;&lt;span class=&#34;ot&#34;&gt;postsScraper ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scraper&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-22&#34; data-line-number=&#34;22&#34;&gt;postsScraper &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;長いのでスクレイパーは割愛(&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Qiita/Scraper.hs&#34;&gt;ココ&lt;/a&gt;にある)． &lt;code&gt;fetchHtml&lt;/code&gt; 関数は ADVENTAR のと同じ．&lt;/p&gt;
&lt;h4 id=&#34;記事のタイトルを取得&#34;&gt;記事のタイトルを取得&lt;/h4&gt;
&lt;p&gt;ADVENTAR と違い，Qiita のカレンダーには各記事のタイトルが書いてない． さすがに「なんか書く」で Haskell 記事か否かを判断するのもなぁと思い，どーーーー考えても時間がかかるけど，記事をひとつひとつスクレイピングしてタイトルを取ってくることにした．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;getPosts&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;getPosts&amp;#39; url &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;  TIO.putStrLn &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;get posts on &amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`mappend`&lt;/span&gt; url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; data-line-number=&#34;5&#34;&gt;  shelly &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; sleep &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; data-line-number=&#34;6&#34;&gt;  mapM updatePostTitle&amp;#39; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; set &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;calendar calendar &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; posts&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;updatePostTitle ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; data-line-number=&#34;9&#34;&gt;updatePostTitle post &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-10&#34; data-line-number=&#34;10&#34;&gt;html &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; fetchHtml&amp;#39; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-12&#34; data-line-number=&#34;12&#34;&gt;  title &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; fromMaybe (post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title) &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; scrapeHtml headerTitleScraper html&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-13&#34; data-line-number=&#34;13&#34;&gt;return &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; post &lt;span class=&#34;fu&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title &lt;span class=&#34;fu&#34;&gt;.~&lt;/span&gt; title&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;ot&#34;&gt;updatePostTitle&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-16&#34; data-line-number=&#34;16&#34;&gt;updatePostTitle&amp;#39; post &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; shelly (sleep &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; updatePostTitle post&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;updatePostTitle&#39;&lt;/code&gt; 関数で(1秒だけスリープしつつ)タイトルをスクレイピングして更新している．&lt;/p&gt;
&lt;h4 id=&#34;実行してみる&#34;&gt;実行してみる&lt;/h4&gt;
&lt;p&gt;スマートコンストラクタを作って．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;qiita ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;qiita year &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; mconcat [&lt;span class=&#34;st&#34;&gt;&amp;quot;https://qiita.com/advent-calendar/&amp;quot;&lt;/span&gt;, year, &lt;span class=&#34;st&#34;&gt;&amp;quot;/calendars&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実行してみる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; fmap (filter isHaskellPost) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; getPosts &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; qiita &lt;span class=&#34;st&#34;&gt;&amp;quot;2017&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;悲しいことに，鬼のように時間がかかるのに…メモリダンプします… まぁわかってたけどね！&lt;/p&gt;
&lt;h3 id=&#34;ストリーミング&#34;&gt;ストリーミング&lt;/h3&gt;
&lt;p&gt;こういうパフォーマンス的なことは自分は詳しくない． しかしこういうのはたぶん，要らないデータ(&lt;code&gt;filter&lt;/code&gt; して捨てるデータ)をいつ迄も保持してるのが悪いので(たぶん)，ストリーミングパッケージを使って効率よくリソース管理してもらおう．&lt;/p&gt;
&lt;p&gt;今回は Conduit を使う． 最初は Pipes を使ってみたけど，よくわからなくてやめた．&lt;/p&gt;
&lt;h2 id=&#34;section-5&#34;&gt;&lt;/h2&gt;
&lt;p&gt;まずはインターフェースの型クラスを書き換える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Conduit&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Source&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToPosts&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb19-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  getPosts ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Source&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはそれぞれのインスタンスを書き換えるだけ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToPosts&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-2&#34; data-line-number=&#34;2&#34;&gt;  getPosts (&lt;span class=&#34;dt&#34;&gt;Adventar&lt;/span&gt; url conf) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-3&#34; data-line-number=&#34;3&#34;&gt;    urls &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; getUrls url&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb20-4&#34; data-line-number=&#34;4&#34;&gt;    yieldMany urls &lt;span class=&#34;fu&#34;&gt;=$=&lt;/span&gt; concatMapMC (getPosts&amp;#39; conf)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToPosts&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-2&#34; data-line-number=&#34;2&#34;&gt;  getPosts (&lt;span class=&#34;dt&#34;&gt;Qiita&lt;/span&gt; url) &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-3&#34; data-line-number=&#34;3&#34;&gt;    urls &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; getUrls url [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb21-4&#34; data-line-number=&#34;4&#34;&gt;    yieldMany urls &lt;span class=&#34;fu&#34;&gt;=$=&lt;/span&gt; concatMapMC getPosts&amp;#39;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使うときは以下のようにすればよい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; stack ghci&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;fu&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Conduit&lt;/span&gt; (($$), (=$=), sinkList)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb22-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; getPosts (qiita &lt;span class=&#34;st&#34;&gt;&amp;quot;2017&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;$=&lt;/span&gt; filterC isHaskellPost &lt;span class=&#34;fu&#34;&gt;$$&lt;/span&gt; sinkList&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;json-に書き出す&#34;&gt;JSON に書き出す&lt;/h3&gt;
&lt;p&gt;前にやったものをそのままコピペした．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Aeson.Encode.Pretty&lt;/span&gt; (encodePrettyToTextBuilder)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;, unpack)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text.Lazy.Builder&lt;/span&gt; (toLazyText)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text.Lazy.IO&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LT&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;writeJson ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ToJSON&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-7&#34; data-line-number=&#34;7&#34;&gt;writeJson jsonPath &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb23-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;LT&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;writeFile (unpack jsonPath) &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; toLazyText &lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt; encodePrettyToTextBuilder&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;拡張可能レコードの &lt;code&gt;ToJSON&lt;/code&gt; のインスタンス化の部分は割愛(&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Aeson.hs&#34;&gt;ココ&lt;/a&gt;にある)．&lt;/p&gt;
&lt;h3 id=&#34;コマンド化&#34;&gt;コマンド化&lt;/h3&gt;
&lt;p&gt;CLI のオプション(引数)のパースには optparse-applicative パッケージを使う． スクレイピングには，次のようなオプションの型を考える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fetch&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchOptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-5&#34; data-line-number=&#34;5&#34;&gt;   &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;year&amp;quot; &amp;gt;: Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-6&#34; data-line-number=&#34;6&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;qiita&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-7&#34; data-line-number=&#34;7&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;adventar&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-8&#34; data-line-number=&#34;8&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;wdHost&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-9&#34; data-line-number=&#34;9&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;wdPort&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-10&#34; data-line-number=&#34;10&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb24-11&#34; data-line-number=&#34;11&#34;&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;year&lt;/code&gt; はスクレイピングして欲しい年． &lt;code&gt;qiita&lt;/code&gt; や &lt;code&gt;adventar&lt;/code&gt; は &lt;code&gt;--qiita&lt;/code&gt; って感じのフラグで，フラグが真のものだけ集めてくる(両方偽の場合は，両方真と同じく両方集める)． &lt;code&gt;wdHost&lt;/code&gt; と &lt;code&gt;wdPort&lt;/code&gt; はヘッドレスブラウザへのオプションで，指定が無ければ &lt;code&gt;localhost:4444&lt;/code&gt; をデフォルト値にする． &lt;code&gt;output&lt;/code&gt; は &lt;code&gt;-o hoge.json&lt;/code&gt; みたいに出力先のファイルを指定する．&lt;/p&gt;
&lt;h2 id=&#34;section-6&#34;&gt;&lt;/h2&gt;
&lt;p&gt;例の如く，拡張可能レコードなので，&lt;code&gt;(&amp;lt;@=&amp;gt;)&lt;/code&gt; 演算子を使ってパーサーを組み立てていく．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cmdParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-2&#34; data-line-number=&#34;2&#34;&gt;cmdParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subparser &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-3&#34; data-line-number=&#34;3&#34;&gt;     command &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-4&#34; data-line-number=&#34;4&#34;&gt;       (&lt;span class=&#34;dt&#34;&gt;Fetch&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; fetchOptsParser &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch posts on advent calendar to json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;( fetch )&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;choice subcommand&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;ot&#34;&gt;fetchOptsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-9&#34; data-line-number=&#34;9&#34;&gt;fetchOptsParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-10&#34; data-line-number=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;year     &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; yearParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-11&#34; data-line-number=&#34;11&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;qiita    &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; qiitaFlagParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-12&#34; data-line-number=&#34;12&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;adventar &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; adventarFlagParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-13&#34; data-line-number=&#34;13&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;wdHost   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; wdHostParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-14&#34; data-line-number=&#34;14&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;wdPort   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; wdPortParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-15&#34; data-line-number=&#34;15&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;output   &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; outputParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb25-16&#34; data-line-number=&#34;16&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;細かいやつは割愛(&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Options.hs&#34;&gt;ココ&lt;/a&gt;を見て)．&lt;/p&gt;
&lt;h2 id=&#34;section-7&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;main&lt;/code&gt; 関数も長いので割愛(&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Main.hs&#34;&gt;ココ&lt;/a&gt;を見て)．&lt;/p&gt;
&lt;p&gt;こんな感じに実行する．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack exec -- advent-calendar fetch 2017 --qiita -o &amp;quot;&amp;quot;./out/qiita.json&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;スクレイピングの結果は GitHub の&lt;a href=&#34;https://github.com/matsubara0507/haskell-advent-calendar/tree/f6d6a097c08e741239f576693e3d6b2b7ae21a29/out/2017&#34;&gt;ココ&lt;/a&gt;に置いてある．&lt;/p&gt;
&lt;h3 id=&#34;マークダウンに変換&#34;&gt;マークダウンに変換&lt;/h3&gt;
&lt;p&gt;最後にマークダウンへ変換する部分を書く． 次のようなサブコマンドを追加する想定だ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack exec -- advent-calendar markdown &amp;quot;./out/qiita.json&amp;quot; &amp;quot;./out/adventar.json&amp;quot; -o &amp;quot;./out/posts.md&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そのために次のような型とパーサーを定義した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fetch&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FetchOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Markdown&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MarkdownOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MarkdownOptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-6&#34; data-line-number=&#34;6&#34;&gt;   &lt;span class=&#34;ch&#34;&gt;&amp;#39;[ &amp;quot;inputs&amp;quot; &amp;gt;: [Text]&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-7&#34; data-line-number=&#34;7&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-8&#34; data-line-number=&#34;8&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot;noCategory&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-9&#34; data-line-number=&#34;9&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-11&#34; data-line-number=&#34;11&#34;&gt;&lt;span class=&#34;ot&#34;&gt;cmdParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-12&#34; data-line-number=&#34;12&#34;&gt;cmdParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subparser &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-13&#34; data-line-number=&#34;13&#34;&gt;     command &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-14&#34; data-line-number=&#34;14&#34;&gt;       (&lt;span class=&#34;dt&#34;&gt;Fetch&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; fetchOptsParser &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch posts on advent calendar to json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-15&#34; data-line-number=&#34;15&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; command &lt;span class=&#34;st&#34;&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-16&#34; data-line-number=&#34;16&#34;&gt;       (&lt;span class=&#34;dt&#34;&gt;Markdown&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; mdOptsParser &lt;span class=&#34;ot&#34;&gt;`withInfo`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;convert markdown from posts json file.&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-17&#34; data-line-number=&#34;17&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;( fetch | markdown )&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-18&#34; data-line-number=&#34;18&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;choice subcommand&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-20&#34; data-line-number=&#34;20&#34;&gt;&lt;span class=&#34;ot&#34;&gt;mdOptsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MarkdownOptions&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-21&#34; data-line-number=&#34;21&#34;&gt;mdOptsParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; hsequence&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-22&#34; data-line-number=&#34;22&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;inputs     &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; inputsParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-23&#34; data-line-number=&#34;23&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;output     &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; outputParser&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-24&#34; data-line-number=&#34;24&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;noCategory &lt;span class=&#34;fu&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; noCategoryParser&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-25&#34; data-line-number=&#34;25&#34;&gt;   &lt;span class=&#34;fu&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-26&#34; data-line-number=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-27&#34; data-line-number=&#34;27&#34;&gt;&lt;span class=&#34;ot&#34;&gt;inputsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-28&#34; data-line-number=&#34;28&#34;&gt;inputsParser &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; some &lt;span class=&#34;fu&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb28-29&#34; data-line-number=&#34;29&#34;&gt;  textArgument (metavar &lt;span class=&#34;st&#34;&gt;&amp;quot;inputs&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; help &lt;span class=&#34;st&#34;&gt;&amp;quot;Input json file paths&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;some&lt;/code&gt; を使うことで，ひとつ以上の入力ファイルのパスを与える部分(&lt;code&gt;markdown &amp;quot;./out/qiita.json&amp;quot; &amp;quot;./out/adventar.json&amp;quot;&lt;/code&gt;)のパーサーを簡単に書ける．&lt;/p&gt;
&lt;h2 id=&#34;section-8&#34;&gt;&lt;/h2&gt;
&lt;p&gt;マークダウンへの変換部分はこんな感じ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;toMarkdown ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-2&#34; data-line-number=&#34;2&#34;&gt;toMarkdown post &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; mconcat &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-3&#34; data-line-number=&#34;3&#34;&gt;  [ [ &lt;span class=&#34;st&#34;&gt;&amp;quot;**[&amp;quot;&lt;/span&gt;, post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title, &lt;span class=&#34;st&#34;&gt;&amp;quot;](&amp;quot;&lt;/span&gt;, post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;url, &lt;span class=&#34;st&#34;&gt;&amp;quot;)**  &amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-4&#34; data-line-number=&#34;4&#34;&gt;  , [ &lt;span class=&#34;st&#34;&gt;&amp;quot; by &amp;quot;&lt;/span&gt;, post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;auther&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-5&#34; data-line-number=&#34;5&#34;&gt;    , &lt;span class=&#34;st&#34;&gt;&amp;quot; on [&amp;quot;&lt;/span&gt;, post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;calendar &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;title, &lt;span class=&#34;st&#34;&gt;&amp;quot;](&amp;quot;&lt;/span&gt;, post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;calendar &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;url, &lt;span class=&#34;st&#34;&gt;&amp;quot;) &amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-6&#34; data-line-number=&#34;6&#34;&gt;    , post &lt;span class=&#34;fu&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;#&lt;/span&gt;date&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-7&#34; data-line-number=&#34;7&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb29-8&#34; data-line-number=&#34;8&#34;&gt;  ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この関数の結果 &lt;code&gt;[Text]&lt;/code&gt; を &lt;code&gt;unlines&lt;/code&gt; してファイルに書き出せばよい． ちなみに，Haskell-jp のブログは，末尾に空白2つで改行となり，空行で HTML にも空行が入るようになっている．&lt;/p&gt;
&lt;h4 id=&#34;出力結果&#34;&gt;出力結果&lt;/h4&gt;
&lt;p&gt;は &lt;a href=&#34;https://github.com/haskell-jp/blog/blob/02a2b1c68cd75a15d72eedd3148fc803c103a0b7/preprocessed-site/posts/2017/advent-calendar-2017.md#%E3%83%9D%E3%82%A8%E3%83%A0&#34;&gt;Haskell-jp ブログのソースコード&lt;/a&gt;(もちろん前半部分は手書き)を見ればいいと思うよ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;結局，&lt;strong&gt;全ての記事を集めてくるのに半日近くかかった(笑)&lt;/strong&gt; 来年は投票機能とか，少しずつ集めたりとかできるといいよね．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html</id><title type="text">Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)</title><updated>2017-12-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2017-12-22&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 22, 2017
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/electron&#34;&gt;Electron Advent Calendar 2017&lt;/a&gt; の22日目の記事です．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/elm2&#34;&gt;Elm2 アドカレ&lt;/a&gt;で 「Elm でマークダウンプレゼンテーションエディタを作るハナシ」を書いたのですが，長くなったので分けました． 前半は&lt;a href=&#34;/posts/2017-12-18-create-elmdeck-part1.html&#34;&gt;コチラ&lt;/a&gt;(前半は Electron 関係ないけどね)．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;今回はローカルファイルの読み書きをするために Electron を導入します(Elm もといブラウザでいい感じにする方法が分からなかった)． 今回のコードは以下のリポジトリにあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/elmdeck/tree/electron&#34;&gt;matsubara0507/elmdeck - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;elm-と-electron&#34;&gt;Elm と Electron&lt;/h2&gt;
&lt;p&gt;結構いろんな人が挑戦してて，資料は豊富にある． ぼくは以下のリポジトリを参考にした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yasuyuky/elmtrn&#34;&gt;yasuyuky/elmtrn - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;アナログ時計を表示する Electron プログラムだったはず．&lt;/p&gt;
&lt;h2 id=&#34;つくる&#34;&gt;つくる&lt;/h2&gt;
&lt;p&gt;少しずつ拡張していく．&lt;/p&gt;
&lt;h3 id=&#34;electron-化&#34;&gt;Electron 化&lt;/h3&gt;
&lt;p&gt;まずは Electron 化する． &lt;a href=&#34;https://github.com/matsubara0507/elmdeck/tree/6ff0520f65080c9a94ac85c99fc01e0374ca250e&#34;&gt;もともと&lt;/a&gt;は次のような構成だった(&lt;code&gt;main.js&lt;/code&gt; は Elm ファイル群から生成)．&lt;/p&gt;
&lt;pre class=&#34;txt&#34;&gt;&lt;code&gt;/
 |-- elm-package.json
 |-- index.html
 |-- src/
 |    |-- Main.elm
 |    \-- ..
 \-- js/
      |-- main.js
      \-- highlight.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これ，elmtrn を参考に次のような構成に変更した．&lt;/p&gt;
&lt;pre class=&#34;txt&#34;&gt;&lt;code&gt;/
 |-- elm-package.json
 |-- gulpfile.js
 |-- package.json
 \-- app
      |-- index.html
      |-- src/
      |    |-- Main.elm
      |    \-- ..
      \-- js/
           |-- app.js
           |-- main.js
           \-- ..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/elmdeck/blob/97607bc1c2f069101d7d6012dcd46470d3a2d3fe/package.json&#34;&gt;package.json&lt;/a&gt; は elmtrn をほぼそのまんま(&lt;code&gt;main&lt;/code&gt; の場所だけ違う)． gulp を使って，Elm のコードを監視・コンパイルし，生成した JS コードを Electron から呼び出す． elmtrn の gulpfile.js の設定では，各 Elm ファイルに対しひとつの JS ファイルを生成していたが，自分はひとまとめにした JS を生成したかったので，次のように gulpfile.js を書き換えた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; g &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; electron &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;electron-connect&amp;#39;&lt;/span&gt;).&lt;span class=&#34;va&#34;&gt;server&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;create&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; packager &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;electron-packager&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; $ &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;gulp-load-plugins&amp;#39;&lt;/span&gt;)()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; packageJson &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;./package.json&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; extend &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;util&amp;#39;&lt;/span&gt;).&lt;span class=&#34;at&#34;&gt;_extend&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;watch&lt;/span&gt;([&lt;span class=&#34;st&#34;&gt;&amp;#39;app/src/**/*.elm&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;[&lt;span class=&#34;st&#34;&gt;&amp;#39;elm&amp;#39;&lt;/span&gt;])&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;va&#34;&gt;electron&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;start&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;  &lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;watch&lt;/span&gt;([&lt;span class=&#34;st&#34;&gt;&amp;#39;app/js/*.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;app/index.html&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;electron&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;restart&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;  &lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;watch&lt;/span&gt;([]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;electron&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;reload&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;elm&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;=&amp;gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; data-line-number=&#34;16&#34;&gt;  &lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;src&lt;/span&gt;([&lt;span class=&#34;st&#34;&gt;&amp;#39;app/src/**/*.elm&amp;#39;&lt;/span&gt;])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-17&#34; data-line-number=&#34;17&#34;&gt;    .&lt;span class=&#34;at&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;$&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;logger&lt;/span&gt;())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-18&#34; data-line-number=&#34;18&#34;&gt;    .&lt;span class=&#34;at&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;$&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;plumber&lt;/span&gt;())&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-19&#34; data-line-number=&#34;19&#34;&gt;    .&lt;span class=&#34;at&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;$&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;elm&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;bundle&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; debug&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-20&#34; data-line-number=&#34;20&#34;&gt;    .&lt;span class=&#34;at&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;dest&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;app/js&amp;quot;&lt;/span&gt;))&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-21&#34; data-line-number=&#34;21&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-22&#34; data-line-number=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;va&#34;&gt;g&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;])&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/philopon/gulp-elm&#34;&gt;philopon/gulp-elm の README&lt;/a&gt; が参考になった．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;あとは，次のように elmtrn の app.js を適当に書き直した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;app&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; BrowserWindow&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; mainWindow &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;window-all-closed&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;quit&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; data-line-number=&#34;8&#34;&gt;&lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;ready&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; data-line-number=&#34;9&#34;&gt;  mainWindow &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;BrowserWindow&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; data-line-number=&#34;10&#34;&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;frame&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;always-on-top&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;resizable&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; data-line-number=&#34;14&#34;&gt;  &lt;span class=&#34;va&#34;&gt;mainWindow&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;maximize&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-15&#34; data-line-number=&#34;15&#34;&gt;  &lt;span class=&#34;va&#34;&gt;mainWindow&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;loadURL&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;file://&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; __dirname &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;/../index.html&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-16&#34; data-line-number=&#34;16&#34;&gt;  &lt;span class=&#34;va&#34;&gt;mainWindow&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-17&#34; data-line-number=&#34;17&#34;&gt;    mainWindow &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-18&#34; data-line-number=&#34;18&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-19&#34; data-line-number=&#34;19&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;gulp&lt;/code&gt; を実行すればブラウザ版 elmdeck がそのまんま electron で実行できる． やったぁ．&lt;/p&gt;
&lt;h3 id=&#34;ファイルの読み込み&#34;&gt;ファイルの読み込み&lt;/h3&gt;
&lt;p&gt;ココからが本番．&lt;/p&gt;
&lt;p&gt;設計として，デスクトップでよくある感じに，左上の &lt;code&gt;File&lt;/code&gt; から &lt;code&gt;Open&lt;/code&gt; とかしたい． こんな感じ(これは Atom だけど)．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-elmdeck/atom-file-open.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Electron でファイルの呼び出しをする方法は以下の記事を参考にした．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/_takwat/items/6544342fd4141345bb19&#34;&gt;Electronでファイルやフォルダの選択 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Node の fs ライブラリを使えばよいようだ(Electron に限らないハナシかな)． &lt;a href=&#34;https://nodejs.org/api/fs.html&#34;&gt;fs の公式ドキュメント&lt;/a&gt;とにらめっこして &lt;a href=&#34;https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback&#34;&gt;&lt;code&gt;fs.readFile&lt;/code&gt;&lt;/a&gt; を呼び出せば良いみたいなのは分かった． 取りあえず，次のような &lt;code&gt;files.js&lt;/code&gt; ファイルを書いた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;remote&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;dialog&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; BrowserWindow&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; remote&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; fs &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;va&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;readFile&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; (app) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;va&#34;&gt;dialog&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;showOpenDialog&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; data-line-number=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;defaultPath&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; data-line-number=&#34;13&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; data-line-number=&#34;14&#34;&gt;            &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;マークダウン&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; data-line-number=&#34;15&#34;&gt;        ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; data-line-number=&#34;16&#34;&gt;    &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt; (fileNames) &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; data-line-number=&#34;17&#34;&gt;        &lt;span class=&#34;va&#34;&gt;fs&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readFile&lt;/span&gt;(fileNames[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (err&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; data) &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; data-line-number=&#34;18&#34;&gt;          &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(err)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; data-line-number=&#34;19&#34;&gt;          &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(data)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; data-line-number=&#34;20&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; data-line-number=&#34;21&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; data-line-number=&#34;22&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; data-line-number=&#34;23&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次にこれをメニューバーから呼べるようにする． Electron のメニューバーを拡張するには &lt;a href=&#34;https://electronjs.org/docs/api/menu&#34;&gt;&lt;code&gt;Menu&lt;/code&gt; クラス&lt;/a&gt;を使えば良いらしい． サンプルやらを参考にしながらイロイロ試行錯誤してみた結果，次のような &lt;code&gt;menuItems.js&lt;/code&gt; ファイルを書き，&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;app&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; Menu&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; dialog&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; template &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Edit&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;submenu&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;undo&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;redo&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;cut&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;copy&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;paste&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;pasteandmatchstyle&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;delete&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; data-line-number=&#34;15&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;selectall&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; data-line-number=&#34;16&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-17&#34; data-line-number=&#34;17&#34;&gt;  &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-18&#34; data-line-number=&#34;18&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-19&#34; data-line-number=&#34;19&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;View&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-20&#34; data-line-number=&#34;20&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;submenu&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-21&#34; data-line-number=&#34;21&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;reload&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-22&#34; data-line-number=&#34;22&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;forcereload&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-23&#34; data-line-number=&#34;23&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;toggledevtools&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-24&#34; data-line-number=&#34;24&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-25&#34; data-line-number=&#34;25&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;resetzoom&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-26&#34; data-line-number=&#34;26&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;zoomin&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-27&#34; data-line-number=&#34;27&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;zoomout&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-28&#34; data-line-number=&#34;28&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;separator&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-29&#34; data-line-number=&#34;29&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;togglefullscreen&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-30&#34; data-line-number=&#34;30&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;toggledevtools&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-31&#34; data-line-number=&#34;31&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-32&#34; data-line-number=&#34;32&#34;&gt;  &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-33&#34; data-line-number=&#34;33&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-34&#34; data-line-number=&#34;34&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-35&#34; data-line-number=&#34;35&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;submenu&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-36&#34; data-line-number=&#34;36&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;minimize&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-37&#34; data-line-number=&#34;37&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-38&#34; data-line-number=&#34;38&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-39&#34; data-line-number=&#34;39&#34;&gt;  &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-40&#34; data-line-number=&#34;40&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-41&#34; data-line-number=&#34;41&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-42&#34; data-line-number=&#34;42&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;submenu&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-43&#34; data-line-number=&#34;43&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-44&#34; data-line-number=&#34;44&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Learn More&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-45&#34; data-line-number=&#34;45&#34;&gt;        &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;).&lt;span class=&#34;va&#34;&gt;shell&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;openExternal&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;https://electron.atom.io&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-46&#34; data-line-number=&#34;46&#34;&gt;      &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-47&#34; data-line-number=&#34;47&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-48&#34; data-line-number=&#34;48&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-49&#34; data-line-number=&#34;49&#34;&gt;]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-50&#34; data-line-number=&#34;50&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-51&#34; data-line-number=&#34;51&#34;&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; items &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;template&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;map&lt;/span&gt;( option &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;MenuItem&lt;/span&gt;(option) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-52&#34; data-line-number=&#34;52&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-53&#34; data-line-number=&#34;53&#34;&gt;&lt;span class=&#34;va&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-54&#34; data-line-number=&#34;54&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; items&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-55&#34; data-line-number=&#34;55&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これ(module exports した &lt;code&gt;get&lt;/code&gt; 関数のコト)を &lt;code&gt;index.html&lt;/code&gt; で次のように呼び出した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode html&#34;&gt;&lt;code class=&#34;sourceCode html&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;remote&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;Menu&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; MenuItem&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; remote&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; files &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;./js/files&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; menuItems &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;./js/menuItems&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; node &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;va&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;firstChild&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;va&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;removeChild&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;firstChild&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-11&#34; data-line-number=&#34;11&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; app &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;exports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;Main&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;embed&lt;/span&gt;(node)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; menuvar &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;Menu&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-14&#34; data-line-number=&#34;14&#34;&gt;  &lt;span class=&#34;va&#34;&gt;menuvar&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;append&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-15&#34; data-line-number=&#34;15&#34;&gt;    &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-16&#34; data-line-number=&#34;16&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-17&#34; data-line-number=&#34;17&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;submenu&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-18&#34; data-line-number=&#34;18&#34;&gt;        &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-19&#34; data-line-number=&#34;19&#34;&gt;          &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-20&#34; data-line-number=&#34;20&#34;&gt;          &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readFile&lt;/span&gt;(app) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-21&#34; data-line-number=&#34;21&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-22&#34; data-line-number=&#34;22&#34;&gt;      ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-23&#34; data-line-number=&#34;23&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-24&#34; data-line-number=&#34;24&#34;&gt;  ))&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-25&#34; data-line-number=&#34;25&#34;&gt;  &lt;span class=&#34;va&#34;&gt;menuItems&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;get&lt;/span&gt;().&lt;span class=&#34;at&#34;&gt;forEach&lt;/span&gt;( item &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;menuvar&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;append&lt;/span&gt;(item) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-26&#34; data-line-number=&#34;26&#34;&gt;  &lt;span class=&#34;va&#34;&gt;Menu&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;setApplicationMenu&lt;/span&gt;(menuvar)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-27&#34; data-line-number=&#34;27&#34;&gt;&lt;span class=&#34;kw&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;var menuvar = new Menu();&lt;/code&gt; 以下からがキモです． どーしても，動的に処理を定義しない部分(&lt;code&gt;Edit&lt;/code&gt; とか &lt;code&gt;View&lt;/code&gt; とか)を別ファイル(&lt;code&gt;menuItems.js&lt;/code&gt;)にまとめたうえで，&lt;code&gt;File&lt;/code&gt; を先頭に突っ込みたかったのでこうなった． JS は全然詳しくないのでアンチパターンかもしれないけどね．&lt;/p&gt;
&lt;h4 id=&#34;elm-に繋げる&#34;&gt;Elm に繋げる&lt;/h4&gt;
&lt;p&gt;ここまでで&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;上部にあるメニューバーの &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Open&lt;/code&gt; を押して&lt;/li&gt;
&lt;li&gt;ファイルをダイアログで選択し&lt;/li&gt;
&lt;li&gt;コンソールに内容を吐き出す&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;までは書けた． ここからは (3) が「Elm に渡して input エリアに書き出す」になるようにする．&lt;/p&gt;
&lt;p&gt;Elm と JS を繋ぐには方法がいくつかあるが，今回は &lt;code&gt;Port&lt;/code&gt; を使ってみる(前回はお行儀の悪い &lt;code&gt;Native&lt;/code&gt; モジュールを使ったけど)． 次の記事が本当に参考になった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/jooex/items/5ff2d3b86563cf5dbd84&#34;&gt;ElmのPortでJSを使う。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マークダウンファイルの中身を JS から Elm に投げるので Elm で次のような &lt;code&gt;ports&lt;/code&gt; 関数を定義した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- src/Port/FS.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; data-line-number=&#34;2&#34;&gt;port &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Port.FS&lt;/span&gt; exposing (&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; data-line-number=&#34;4&#34;&gt;port readFile &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;Main.elm&lt;/code&gt; で次のように呼び出す．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;  { textarea &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;  , window &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TextAreaInput&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Never&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;main &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;  Html.program&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; data-line-number=&#34;13&#34;&gt;    { init &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; init model&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; data-line-number=&#34;14&#34;&gt;    , view &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; data-line-number=&#34;15&#34;&gt;    , update &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; data-line-number=&#34;16&#34;&gt;    , subscriptions &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; data-line-number=&#34;17&#34;&gt;    }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; data-line-number=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-19&#34; data-line-number=&#34;19&#34;&gt;subscriptions &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-20&#34; data-line-number=&#34;20&#34;&gt;subscriptions model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-21&#34; data-line-number=&#34;21&#34;&gt;  Sub.batch&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-22&#34; data-line-number=&#34;22&#34;&gt;    [ Window.resizes &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-23&#34; data-line-number=&#34;23&#34;&gt;    , FS.readFile &lt;span class=&#34;dt&#34;&gt;TextAreaInput&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-24&#34; data-line-number=&#34;24&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-25&#34; data-line-number=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-26&#34; data-line-number=&#34;26&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-27&#34; data-line-number=&#34;27&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-28&#34; data-line-number=&#34;28&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-29&#34; data-line-number=&#34;29&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;TextAreaInput&lt;/span&gt; str &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-30&#34; data-line-number=&#34;30&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; textarea &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-31&#34; data-line-number=&#34;31&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt; size &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-32&#34; data-line-number=&#34;32&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; window &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; size }, Cmd.none )        &lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Window.Size&lt;/code&gt; とか &lt;code&gt;SizeUpdated&lt;/code&gt; はブラウザやアプリのウィンドウサイズに合わせて，スライドのサイズを変更するためのサブスクリプションなので気にしないで． &lt;code&gt;TextAreaInput&lt;/code&gt; は input エリアにテキストを書き込んだ時にも使っている． 同じ型なので使いまわした．&lt;/p&gt;
&lt;p&gt;あとは &lt;code&gt;files.js&lt;/code&gt; の &lt;code&gt;console.log(data);&lt;/code&gt; としていた部分を &lt;code&gt;app.ports.readFile.send(data);&lt;/code&gt; と&lt;a href=&#34;https://github.com/matsubara0507/elmdeck/blob/a102ae0d82b162a3f219b7d33f9875c080ff6be9/app/js/files.js#L19&#34;&gt;書き換える&lt;/a&gt;だけ．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-elmdeck/openfile.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;うまくいった．&lt;/p&gt;
&lt;h3 id=&#34;ファイルの書き込み&#34;&gt;ファイルの書き込み&lt;/h3&gt;
&lt;p&gt;さて次はファイルの保存を実装する．&lt;/p&gt;
&lt;h4 id=&#34;ファイルパスも投げておく&#34;&gt;ファイルパスも投げておく&lt;/h4&gt;
&lt;p&gt;ファイルを保存するには開いてるファイルのファイルパスがあった方が良いだろう(上書き保存とかするなら)． なのでまずは，読み込み時の処理をファイルパスも投げるように書き換える．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- src/Port/FS.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;port &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Port.FS&lt;/span&gt; exposing (&lt;span class=&#34;fu&#34;&gt;..&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;  { path &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;  , body &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; data-line-number=&#34;9&#34;&gt;port readFile &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; alias &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;  { textarea &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-3&#34; data-line-number=&#34;3&#34;&gt;  , window &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-4&#34; data-line-number=&#34;4&#34;&gt;  , filepath &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-5&#34; data-line-number=&#34;5&#34;&gt;  }&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-6&#34; data-line-number=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-7&#34; data-line-number=&#34;7&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-8&#34; data-line-number=&#34;8&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TextAreaInput&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReadFile&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FS.File&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-12&#34; data-line-number=&#34;12&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-13&#34; data-line-number=&#34;13&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-14&#34; data-line-number=&#34;14&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-15&#34; data-line-number=&#34;15&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;TextAreaInput&lt;/span&gt; str &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-16&#34; data-line-number=&#34;16&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; textarea &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-17&#34; data-line-number=&#34;17&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt; size &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-18&#34; data-line-number=&#34;18&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; window &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; size }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-19&#34; data-line-number=&#34;19&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;ReadFile&lt;/span&gt; file &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-20&#34; data-line-number=&#34;20&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; textarea &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; file&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;body, filepath &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; file&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;path }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-21&#34; data-line-number=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-22&#34; data-line-number=&#34;22&#34;&gt;subscriptions &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-23&#34; data-line-number=&#34;23&#34;&gt;subscriptions model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-24&#34; data-line-number=&#34;24&#34;&gt;  Sub.batch&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-25&#34; data-line-number=&#34;25&#34;&gt;    [ Window.resizes &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-26&#34; data-line-number=&#34;26&#34;&gt;    , FS.readFile &lt;span class=&#34;dt&#34;&gt;ReadFile&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-27&#34; data-line-number=&#34;27&#34;&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;レコード型を JS から Elm に投げるには普通のオブジェクトを使えばよいらしい(最初はタプルを使おうとして良くわからなくなり諦めた…)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// js/files.js&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;va&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;readFile&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; (app) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;va&#34;&gt;dialog&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;showOpenDialog&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; data-line-number=&#34;6&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; data-line-number=&#34;7&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;defaultPath&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; data-line-number=&#34;8&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; data-line-number=&#34;9&#34;&gt;            &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;マークダウン&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; data-line-number=&#34;10&#34;&gt;        ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt; (fileNames) &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;va&#34;&gt;fs&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readFile&lt;/span&gt;(fileNames[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (err&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; data) &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; data-line-number=&#34;13&#34;&gt;          &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(err)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; data-line-number=&#34;14&#34;&gt;          &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;readFile&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; fileNames[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; data &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-15&#34; data-line-number=&#34;15&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-16&#34; data-line-number=&#34;16&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-17&#34; data-line-number=&#34;17&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;いよいよ書き出し&#34;&gt;いよいよ書き出し&lt;/h4&gt;
&lt;p&gt;保存するとき，データは Elm 側から投げられるが保存ボタンは Electron 側(JS側)から始めたい． なので&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;保存ボタンを押したら何らかの値を JS から Elm に送信&lt;/li&gt;
&lt;li&gt;それを受けたら Elm から JS にマークダウンのデータを送信&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;というお手製同期通信を行うことにした(これもアンチパターンかも…)． 上書き保存のときは &lt;code&gt;null&lt;/code&gt; (Elm 側では &lt;code&gt;Nothing&lt;/code&gt;) を JS から送り，新規保存ならファイル名を送ることにする．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;まずは Elm 側で，以上の戦略から次のような &lt;code&gt;port&lt;/code&gt; を書いた．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;port writeFileHook &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; msg) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;port writeFile &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; msg&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は JS 側に移る． ファイルの書き出しには &lt;a href=&#34;https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback&#34;&gt;&lt;code&gt;fs.writeFile&lt;/code&gt;&lt;/a&gt; 関数を用いた． 前述した &lt;code&gt;port&lt;/code&gt; も使って，次のような関数を &lt;code&gt;files.js&lt;/code&gt; に追加した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;writeFileTo&lt;/span&gt;(fileName&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; data) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (fileName) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;va&#34;&gt;fs&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;writeFile&lt;/span&gt;(fileName&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (err) &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;      &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (err) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;        &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(err)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;        &lt;span class=&#34;va&#34;&gt;dialog&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;showErrorBox&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;Can not save fiel: &amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; fileName&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; err)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;      &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;va&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;readFile&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; (app) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; data-line-number=&#34;14&#34;&gt;    ...&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-15&#34; data-line-number=&#34;15&#34;&gt;  &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-16&#34; data-line-number=&#34;16&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;writeFile&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; (app) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-17&#34; data-line-number=&#34;17&#34;&gt;    &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;writeFileHook&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-18&#34; data-line-number=&#34;18&#34;&gt;    &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;writeFile&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;subscribe&lt;/span&gt;(args &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;writeFileTo&lt;/span&gt;(args[&lt;span class=&#34;st&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; args[&lt;span class=&#34;st&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;]) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-19&#34; data-line-number=&#34;19&#34;&gt;  &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-20&#34; data-line-number=&#34;20&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;writeFileAs&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; (app) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-21&#34; data-line-number=&#34;21&#34;&gt;    &lt;span class=&#34;va&#34;&gt;dialog&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;showSaveDialog&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-22&#34; data-line-number=&#34;22&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-23&#34; data-line-number=&#34;23&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-24&#34; data-line-number=&#34;24&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;defaultPath&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-25&#34; data-line-number=&#34;25&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-26&#34; data-line-number=&#34;26&#34;&gt;            &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Markdown&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;extensions&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;#39;md&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;markdown&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-27&#34; data-line-number=&#34;27&#34;&gt;        ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-28&#34; data-line-number=&#34;28&#34;&gt;    &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt; (fileName) &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-29&#34; data-line-number=&#34;29&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (fileName &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;undefined&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-30&#34; data-line-number=&#34;30&#34;&gt;          &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(fileName)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-31&#34; data-line-number=&#34;31&#34;&gt;          &lt;span class=&#34;va&#34;&gt;dialog&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;showErrorBox&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;Can not save fiel: &amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Please select file.&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-32&#34; data-line-number=&#34;32&#34;&gt;          &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-33&#34; data-line-number=&#34;33&#34;&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-34&#34; data-line-number=&#34;34&#34;&gt;        &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;writeFileHook&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(fileName)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-35&#34; data-line-number=&#34;35&#34;&gt;        &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;writeFile&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;subscribe&lt;/span&gt;(args &lt;span class=&#34;op&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;writeFileTo&lt;/span&gt;(args[&lt;span class=&#34;st&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; args[&lt;span class=&#34;st&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;]) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-36&#34; data-line-number=&#34;36&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-37&#34; data-line-number=&#34;37&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-38&#34; data-line-number=&#34;38&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上書き保存 &lt;code&gt;writeFile&lt;/code&gt; と新しく保存 &lt;code&gt;writeFileAs&lt;/code&gt; を用意し，共通部分は &lt;code&gt;writeFileTo&lt;/code&gt; 関数として書き出した．&lt;/p&gt;
&lt;p&gt;これをメニューバーに追加する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; menuvar &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;Menu&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;va&#34;&gt;menuvar&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;append&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;submenu&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;        &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readFile&lt;/span&gt;(app) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;      &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; data-line-number=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;writeFile&lt;/span&gt;(app) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; data-line-number=&#34;13&#34;&gt;      &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-14&#34; data-line-number=&#34;14&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-15&#34; data-line-number=&#34;15&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Save As&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-16&#34; data-line-number=&#34;16&#34;&gt;        &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;writeFileAs&lt;/span&gt;(app) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-17&#34; data-line-number=&#34;17&#34;&gt;      &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-18&#34; data-line-number=&#34;18&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-19&#34; data-line-number=&#34;19&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-20&#34; data-line-number=&#34;20&#34;&gt;))&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に Elm 側に処理を追加した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- app/src/Main.elm&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TextAreaInput&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Window.Size&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-5&#34; data-line-number=&#34;5&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReadFile&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FS.File&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-6&#34; data-line-number=&#34;6&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WriteFileHook&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-7&#34; data-line-number=&#34;7&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-8&#34; data-line-number=&#34;8&#34;&gt;update &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-9&#34; data-line-number=&#34;9&#34;&gt;update msg model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;TextAreaInput&lt;/span&gt; str &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-12&#34; data-line-number=&#34;12&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; textarea &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; str }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt; size &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-14&#34; data-line-number=&#34;14&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; window &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; size }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-15&#34; data-line-number=&#34;15&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;ReadFile&lt;/span&gt; file &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-16&#34; data-line-number=&#34;16&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; textarea &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; file&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;body, filepath &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; file&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;path }, Cmd.none )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-17&#34; data-line-number=&#34;17&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;WriteFileHook&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; filepath) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-18&#34; data-line-number=&#34;18&#34;&gt;      ( { model &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; filepath &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; filepath }, FS.writeFile { path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; filepath, body &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;textarea } )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-19&#34; data-line-number=&#34;19&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;WriteFileHook&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-20&#34; data-line-number=&#34;20&#34;&gt;      ( model, FS.writeFile { path &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;filepath, body &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; model&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;textarea } )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-21&#34; data-line-number=&#34;21&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-22&#34; data-line-number=&#34;22&#34;&gt;subscriptions &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-23&#34; data-line-number=&#34;23&#34;&gt;subscriptions model &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-24&#34; data-line-number=&#34;24&#34;&gt;  Sub.batch&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-25&#34; data-line-number=&#34;25&#34;&gt;    [ Window.resizes &lt;span class=&#34;dt&#34;&gt;SizeUpdated&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-26&#34; data-line-number=&#34;26&#34;&gt;    , FS.readFile &lt;span class=&#34;dt&#34;&gt;ReadFile&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-27&#34; data-line-number=&#34;27&#34;&gt;    , FS.writeFileHook &lt;span class=&#34;dt&#34;&gt;WriteFileHook&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-28&#34; data-line-number=&#34;28&#34;&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでうまく動作するはずだ．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-elmdeck/savefile.gif&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;ショートカット&#34;&gt;ショートカット&lt;/h3&gt;
&lt;p&gt;最後にショートカットだ． 次の記事が参考になった．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/okaxaki/items/8b8942b0c4e13ac67739&#34;&gt;Electronに開発用メニューとショートカットを付ける - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://electronjs.org/docs/api/accelerator&#34;&gt;&lt;code&gt;Accelerator&lt;/code&gt;&lt;/a&gt; というのを使えばよいらしい．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; menuvar &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;Menu&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;va&#34;&gt;menuvar&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;append&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;MenuItem&lt;/span&gt;(&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;File&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;submenu&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; [&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-6&#34; data-line-number=&#34;6&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-7&#34; data-line-number=&#34;7&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Open&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-8&#34; data-line-number=&#34;8&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;accelerator&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Ctrl+O&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-9&#34; data-line-number=&#34;9&#34;&gt;        &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readFile&lt;/span&gt;(app) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-11&#34; data-line-number=&#34;11&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Save&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-13&#34; data-line-number=&#34;13&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;accelerator&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Ctrl+S&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-14&#34; data-line-number=&#34;14&#34;&gt;        &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;writeFile&lt;/span&gt;(app) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-15&#34; data-line-number=&#34;15&#34;&gt;      &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-16&#34; data-line-number=&#34;16&#34;&gt;      &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-17&#34; data-line-number=&#34;17&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;label&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Save As&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-18&#34; data-line-number=&#34;18&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;accelerator&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;Ctrl+Shift+S&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-19&#34; data-line-number=&#34;19&#34;&gt;        &lt;span class=&#34;at&#34;&gt;click&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;writeFileAs&lt;/span&gt;(app) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-20&#34; data-line-number=&#34;20&#34;&gt;      &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-21&#34; data-line-number=&#34;21&#34;&gt;    ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-22&#34; data-line-number=&#34;22&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-23&#34; data-line-number=&#34;23&#34;&gt;))&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで目的のモノはできた！&lt;/p&gt;
&lt;h2 id=&#34;懸念&#34;&gt;懸念&lt;/h2&gt;
&lt;p&gt;なんか Electron のファイル IO にはセキュリティ的に甘いところがあるらしい…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://utf-8.jp/public/2016/0307/electron.pdf&#34;&gt;Electron の倒し方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;個人で使う分にはいいんだけど…対策しなきゃかなぁ… Elm を介してレンダラしたマークダウンを貼り付けてるので問題ないのだろうか… 良く分からない．&lt;/p&gt;
&lt;h2 id=&#34;思うところ&#34;&gt;思うところ&lt;/h2&gt;
&lt;p&gt;結局 JS は結構書いてるなーと思った(笑) JS 絶対書きたくないマンは Elm でできることは，まだ制限される印象だ． JS の知識も多少ないとキツソウだし．&lt;/p&gt;
&lt;p&gt;まぁ綺麗に分離できるのがうれしいんだけどね．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;頑張って作っていくぞ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html</id><title type="text">Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)</title><updated>2017-12-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html"/><summary type="html">&lt;article class=&#34;post card&#34; itemscope itemtype=&#34;http://schema.org/BlogPosting&#34;&gt;
 &lt;div class=&#34;card-content&#34;&gt;
  &lt;header class=&#34;post-header&#34;&gt;
    &lt;h1 class=&#34;post-title&#34; itemprop=&#34;name headline&#34;&gt;Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)&lt;/h1&gt;
    &lt;p class=&#34;post-meta&#34;&gt;
      &lt;time datetime=&#34;2017-12-18&#34; itemprop=&#34;datePublished&#34;&gt;
        Dec 18, 2017
      &lt;/time&gt;
      
      
      &lt;div class=&#34;tags&#34;&gt;
          &lt;i class=&#34;fa fa-tags&#34;&gt;&lt;/i&gt; &lt;a href=&#34;/tags/Elm.html&#34;&gt;Elm&lt;/a&gt; &lt;a href=&#34;/tags/application.html&#34;&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;a href=&#34;https://qiita.com/advent-calendar/2017/elm2&#34;&gt;Elm Advent Calendar 2017 (その２)&lt;/a&gt; の18日目の記事です．&lt;/p&gt;
&lt;p&gt;ぼくが18日目に登録したとき(12月6日ごろ)は半分以上が空いてたのに全部埋まってる(笑) みんなすごいなぁ．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;タイトルの通り，思い付きで作り始めたマークダウンプレゼンテーションエディタについて書きます． 全てのコードは以下にあります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/elmdeck&#34;&gt;matsubara0507/elmdeck - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まだ完成していないです． あと正直なこと言うと，まだ使える代物ではないです(笑) 徐々に改善していくつもりです．&lt;/p&gt;
&lt;h2 id=&#34;md-でスライドづくり&#34;&gt;MD でスライドづくり&lt;/h2&gt;
&lt;p&gt;自分はマークダウンでサクッとスライドを作るのが好きで，イロイロ試してみた結果，&lt;a href=&#34;https://yhatt.github.io/marp/&#34;&gt;Marp&lt;/a&gt; というツールに落ち着いた． 基本的に不満は無いのだが，プレゼンテーションモード欲しいなーとか，もっと簡単にテーマを作りたいなーとかが微妙にある．&lt;/p&gt;
&lt;p&gt;しかし，最近は&lt;a href=&#34;https://github.com/yhatt/marp/wiki/Roadmap-to-Marp-1.0.0&#34;&gt;バージョン1&lt;/a&gt;に向けて構成から書き直しているようで更新が止まっている(個人的には，急かすつもりは全くなく，ゆっくり好きなように作ればいいと思ってる)．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;なので，自分でイチから作ってみることにした． ちなみに，Marp が再リリースされて，そっちの方で全然満足出来たらそっちに移るつもり．&lt;/p&gt;
&lt;p&gt;個人的に最低限欲しい機能は&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;シンタックスハイライト&lt;/li&gt;
&lt;li&gt;数式&lt;/li&gt;
&lt;li&gt;画像の拡縮&lt;/li&gt;
&lt;li&gt;PDF への出力&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;があればよい． できればプレゼンテーションモードとか欲しいけど．&lt;/p&gt;
&lt;h2 id=&#34;作ってく&#34;&gt;作ってく&lt;/h2&gt;
&lt;p&gt;ちなみに，既にできているのは (1) シンタックスハイライト，(2) 数式 まで． あと，ローカルファイルの読み書きを Elm でする方法(というかブラウザでいい感じにする方法)が分からなかったので Electron にした．&lt;/p&gt;
&lt;h3 id=&#34;markdown-をスライドへ&#34;&gt;Markdown をスライドへ&lt;/h3&gt;
&lt;p&gt;戦略としては，テキストエリアで入力してもらったマークダウン表記のプレーンテキストを何らかのパッケージで構文木に変換し，さらに HTML に変換してもらうだけ． そして，変換したマークダウンの構文木を区切りワード &lt;code&gt;---&lt;/code&gt; にしてスライド1枚1枚にするイメージ．&lt;/p&gt;
&lt;p&gt;今回は以下のパッケージを使った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://package.elm-lang.org/packages/pablohirafuji/elm-markdown&#34;&gt;pablohirafuji/elm-markdown - elm packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;マークダウンパーサーとしては他にも，&lt;a href=&#34;http://package.elm-lang.org/packages/evancz/elm-markdown&#34;&gt;Elm の作者が作ったモノ&lt;/a&gt;があったが，これは Native モジュールで JS の &lt;a href=&#34;https://github.com/chjj/marked&#34;&gt;marked&lt;/a&gt; を呼んでるだけなので，マークダウンの構文木をいじれない． なので，構文木も扱える pablohirafuji/elm-markdown を使った(その代わり速度は遅い…)．&lt;/p&gt;
&lt;h2 id=&#34;section-2&#34;&gt;&lt;/h2&gt;
&lt;p&gt;pablohirafuji/elm-markdown は &lt;a href=&#34;http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#parse&#34;&gt;&lt;code&gt;parse&lt;/code&gt;&lt;/a&gt; 関数を用いることで文字列から次の &lt;code&gt;Block b i&lt;/code&gt; 型のリストに変換する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BlankLine&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ThematicBreak&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Heading&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CodeBlock&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CodeBlock&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Paragraph&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;BlockQuote&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ListBlock&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i)))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PlainInlines&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; data-line-number=&#34;10&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; b (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Block b i&lt;/code&gt; 型から &lt;code&gt;Html msg&lt;/code&gt; へは &lt;a href=&#34;http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#toHtml&#34;&gt;&lt;code&gt;toHtml&lt;/code&gt;&lt;/a&gt; 関数を使えばよい．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;elm repl&lt;/code&gt; で試した結果，&lt;code&gt;---&lt;/code&gt; は &lt;code&gt;ThematicBreak&lt;/code&gt; になることが分かった． なので，&lt;code&gt;ThematicBreak&lt;/code&gt; で &lt;code&gt;List (Block b i)&lt;/code&gt; を &lt;code&gt;List (List (Block b i))&lt;/code&gt; に分割する． &lt;code&gt;(a -&amp;gt; Bool) -&amp;gt; List a -&amp;gt; List (List a)&lt;/code&gt; って感じの関数が無かったので&lt;a href=&#34;https://github.com/matsubara0507/elmdeck/blob/6ff0520f65080c9a94ac85c99fc01e0374ca250e/src/Utils.elm#L9&#34;&gt;自分で定義した&lt;/a&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; data-line-number=&#34;1&#34;&gt;markdownView &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; data-line-number=&#34;2&#34;&gt;markdownView { textarea, window } &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; data-line-number=&#34;3&#34;&gt;    textarea&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Block.parse &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; data-line-number=&#34;5&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Utils.split ((&lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Block.ThematicBreak&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; data-line-number=&#34;6&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.map (toSlide window)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; data-line-number=&#34;7&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; div []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; data-line-number=&#34;9&#34;&gt;toSlide &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Window.Size&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; data-line-number=&#34;10&#34;&gt;toSlide window blocks &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; data-line-number=&#34;11&#34;&gt;    blocks&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; data-line-number=&#34;12&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.concatMap customHtmlBlock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; data-line-number=&#34;13&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; slideView window&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; data-line-number=&#34;15&#34;&gt;customHtmlBlock &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; data-line-number=&#34;16&#34;&gt;customHtmlBlock block &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; data-line-number=&#34;17&#34;&gt;    Block.defaultHtml (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; customHtmlBlock) &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; block&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;取りあえずは &lt;code&gt;customHtmlBlock&lt;/code&gt; 関数では標準のを呼んでいる． &lt;code&gt;window&lt;/code&gt; を引き回しているのは，ウィンドウサイズに合わせてスライドの大きさを拡縮するため．&lt;/p&gt;
&lt;h3 id=&#34;シンタックスハイライト&#34;&gt;シンタックスハイライト&lt;/h3&gt;
&lt;p&gt;シンタックスハイライトは皆さんご存知 &lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt; を使う． Elm 製のパッケージは見当たらなかったので，js のパッケージを使うことにした．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/evancz/elm-markdown/blob/e395295cbe0b460ab051c4040011470628f05b72/src/Native/Markdown.js#L77&#34;&gt;evancz/elm-markdown が highlight.js を使っていた&lt;/a&gt;ので，それを参考に Native モジュールを作った．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;// src/Native/Highlight.js&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; data-line-number=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; _matsubara0507$elmdeck$Native_Highlight &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;toHighlight&lt;/span&gt;(lang&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; code)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; data-line-number=&#34;4&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;typeof&lt;/span&gt; hljs &lt;span class=&#34;op&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; lang &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;hljs&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;listLanguages&lt;/span&gt;().&lt;span class=&#34;at&#34;&gt;indexOf&lt;/span&gt;(lang) &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; data-line-number=&#34;7&#34;&gt;      &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;hljs&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;highlight&lt;/span&gt;(lang&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; code&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;).&lt;span class=&#34;at&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; code&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; data-line-number=&#34;10&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; data-line-number=&#34;12&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;toHighlight&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;F2&lt;/span&gt;(toHighlight)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; data-line-number=&#34;14&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; data-line-number=&#34;15&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側はこんな感じ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Native.Highlight&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; data-line-number=&#34;3&#34;&gt;toHighlight &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; data-line-number=&#34;4&#34;&gt;toHighlight &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; data-line-number=&#34;5&#34;&gt;    Native.Highlight.toHighlight&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;返ってくるのは &lt;code&gt;&amp;quot;&amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt;&amp;quot;&lt;/code&gt; のような HTML の文字列なので，これを &lt;code&gt;Html a&lt;/code&gt; 型に変換してやる必要がある． それには jinjor 先生の &lt;a href=&#34;http://package.elm-lang.org/packages/jinjor/elm-html-parser/latest&#34;&gt;jinjor/elm-html-parser&lt;/a&gt; を用いた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jinjor-labo.hatenablog.com/entry/2016/09/11/222251&#34;&gt;ElmでHTMLパーサを作って公開するまでの手順 - ジンジャー研究室&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これをこんな感じに呼び出す&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; data-line-number=&#34;1&#34;&gt;customHtmlBlock &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; data-line-number=&#34;2&#34;&gt;customHtmlBlock block &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; block &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Block.CodeBlock&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block.Fenced&lt;/span&gt; _ fence) code &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; data-line-number=&#34;5&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; data-line-number=&#34;6&#34;&gt;                language &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; data-line-number=&#34;7&#34;&gt;                    &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; fence&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;language&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; data-line-number=&#34;8&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; data-line-number=&#34;9&#34;&gt;            code&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; data-line-number=&#34;10&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Utils.toHighlight language&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; data-line-number=&#34;11&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; precode language&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; data-line-number=&#34;12&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; data-line-number=&#34;13&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; data-line-number=&#34;15&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; data-line-number=&#34;16&#34;&gt;            Block.defaultHtml (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; customHtmlBlock) &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; block&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; data-line-number=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; data-line-number=&#34;18&#34;&gt;precode &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; data-line-number=&#34;19&#34;&gt;precode lang code &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; data-line-number=&#34;20&#34;&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;pre&amp;gt;&amp;lt;code class=\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; lang &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; code &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;どう考えても効率悪いけど(笑)&lt;/p&gt;
&lt;h3 id=&#34;数式&#34;&gt;数式&lt;/h3&gt;
&lt;p&gt;Marp を参考にして &lt;a href=&#34;https://khan.github.io/KaTeX/&#34;&gt;KaTeX&lt;/a&gt; を使うことにした． KaTeX も highlight.js と同じように文字列を受け取って HTML に変換した文字列を返す関数 &lt;code&gt;renderToString&lt;/code&gt; がある． 注意点は，&lt;code&gt;renderToString&lt;/code&gt; の場合は失敗すると例外を投げてくるところ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; _matsubara0507$elmdeck$Native_Katex &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; data-line-number=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;toKatex&lt;/span&gt;(code)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-3&#34; data-line-number=&#34;3&#34;&gt;  &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;typeof&lt;/span&gt; katex &lt;span class=&#34;op&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-6&#34; data-line-number=&#34;6&#34;&gt;      &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-7&#34; data-line-number=&#34;7&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;katex&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;renderToString&lt;/span&gt;(code)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-8&#34; data-line-number=&#34;8&#34;&gt;      &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;catch&lt;/span&gt; (e) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-9&#34; data-line-number=&#34;9&#34;&gt;        &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; code&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-10&#34; data-line-number=&#34;10&#34;&gt;      &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-11&#34; data-line-number=&#34;11&#34;&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-12&#34; data-line-number=&#34;12&#34;&gt;    &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; code&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-13&#34; data-line-number=&#34;13&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-15&#34; data-line-number=&#34;15&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-16&#34; data-line-number=&#34;16&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;toKatex&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; toKatex&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-17&#34; data-line-number=&#34;17&#34;&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-18&#34; data-line-number=&#34;18&#34;&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側はほぼ同じ．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Native.Katex&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; data-line-number=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; data-line-number=&#34;3&#34;&gt;toKatex &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; data-line-number=&#34;4&#34;&gt;toKatex &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; data-line-number=&#34;5&#34;&gt;    Native.Katex.toKatex&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初は以下の LaTeX 表記ををパースしようと思った&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$$
  a + 1
$$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;が難しくてやめた(笑) 結局 &lt;code&gt;katex&lt;/code&gt; のシンタックスハイライトを KaTeX にした．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; data-line-number=&#34;1&#34;&gt;customHtmlBlock &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; data-line-number=&#34;2&#34;&gt;customHtmlBlock block &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; block &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Block.CodeBlock&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block.Fenced&lt;/span&gt; _ fence) code &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; data-line-number=&#34;5&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; data-line-number=&#34;6&#34;&gt;                language &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-7&#34; data-line-number=&#34;7&#34;&gt;                    &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;withDefault &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; fence&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;language&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-9&#34; data-line-number=&#34;9&#34;&gt;                toHighlight_ &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-10&#34; data-line-number=&#34;10&#34;&gt;                    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; List.member language [ &lt;span class=&#34;st&#34;&gt;&amp;quot;katex&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;Katex&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-11&#34; data-line-number=&#34;11&#34;&gt;                        Utils.toKatex &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; divFormula&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-12&#34; data-line-number=&#34;12&#34;&gt;                    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-13&#34; data-line-number=&#34;13&#34;&gt;                        Utils.toHighlight language &lt;span class=&#34;fu&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; precode language&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-14&#34; data-line-number=&#34;14&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-15&#34; data-line-number=&#34;15&#34;&gt;            code&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-16&#34; data-line-number=&#34;16&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; toHighlight_&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-17&#34; data-line-number=&#34;17&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-18&#34; data-line-number=&#34;18&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-20&#34; data-line-number=&#34;20&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-21&#34; data-line-number=&#34;21&#34;&gt;            block&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-22&#34; data-line-number=&#34;22&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Block.defaultHtml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-23&#34; data-line-number=&#34;23&#34;&gt;                    (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; customHtmlBlock)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-24&#34; data-line-number=&#34;24&#34;&gt;                    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-25&#34; data-line-number=&#34;25&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-26&#34; data-line-number=&#34;26&#34;&gt;divFormula &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-27&#34; data-line-number=&#34;27&#34;&gt;divFormula code &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-28&#34; data-line-number=&#34;28&#34;&gt;    &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;div class=\&amp;quot;formula\&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; code &lt;span class=&#34;fu&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;インラインの数式&#34;&gt;インラインの数式&lt;/h3&gt;
&lt;p&gt;次はインラインの数式 &lt;code&gt;$a + 1$&lt;/code&gt; を変換する． シンタックスハイライトと数式のブロック要素はかなり雑にやったが，ここはもう少し真面目にやらないといけない．&lt;/p&gt;
&lt;p&gt;インライン要素を追加する方法は &lt;a href=&#34;https://github.com/pablohirafuji/elm-markdown/tree/2.0.4#implementing-gfm-task-list&#34;&gt;pablohirafuji/elm-markdown に少し書いてある&lt;/a&gt;． これを参考に拡張していった．&lt;/p&gt;
&lt;h4 id=&#34;カスタムインライン要素&#34;&gt;カスタムインライン要素&lt;/h4&gt;
&lt;p&gt;インライン要素の型 &lt;code&gt;Inline i&lt;/code&gt; は次のようになっている．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HardLineBreak&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; data-line-number=&#34;4&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CodeInline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-5&#34; data-line-number=&#34;5&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Link&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-6&#34; data-line-number=&#34;6&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Image&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HtmlInline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)) (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-8&#34; data-line-number=&#34;8&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Emphasis&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-9&#34; data-line-number=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; i (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インライン要素を増やすには &lt;code&gt;Custom i (List (Inline i))&lt;/code&gt; を用いる． &lt;code&gt;i&lt;/code&gt; の部分に新しい型を追加すればよいのだ． なので，数式のインライン要素用の型を定義する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-1&#34; data-line-number=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb11-2&#34; data-line-number=&#34;2&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Formula String&lt;/code&gt; の &lt;code&gt;String&lt;/code&gt; が数式に変換すべき文字列．&lt;/p&gt;
&lt;p&gt;そして &lt;code&gt;Block b i&lt;/code&gt; だったところを &lt;code&gt;Block b Formula&lt;/code&gt; に置き換える． 次に上から順に変えていこう．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-1&#34; data-line-number=&#34;1&#34;&gt;customHtmlBlock &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-2&#34; data-line-number=&#34;2&#34;&gt;customHtmlBlock block &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; block &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-5&#34; data-line-number=&#34;5&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-6&#34; data-line-number=&#34;6&#34;&gt;            block&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-7&#34; data-line-number=&#34;7&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Block.defaultHtml&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-8&#34; data-line-number=&#34;8&#34;&gt;                    (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; customHtmlBlock)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-9&#34; data-line-number=&#34;9&#34;&gt;                    (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; customHtmlInline)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-10&#34; data-line-number=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-11&#34; data-line-number=&#34;11&#34;&gt;customHtmlInline &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-12&#34; data-line-number=&#34;12&#34;&gt;customHtmlInline inline &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-13&#34; data-line-number=&#34;13&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inline &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-14&#34; data-line-number=&#34;14&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Inline.Custom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; txt) _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-15&#34; data-line-number=&#34;15&#34;&gt;            Utils.toKatex txt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-16&#34; data-line-number=&#34;16&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Html.parse&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-17&#34; data-line-number=&#34;17&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; Html.toVirtualDom&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-18&#34; data-line-number=&#34;18&#34;&gt;                &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; span []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-19&#34; data-line-number=&#34;19&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-20&#34; data-line-number=&#34;20&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb12-21&#34; data-line-number=&#34;21&#34;&gt;            Inline.defaultHtml (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; customHtmlInline) inline&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでは難しくない． 問題は &lt;code&gt;Custom (Formula txt) blocks&lt;/code&gt; な値をどうやって構築するか．&lt;/p&gt;
&lt;h2 id=&#34;section-3&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Inline i&lt;/code&gt; 型の &lt;code&gt;Text String&lt;/code&gt; のうち &lt;code&gt;$...$&lt;/code&gt; のモノを &lt;code&gt;Custom (Formula txt) []&lt;/code&gt; に変換する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-1&#34; data-line-number=&#34;1&#34;&gt;parseFormulaInline &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-2&#34; data-line-number=&#34;2&#34;&gt;parseFormulaInline inline &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; inline &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Inline.Text&lt;/span&gt; text &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-5&#34; data-line-number=&#34;5&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; parseFormula text &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-6&#34; data-line-number=&#34;6&#34;&gt;                [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-7&#34; data-line-number=&#34;7&#34;&gt;                    [ inline ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-9&#34; data-line-number=&#34;9&#34;&gt;                [ _ ] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-10&#34; data-line-number=&#34;10&#34;&gt;                    [ inline ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-11&#34; data-line-number=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-12&#34; data-line-number=&#34;12&#34;&gt;                inlines &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-13&#34; data-line-number=&#34;13&#34;&gt;                    inlines&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-14&#34; data-line-number=&#34;14&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-15&#34; data-line-number=&#34;15&#34;&gt;        _ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-16&#34; data-line-number=&#34;16&#34;&gt;            [ inline ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-17&#34; data-line-number=&#34;17&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-18&#34; data-line-number=&#34;18&#34;&gt;parseFormula &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb13-19&#34; data-line-number=&#34;19&#34;&gt;parseFormula text &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt; undefined ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;abc$1+2$def&lt;/code&gt; なども考えられるので &lt;code&gt;String -&amp;gt; List (Inline Formula)&lt;/code&gt; に変換している．&lt;/p&gt;
&lt;h4 id=&#34;パーサーを作る&#34;&gt;パーサーを作る&lt;/h4&gt;
&lt;p&gt;いよいよパーサーだ． カレンダーのいつぞやで jinjor 先生が &lt;a href=&#34;http://package.elm-lang.org/packages/elm-tools/parser/latest&#34;&gt;elm-tools/parser&lt;/a&gt; を紹介してくれた．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/jinjor/items/d0d4b83b530251df913e&#34;&gt;Elm で構文解析しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;が，自分には Haskell の Parsec 由来の &lt;a href=&#34;http://package.elm-lang.org/packages/elm-community/parser-combinators/latest&#34;&gt;elm-community/parser-combinators&lt;/a&gt; の方が使いやすかったのでコッチに逃げた(ゴメンナサイ)．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-1&#34; data-line-number=&#34;1&#34;&gt;withFormula &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; s ( &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-2&#34; data-line-number=&#34;2&#34;&gt;withFormula &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-3&#34; data-line-number=&#34;3&#34;&gt;    (,) &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;concat &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many noneDal) &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; formula&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-4&#34; data-line-number=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-5&#34; data-line-number=&#34;5&#34;&gt;formula &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; s &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-6&#34; data-line-number=&#34;6&#34;&gt;formula &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-7&#34; data-line-number=&#34;7&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;concat &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; between (string &lt;span class=&#34;st&#34;&gt;&amp;quot;$&amp;quot;&lt;/span&gt;) (string &lt;span class=&#34;st&#34;&gt;&amp;quot;$&amp;quot;&lt;/span&gt;) (many term)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-8&#34; data-line-number=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-9&#34; data-line-number=&#34;9&#34;&gt;term &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; s &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-10&#34; data-line-number=&#34;10&#34;&gt;term &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-11&#34; data-line-number=&#34;11&#34;&gt;    escapedChar &lt;span class=&#34;fu&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; noneDal&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-12&#34; data-line-number=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-13&#34; data-line-number=&#34;13&#34;&gt;noneDal &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; s &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-14&#34; data-line-number=&#34;14&#34;&gt;noneDal &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-15&#34; data-line-number=&#34;15&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromChar &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; noneOf [ &lt;span class=&#34;ch&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-16&#34; data-line-number=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-17&#34; data-line-number=&#34;17&#34;&gt;escapedChar &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; s &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-18&#34; data-line-number=&#34;18&#34;&gt;escapedChar &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb14-19&#34; data-line-number=&#34;19&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;append &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;fromChar &lt;span class=&#34;fu&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; anyChar)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;abc$1+2$&lt;/code&gt; が &lt;code&gt;(&amp;quot;abc&amp;quot;, &amp;quot;1+2&amp;quot;)&lt;/code&gt; になるようにパーサーを書いた(&lt;code&gt;$1+2$&lt;/code&gt; は &lt;code&gt;(&amp;quot;&amp;quot;, &amp;quot;1+2&amp;quot;)&lt;/code&gt; となる)． このパーサーを再帰的に適用する．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-1&#34; data-line-number=&#34;1&#34;&gt;parseFormula &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-2&#34; data-line-number=&#34;2&#34;&gt;parseFormula text &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-3&#34; data-line-number=&#34;3&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; Combine.parse withFormula text &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Result.Err&lt;/span&gt; ( (), stream, _ ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-5&#34; data-line-number=&#34;5&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; stream&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-6&#34; data-line-number=&#34;6&#34;&gt;                []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-7&#34; data-line-number=&#34;7&#34;&gt;            &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-8&#34; data-line-number=&#34;8&#34;&gt;                [ &lt;span class=&#34;dt&#34;&gt;Inline.Text&lt;/span&gt; stream&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; ]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-9&#34; data-line-number=&#34;9&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-10&#34; data-line-number=&#34;10&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Result.Ok&lt;/span&gt; ( (), stream, ( txt, exp ) ) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-11&#34; data-line-number=&#34;11&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Inline.Text&lt;/span&gt; txt&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-12&#34; data-line-number=&#34;12&#34;&gt;&lt;span class=&#34;ot&#34;&gt;                ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Inline.Custom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; exp) []&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb15-13&#34; data-line-number=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;                ::&lt;/span&gt; parseFormula stream&lt;span class=&#34;fu&#34;&gt;.&lt;/span&gt;input&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse withFormula text&lt;/code&gt; をすると，core の &lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/latest/Result#Result&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt; 型を返す． &lt;code&gt;stream&lt;/code&gt; はパースした残りなので，パース成功 &lt;code&gt;Result.Ok&lt;/code&gt; なら &lt;code&gt;stream&lt;/code&gt; に再度パーサーをかけ，失敗 &lt;code&gt;Result.Err&lt;/code&gt; ならそのまま返す．&lt;/p&gt;
&lt;h4 id=&#34;高階関数&#34;&gt;高階関数&lt;/h4&gt;
&lt;p&gt;pablohirafuji/elm-markdown には便利な高階関数がいくつか定義されている．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-1&#34; data-line-number=&#34;1&#34;&gt;walk &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb16-2&#34; data-line-number=&#34;2&#34;&gt;walkInlines &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Inline&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b i&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前述したとおり &lt;code&gt;Block b i&lt;/code&gt; 型は再帰型になっているので，&lt;code&gt;Block b i&lt;/code&gt; や &lt;code&gt;Inline i&lt;/code&gt; をリストで持っている． なので，&lt;a href=&#34;http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walk&#34;&gt;&lt;code&gt;walk&lt;/code&gt;&lt;/a&gt; や &lt;a href=&#34;http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walkInlines&#34;&gt;&lt;code&gt;walkInlines&lt;/code&gt;&lt;/a&gt; 関数はそれらに対し再帰的に関数を適用してくれる．&lt;/p&gt;
&lt;p&gt;しかし，用意した関数は &lt;code&gt;Inline Formula -&amp;gt; List (Inline Formula)&lt;/code&gt; なのでどちらも使えない． なので，&lt;code&gt;walkInlinesWithConcat : (Inline i -&amp;gt; List (Inline i)) -&amp;gt; Block b i -&amp;gt; Block b i&lt;/code&gt; というのを定義した．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-1&#34; data-line-number=&#34;1&#34;&gt;parseFormulaInBlock &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-2&#34; data-line-number=&#34;2&#34;&gt;parseFormulaInBlock &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb17-3&#34; data-line-number=&#34;3&#34;&gt;    Block.walkInlinesWithConcat parseFormulaInline&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこれを呼ぶだけ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-1&#34; data-line-number=&#34;1&#34;&gt;toSlide &lt;span class=&#34;fu&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Window.Size&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Block&lt;/span&gt; b &lt;span class=&#34;dt&#34;&gt;Formula&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-2&#34; data-line-number=&#34;2&#34;&gt;toSlide window blocks &lt;span class=&#34;fu&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-3&#34; data-line-number=&#34;3&#34;&gt;    blocks&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-4&#34; data-line-number=&#34;4&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.map (Block.walk parseFormulaInBlock)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-5&#34; data-line-number=&#34;5&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; List.concatMap customHtmlBlock&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb18-6&#34; data-line-number=&#34;6&#34;&gt;        &lt;span class=&#34;fu&#34;&gt;|&amp;gt;&lt;/span&gt; slideView window&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-elmdeck/elmdeck.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/elmdeck/&#34;&gt;GitHub Pages においた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;長くなったのでココまで． Electron の部分も面白いんだけどなぁ．&lt;/p&gt;
&lt;p&gt;頑張って作っていくぞ．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry></feed>