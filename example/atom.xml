<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Sample Site Posts</title><id>https://example.com/atom.xml</id><updated>2019-08-26T00:00:00Z</updated><link href="https://example.com"/><entry><id>https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html</id><title type="text">Elm で QR コードリーダー</title><updated>2019-08-26T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;タイトル通りです． ただし，jsQR とポートを使ってるだけです． Elm 側で QR コードのデコードをするわけじゃないので，そういうのを期待した人はすいません．&lt;/p&gt;
&lt;p&gt;今回の実装は下記のリポジトリにあります:&lt;/p&gt;
&lt;h4 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;183&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/anaqram-web-samples&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;リポジトリの詳細のとこを読むとわかるんですけど，実はこの話は書典7のネタの一部を抜粋したものです(典の方はもっと丁寧に書いてます)．&lt;/p&gt;
&lt;h2 id=&#34;elm-からカメラを使う&#34;&gt;Elm からカメラを使う&lt;/h2&gt;
&lt;p&gt;ブラウザからカメラを使うには JavaScript の &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/MediaDevices/getUserMedia&#34;&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;&lt;/a&gt; を使う． このメソッドを使うには &lt;a href=&#34;https://webrtc.github.io/samples/src/content/getusermedia/gum&#34;&gt;WebRTC のサンプルコード&lt;/a&gt;を参考に次のように書く:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; constraints &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;initCamera&lt;/span&gt;(videoId) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; stream &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;navigator&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;mediaDevices&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getUserMedia&lt;/span&gt;(constraints)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(videoId).&lt;span class=&#34;at&#34;&gt;srcObject&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; stream&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;catch&lt;/span&gt; (e) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;at&#34;&gt;handleError&lt;/span&gt;(e)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// ここの実装は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTML 側は &lt;code&gt;id=videoId&lt;/code&gt; を設定した &lt;code&gt;video&lt;/code&gt; タグを用意するだけで良い． &lt;code&gt;initCamera&lt;/code&gt; メソッドを Elm から使うにはポート機能を使って呼び出す:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- QRCode.elm&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;startCamera&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;純粋関数型プログラミング言語である Elm にとって JavaScript のコードを直接呼び出すことは非純粋な行為(&lt;code&gt;Cmd a&lt;/code&gt; 型は非純粋な型)であり，&lt;code&gt;port&lt;/code&gt; プレフィックスを使って普通の関数とは全く別に管理される(&lt;code&gt;port&lt;/code&gt; が付くモジュール・関数はパッケージに含めることができない)． より詳しいポート機能については &lt;a href=&#34;https://guide.elm-lang.jp/interop/ports.html&#34;&gt;guide.elm-lang.jp のポートのページ&lt;/a&gt;を読むと良いだろう．&lt;/p&gt;
&lt;p&gt;さて，&lt;code&gt;startCamera&lt;/code&gt; 関数の実装は JavaScript 側で次のように行った:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// flags は Elm コードの JavaScript 側から与える初期値&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; flags &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;video_area&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// true だけではなくカメラのサイズとリアカメラ優先フラグ(facingMode)を与える&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; constraints &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;...&lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;facingMode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;environment&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;Main&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; flags&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;startCamera&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;initCamera&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ids&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;video&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこんな感じに Elm 側で呼び出す:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Attributes&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Events&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; } }&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;startCamera&lt;/span&gt; ())&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb4-36&#34;&gt;&lt;a href=&#34;#cb4-36&#34;&gt;&lt;/a&gt;    [ &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-37&#34;&gt;&lt;a href=&#34;#cb4-37&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;background-color&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;#000&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;autoplay&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-38&#34;&gt;&lt;a href=&#34;#cb4-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-39&#34;&gt;&lt;a href=&#34;#cb4-39&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- iOS のために必要&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-40&#34;&gt;&lt;a href=&#34;#cb4-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;attribute&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;playsinline&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-41&#34;&gt;&lt;a href=&#34;#cb4-41&#34;&gt;&lt;/a&gt;        ] []&lt;/span&gt;
&lt;span id=&#34;cb4-42&#34;&gt;&lt;a href=&#34;#cb4-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Enable Camera&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb4-43&#34;&gt;&lt;a href=&#34;#cb4-43&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ボタンの &lt;code&gt;onClick&lt;/code&gt; でイベントハンドラを受け取り，&lt;code&gt;startCamera&lt;/code&gt; ポート関数を呼び出しているだけ． また，&lt;code&gt;Flags&lt;/code&gt; 機能を使って &lt;code&gt;video&lt;/code&gt; タグに必要な id を JavaScript 側と共有している． &lt;a href=&#34;https://matsubara0507.github.io/anaqram-web-samples/step1/&#34;&gt;ここ&lt;/a&gt;で実際にビルド結果を触れる．&lt;/p&gt;
&lt;h2 id=&#34;qr-コードを読み取る&#34;&gt;QR コードを読み取る&lt;/h2&gt;
&lt;p&gt;Elm からカメラを起動できたので，次に QR コードを読み取る． 冒頭で述べた通り，QR コードのでコードには &lt;a href=&#34;https://github.com/cozmo/jsQR&#34;&gt;jsQR&lt;/a&gt; という JavaScript のライブラリを利用する． jsQR の使い方は簡単で，&lt;code&gt;jsQR&lt;/code&gt; というメソッドに &lt;code&gt;ImageData&lt;/code&gt; オブジェクト(とサイズ)を渡してあげるだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// jsQR の README に載っているサンプルコード&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; code &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;jsQR&lt;/span&gt;(imageData&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; width&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; height)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// QR コードがなければ null になるようです&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (code) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;Found QR code&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; code)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ImageData&lt;/code&gt; オブジェクトはカメラ画像をいったん Canvas に退避させることで取得できる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;captureImage&lt;/span&gt;(videoId&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; captureId) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; canvas &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(captureId)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; video &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(videoId)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;width&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoWidth&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoHeight&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; ctx &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getContext&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;drawImage&lt;/span&gt;(video&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getImageData&lt;/span&gt;(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoWidth&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoHeight&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，後はこれを Elm で呼び出す． ただし，カメラを起動する &lt;code&gt;startCamera&lt;/code&gt; 関数の時と違い，ボタンを押したらQRコードのデコード結果の文字列を取得したい． なので JavaScript 側から実行されることを想定した「内向き」のポート関数も定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- QRCode.elm&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;startCamera&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;captureImage&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- JS とは JSON データでやり取りするのが良いらしい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;updateQRCode&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;updateQRCodeWithDecode&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;updateQRCodeWithDecode&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;updateQRCode&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;decodeValue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;updateQRCode&lt;/code&gt; 関数が内向きのポート関数だ． &lt;code&gt;Sub a&lt;/code&gt; 型はタイマーやマウスの動作など外部から非同期に送られてくるメッセージを取得するための型だ． 次のように，JS 側で実装する &lt;code&gt;captureImage&lt;/code&gt; 関数の最後で &lt;code&gt;updateQRCode&lt;/code&gt; 関数が呼ばれ &lt;code&gt;QRCode&lt;/code&gt; 型を表す JS オブジェクトが送られてくる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// canvas の id を追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; flags &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;video_area&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;capture&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;capture_image&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;captureImage&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; imageData &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;captureImage&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ids&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ids&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;capture&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; qrcode &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;jsQR&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;imageData&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;imageData&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;imageData&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;height&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;updateQRCode&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(qrcode)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// ココ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側は次のように書き換える:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AnaQRam&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;errorToString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;op&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- capture を追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;capture&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- QRコードのデコード結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;        &lt;span class=&#34;co&#34;&gt;-- JSONのデコード失敗結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-30&#34;&gt;&lt;a href=&#34;#cb9-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaptureImage&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-31&#34;&gt;&lt;a href=&#34;#cb9-31&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-32&#34;&gt;&lt;a href=&#34;#cb9-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-33&#34;&gt;&lt;a href=&#34;#cb9-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-34&#34;&gt;&lt;a href=&#34;#cb9-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-35&#34;&gt;&lt;a href=&#34;#cb9-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-36&#34;&gt;&lt;a href=&#34;#cb9-36&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-37&#34;&gt;&lt;a href=&#34;#cb9-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-38&#34;&gt;&lt;a href=&#34;#cb9-38&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;CaptureImage&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;captureImage&lt;/span&gt; ())&lt;/span&gt;
&lt;span id=&#34;cb9-39&#34;&gt;&lt;a href=&#34;#cb9-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-40&#34;&gt;&lt;a href=&#34;#cb9-40&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- QRコードがなかった場合(null が返ってくるので)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-41&#34;&gt;&lt;a href=&#34;#cb9-41&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;QR code is not found&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-42&#34;&gt;&lt;a href=&#34;#cb9-42&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-43&#34;&gt;&lt;a href=&#34;#cb9-43&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- QRコードのデコード成功&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-44&#34;&gt;&lt;a href=&#34;#cb9-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-45&#34;&gt;&lt;a href=&#34;#cb9-45&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-46&#34;&gt;&lt;a href=&#34;#cb9-46&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- JSONのデコード失敗&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-47&#34;&gt;&lt;a href=&#34;#cb9-47&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;message&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;errorToString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;message&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-48&#34;&gt;&lt;a href=&#34;#cb9-48&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-49&#34;&gt;&lt;a href=&#34;#cb9-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-50&#34;&gt;&lt;a href=&#34;#cb9-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-51&#34;&gt;&lt;a href=&#34;#cb9-51&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb9-52&#34;&gt;&lt;a href=&#34;#cb9-52&#34;&gt;&lt;/a&gt;    [ &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-53&#34;&gt;&lt;a href=&#34;#cb9-53&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Enable Camera&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb9-54&#34;&gt;&lt;a href=&#34;#cb9-54&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaptureImage&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Decode QR&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb9-55&#34;&gt;&lt;a href=&#34;#cb9-55&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;canvas&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;capture&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;hidden&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; ] [] &lt;span class=&#34;co&#34;&gt;-- カメラ画像退避用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-56&#34;&gt;&lt;a href=&#34;#cb9-56&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewResult&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-57&#34;&gt;&lt;a href=&#34;#cb9-57&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb9-58&#34;&gt;&lt;a href=&#34;#cb9-58&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-59&#34;&gt;&lt;a href=&#34;#cb9-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewResult&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-60&#34;&gt;&lt;a href=&#34;#cb9-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewResult&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-61&#34;&gt;&lt;a href=&#34;#cb9-61&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-62&#34;&gt;&lt;a href=&#34;#cb9-62&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;QR code: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt;)) ]&lt;/span&gt;
&lt;span id=&#34;cb9-63&#34;&gt;&lt;a href=&#34;#cb9-63&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-64&#34;&gt;&lt;a href=&#34;#cb9-64&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb9-65&#34;&gt;&lt;a href=&#34;#cb9-65&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-66&#34;&gt;&lt;a href=&#34;#cb9-66&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-67&#34;&gt;&lt;a href=&#34;#cb9-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;updateQRCodeWithDecode&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出来上がったのが&lt;a href=&#34;https://matsubara0507.github.io/anaqram-web-samples/step2&#34;&gt;こんな感じ&lt;/a&gt;． ほんとはここがゴールじゃないんだが結果的に QR コードリーダーができた．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Elm 側でデコードする話は気が向いたらそのうち頑張るかもしれない(画像データをポートでやりとりするのは，あまり効率的ではないと思うけど)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html</id><title type="text">elmap.hs プロジェクトを作りました</title><updated>2019-08-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;GUI 付きのツールを作成したい時、普段は Elm を使います． さらにバックエンドを付けるときは Haskell + Elm で実装し，Elm 側で呼び出す API クライアントは &lt;a href=&#34;http://hackage.haskell.org/package/elm-export&#34;&gt;elm-export&lt;/a&gt; と &lt;a href=&#34;http://hackage.haskell.org/package/servant-elm&#34;&gt;servant-elm&lt;/a&gt; というパッケージを使い，Haskell Servant の API 定義から自動生成させていました．&lt;/p&gt;
&lt;p&gt;elm-export は Elm 0.19 に追いつけてなかったので独自にフォークして運用し，また愛用している extensible パッケージにも独自で対応していました． しかし，servant-elm が Elm 0.19 に対応するために依存パッケージを elm-export から &lt;a href=&#34;http://hackage.haskell.org/package/elm-bridge&#34;&gt;elm-bridge&lt;/a&gt; に変更したところ，独自で対応してた部分と色々都合が悪かったので，それらのクッションとなる薄いラッパーパッケージ群として elmap.hs プロジェクトを作成しました:&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/elmap.hs&#34;&gt;&lt;/iframe&gt;&lt;/h2&gt;
&lt;p&gt;この記事は elmap.hs を作る上で色々したことのメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;なぜ-elm-bridgeservant-elm-ではダメか&#34;&gt;なぜ elm-bridge/servant-elm ではダメか&lt;/h2&gt;
&lt;p&gt;を説明するためにまずは elm-bridge パッケージについて紹介する．&lt;/p&gt;
&lt;h3 id=&#34;elm-bridge-パッケージ&#34;&gt;elm-bridge パッケージ&lt;/h3&gt;
&lt;p&gt;elm-bridge は Haskell の型定義から Elm の型定義などを生成するためのパッケージだ． 型定義の他にも，Elm 側の JSON デコーダー・エンコーダーも自動生成してくれる(メタプログラミングなどが無い Elm にとってこれは大変嬉しい)．&lt;/p&gt;
&lt;p&gt;仕組みは簡単で，簡易的な Elm の型定義などを Haskell で表現している．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Elm の型定義そのもの&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeAlias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;         &lt;span class=&#34;co&#34;&gt;-- レコードの型エイリアス&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypePrimAlias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EPrimAlias&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 普通の型エイリアス&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeSum&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ESum&lt;/span&gt;             &lt;span class=&#34;co&#34;&gt;-- 直和型&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Elm の型自身&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyVar&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETVar&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- 型変数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- コンストラクタ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 型適用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyTuple&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;       &lt;span class=&#34;co&#34;&gt;-- タプル型&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm での型定義の構文を表したのが &lt;code&gt;ETypeDef&lt;/code&gt; 型で，関数の型を書くときなどの型を表現する構文を表したのが &lt;code&gt;EType&lt;/code&gt; 型だ． &lt;code&gt;toElmType&lt;/code&gt; 関数を使うことで任意の型の &lt;code&gt;EType&lt;/code&gt; を &lt;code&gt;Typeable&lt;/code&gt; で機械的に導出したり，&lt;code&gt;deriveElmDef&lt;/code&gt; と TemplateHaskell で &lt;code&gt;ETypeDef&lt;/code&gt; への変換を導出することができる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toElmType ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ETypeDef への変換は型クラスで定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmDefinition&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  compileElmDef ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Hoge 型の IsElmDefinition 型クラスのインスタンスを導出&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;deriveElmDef defaultOptions &amp;#39;&lt;span class=&#34;dt&#34;&gt;&amp;#39;Hoge&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに &lt;code&gt;deriveElmDef&lt;/code&gt; の代わりに &lt;code&gt;deriveBoth&lt;/code&gt; を使うと aeson 系の型クラスのインスタンスも一緒に導出してくれる． そして &lt;code&gt;ETypeDef&lt;/code&gt; などに変換したあとは，&lt;code&gt;renderElm&lt;/code&gt; 関数や &lt;code&gt;makeElmModule&lt;/code&gt; 関数を使うことで Elm のコードに変換できる．&lt;/p&gt;
&lt;h3 id=&#34;都合の悪い部分&#34;&gt;都合の悪い部分&lt;/h3&gt;
&lt;p&gt;問題はどっちかというと servant-elm にある． servant-elm は Elm 関数の変換に内部で &lt;code&gt;toElmType&lt;/code&gt; 関数を使っている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasForeignType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  typeFor _ _ _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;getEndpoints ::&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;HasForeign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api, &lt;span class=&#34;dt&#34;&gt;GenerateList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Foreign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api))&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; api&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Req&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;getEndpoints &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; listFromAPI (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElm&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで，extensible パッケージの拡張可能レコード型に &lt;code&gt;toElmType&lt;/code&gt; を使ってみると…&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;amp;&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;gt;&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;id\&amp;quot;&amp;quot;&lt;/span&gt;}))) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;})))) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;:&amp;gt;&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\&amp;quot;name\&amp;quot;&amp;quot;&lt;/span&gt;}))) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;String&amp;quot;&lt;/span&gt;})))) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;[]&amp;quot;&lt;/span&gt;}))))) (&lt;span class=&#34;dt&#34;&gt;ETyApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Field&amp;quot;&lt;/span&gt;})) (&lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; {tc_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Identity&amp;quot;&lt;/span&gt;})))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは絶対に Elm 側で動かない… そもそも拡張可能レコードは型エイリアスで定義されているため型名の情報が落ちてしまうし，理想的には Elm のレコード型に変換してほしい．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ということで，extensible の拡張可能レコードでもうまく動作する薄いラッパーパッケージを作ることにした．&lt;/p&gt;
&lt;h2 id=&#34;elmap.hs-プロジェクト&#34;&gt;elmap.hs プロジェクト&lt;/h2&gt;
&lt;p&gt;elm-bridge と servant-elm には生成した &lt;code&gt;ETypeDef&lt;/code&gt; や &lt;code&gt;EType&lt;/code&gt; を再変換する関数を指定することができる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- servant-elm&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ElmOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ElmOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; urlPrefix             ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UrlPrefix&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; elmTypeAlterations    ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 生成した ETypes を変換しなおす&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; elmAlterations        ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeDef&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 生成した ETypeDef を変換しなおす&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; emptyResponseElmTypes ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; stringElmTypes        ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし，これで extensible の型を変換しなおすのは大変なので &lt;code&gt;toElmType&lt;/code&gt; のところから置き換える必要がある(そもそも型名の情報が落ちてしまっているし)．&lt;/p&gt;
&lt;h3 id=&#34;elmap-パッケージ&#34;&gt;elmap パッケージ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;toElmType&lt;/code&gt; が扱いにくい理由は，&lt;code&gt;Typeable&lt;/code&gt; 型クラスから自動で定義を導出されてしまうからだ． 多くの場合，自動で導出される方が嬉しいのだが，今回は型名の情報を与えたり Elm のレコード型に対応させたりなど，個別に対応したいので型クラスを利用することにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  compileElmType ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  compileElmType _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  compileElmType _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; toElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに，リネームを簡単に行いやすいようにリネームする関数を定義しておいた:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toElmTypeWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Typeable&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Elm の場合 `Order` という型名になっている&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  compileElmType _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; toElmTypeWith &lt;span class=&#34;st&#34;&gt;&amp;quot;Order&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;servant-elmap-パッケージ&#34;&gt;servant-elmap パッケージ&lt;/h3&gt;
&lt;p&gt;servant 側では elmap パッケージで定義した &lt;code&gt;IsElmType&lt;/code&gt; 型クラスを利用するようにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;HasForeignType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; a &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  typeFor _ _ _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; compileElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;getEndpoints ::&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;HasForeign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api, &lt;span class=&#34;dt&#34;&gt;GenerateList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Foreign&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt; api))&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; api&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Req&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;getEndpoints &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; listFromAPI (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LangElmap&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getEndpoints&lt;/code&gt; 関数を書き換えたので，この関数に依存している関数を全部置き換えた(ということをする必要があったのでフォークせずに薄いラッパーパッケージを作るようにした)．&lt;/p&gt;
&lt;h3 id=&#34;extensible-elmap-パッケージ&#34;&gt;extensible-elmap パッケージ&lt;/h3&gt;
&lt;p&gt;最後に，extensible の拡張可能レコード型に対して &lt;code&gt;IsElmType&lt;/code&gt; 型クラスのインスタンスを定義すれば完成． 完成品はこちら:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;compileElmRecordTypeWith ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; h xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;compileElmRecordTypeWith name _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; name&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;  compileElmType &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; compileElmRecordTypeWith &lt;span class=&#34;st&#34;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ElmType&lt;/code&gt; 自体は型名を覚えるだけなので簡単(とはいえ，この定義だと型変数などには未対応だが…)． さらに &lt;code&gt;IsElmDefinition&lt;/code&gt; 型クラスのインスタンスも定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;compileElmRecordAliasWith ::&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; xs h &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt;) xs&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;RecordOf&lt;/span&gt; h xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;compileElmRecordAliasWith name _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;  { ea_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeName&lt;/span&gt; name []&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;  , ea_fields &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; fields&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;  , ea_omit_null &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;  , ea_newtype &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;  , ea_unwrap_unary &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;    fields &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; henumerateFor&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;      (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;KeyTargetAre&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;KnownSymbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;      (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; xs)&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;      (\m acc &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (stringKeyOf m, compileElmType &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; proxyTargetOf m) &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; acc)&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;      []&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmDefinition&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;  compileElmDef &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeAlias&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; compileElmRecordAliasWith &lt;span class=&#34;st&#34;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多少ボイラーテンプレートができてしまったが，まぁ個人的には許容範囲．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-普通のレコードに対応する&#34;&gt;おまけ: 普通のレコードに対応する&lt;/h2&gt;
&lt;p&gt;僕はほとんど使わないからいいんだけど，普通のレコード型も &lt;code&gt;IsElmType&lt;/code&gt; に対応しやすいようなヘルパー関数を定義しておこう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toElmAlias ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Rep&lt;/span&gt; a), &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;toElmAlias proxy &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;  { ea_name &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeName&lt;/span&gt; (renderElm &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; compileElmType proxy) []&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;  , ea_fields &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Rep&lt;/span&gt; a))&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;  , ea_omit_null &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;  , ea_newtype &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;  , ea_unwrap_unary &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;rep ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  gcompileElmFields ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; rep &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [(&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;EType&lt;/span&gt;)]&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;    {&lt;span class=&#34;ot&#34;&gt; userId   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;    ,&lt;span class=&#34;ot&#34;&gt; userName ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;    } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Generic&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;  compileElmType _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETyCon&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETCon&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsElmDefinition&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Book&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;  compileElmDef &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ETypeAlias&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; toElmAlias&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toElmAlias&lt;/code&gt; 関数では，Haskell の総称プログラミング(Generics)という機能を利用している． Generics では Haskell 内での型や値のメタ情報を Haskell の型や値として取得できる． これと型クラスを組み合わせることで，型の構造毎に関数の実装を分岐することができる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- `M1 D` はデータ型を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;M1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; x a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- `M1 C` はコンストラクタを表現&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;M1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;C&lt;/span&gt; x a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- `M1 S` はレコードのセレクタを表現(`K1` はカインドの情報)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Selector&lt;/span&gt; x, &lt;span class=&#34;dt&#34;&gt;IsElmType&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;M1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;K1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;R&lt;/span&gt; a)) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [(selName (&lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S1&lt;/span&gt; x (&lt;span class=&#34;dt&#34;&gt;K1&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;R&lt;/span&gt; a) ()), compileElmType (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; a))]&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--- `:*:` は型の直積を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GIsElmFields&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; b) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; gcompileElmFields (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt; b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう少し簡単に解決する方法もあったような気もするけど，Haskell のメタプログラミングを色々味わえたのでまぁいいや． どうせ，僕ぐらいしか使わないだろうし(笑)&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html</id><title type="text">stack image コマンドなしに Haskell アプリの Docker イメージを作る</title><updated>2019-06-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;自分は Haskell アプリケーションの Docker イメージを作るのに &lt;code&gt;stack image&lt;/code&gt; コマンドを愛用している． しかし悲しいことに &lt;strong&gt;stack v2 からはこの機能が無くなってしまう&lt;/strong&gt; のだ． ということで代替方法を考えてみた，というお話．&lt;/p&gt;
&lt;h2 id=&#34;tldr&#34;&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;matsubara0507/whoami というリポジトリで試したので，その PR を見ると良い:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/whoami/pull/6&#34;&gt;Build docker image without stack image command by matsubara0507 · Pull Request #6 · matsubara0507/whoami&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結論としては stack の &lt;code&gt;--local-bin-path&lt;/code&gt; オプションと Docker Integration を使って Docker イメージ用の実行ファイルをワークディレクトリに置いて，&lt;code&gt;docker build&lt;/code&gt; でコピーしているだけ．&lt;/p&gt;
&lt;h2 id=&#34;stack-image-コマンド&#34;&gt;stack image コマンド&lt;/h2&gt;
&lt;p&gt;簡単に今は亡き &lt;code&gt;stack image&lt;/code&gt; コマンドを説明する． このコマンドは &lt;code&gt;stack image container&lt;/code&gt; というサブコマンドにより，stack.yaml の設定を元にして実行ファイルだけを含んだ Docker イメージを作ってくれる． &lt;code&gt;docker&lt;/code&gt; コマンドで普通にイメージを作るのと違い，&lt;code&gt;.stack-work&lt;/code&gt; のビルドキャッシュをホストマシンのローカルに保存し，利用してくれる． そのおかげで2回目以降のビルドも高速に行える(&lt;code&gt;stack&lt;/code&gt; による初回ビルドはとても時間がかかる…)．&lt;/p&gt;
&lt;p&gt;使い方は簡単で，次のようなのを stack.yaml に記述し &lt;code&gt;stack --docker image container&lt;/code&gt; とするだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/whoami&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/ubuntu-for-haskell:git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; の方の設定は Docker Integration と呼ばれるもので，&lt;code&gt;repo&lt;/code&gt; で設定したイメージのコンテナ内で stack のビルドをしてくれる(こいつがローカルの &lt;code&gt;.stack-work&lt;/code&gt; を利用する)． &lt;code&gt;image&lt;/code&gt; の方の設定が &lt;code&gt;stack image&lt;/code&gt; の設定で，&lt;code&gt;base&lt;/code&gt; が作成するイメージのベースイメージだ． やってることは実行ファイルを &lt;code&gt;.stack-work&lt;/code&gt; からコピーしてくるだけで，ベースイメージが Docker Integration のイメージと同じ OS であればちゃんと動作する．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;さて，冒頭に書いた通り，&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/c0c6510741a0f3e2f687a4fecf9b0ae625fca12a/ChangeLog.md#v2101-release-candidate&#34;&gt;&lt;strong&gt;この機能は stack の新しいバージョンでは無くなってしまう&lt;/strong&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove the stack image command. With the advent of Docker multistage builds, this functionality is no longer useful. For an example, please see Building Haskell Apps with Docker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;マルチステージビルドができたし，あんまりこれもう便利じゃないよね，とのこと． 代わりに「&lt;a href=&#34;https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker&#34;&gt;Building Haskell Apps with Docker&lt;/a&gt;」という記事を読むと良いらしい．&lt;/p&gt;
&lt;h2 id=&#34;マルチステージビルドする&#34;&gt;マルチステージビルドする&lt;/h2&gt;
&lt;p&gt;上記リンクではマルチステージビルドを使えと書いてある． 多分こんな感じ(試してない):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; fpco/stack-build:lts-13.21 as bin&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/work&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; . /root/work&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; cd /root/work &amp;amp;&amp;amp; stack install --system-ghc&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /root/work&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; --from=bin /root/.local/bin /root/.local/bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stack の Docker Integration は残ってるので &lt;code&gt;stack --docker build&lt;/code&gt; とすることで Docker コンテナ内でのビルド自体は実行される(これによってローカルにキャッシュが作られる)． 一つ目のステージでは &lt;code&gt;stack install&lt;/code&gt; により &lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルを &lt;code&gt;/root/.local/bin&lt;/code&gt; にコピーし，二つ目のステージではさらにこの実行ファイルだけを最終的に作られるイメージにコピーしている． ちなみに，&lt;code&gt;/root/.local/bin&lt;/code&gt; は stack が決めてるローカル実行ファイルを置くパスで，&lt;code&gt;stack path&lt;/code&gt; で確認できる(OS によって違うはず)．&lt;/p&gt;
&lt;p&gt;でもこれ一つ欠点があって． &lt;code&gt;docker build&lt;/code&gt; するときに，肥大化しがちな &lt;code&gt;.stack-work&lt;/code&gt; をいちいち上げる必要があるので，だんだん &lt;code&gt;docker build&lt;/code&gt; の時間が長くなる(最近作ってたアプリケーションは4GBになってしまって…)． &lt;code&gt;.dockerignore&lt;/code&gt; で無視できれば良いのだが，それだと &lt;code&gt;stack insatll&lt;/code&gt; できない(&lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルのパスは resolver や GHC のバージョンなどで変わるので，これをイチイチ &lt;code&gt;.dockerignore&lt;/code&gt; に書くのはめんどくさい)．&lt;/p&gt;
&lt;h2 id=&#34;local-bin-path-オプション&#34;&gt;local-bin-path オプション&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt; する時は &lt;code&gt;.stack-work&lt;/code&gt; を無視したい． じゃぁどうするか． 一つ目のステージでやっているのは既に出来上がった実行ファイルを &lt;code&gt;stack install&lt;/code&gt; を使って分かりやすいパスに持ってきてるだけだ． そこで気づく，それを上書きするオプションがあるのではないかと． あった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/commercialhaskell/stack/issues/730&#34;&gt;Specify local-bin-path · Issue #730 · commercialhaskell/stack · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;stack --local-bin-path=any_path install&lt;/code&gt; とすることで任意のパスに実行ファイルをコピーできる！ 知らなかった． あとはここから &lt;code&gt;docker build&lt;/code&gt; で実行ファイルコピーしてくるように Dockerfile を書くだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;WORKDIR&lt;/span&gt; /root/work&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;COPY&lt;/span&gt; ${local_bin_path} /root/.local/bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ARG&lt;/code&gt; を使ったので次のように &lt;code&gt;docker build&lt;/code&gt; コマンドのオプションで指定する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --local-bin-path=./bin --docker install
$ docker build -t matsubara0507/whoami . --build-arg local_bin_path=./bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いい感じ！ もちろん &lt;code&gt;.dockerignore&lt;/code&gt; に &lt;code&gt;.stack-work&lt;/code&gt; が書いてあるのでイメージのビルドも速い．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;これで心置き無く新しい stack のバージョンを使うことができる．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html</id><title type="text">rio + extensible なフレームワーク: mix</title><updated>2019-05-27T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;最近はよく &lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; + &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; で Haskell アプリケーションを書きます(趣味の)． 前々から何となくパターン化できそうだなぁと思っていたのが，それをついにパターン化し mix パッケージとして形にしましたというお話です．&lt;/p&gt;
&lt;p&gt;ちなみに，それぞれのパッケージを軽く説明すると:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rio : Haskell のビルドツール Stack を開発しているチームが作っている Reader パターンをベースにした Alt. Prelude&lt;/li&gt;
&lt;li&gt;extensible : 拡張可能レコードを始めとして様々な拡張可能なデータ構造を同一の形式で利用できるようになるパッケージ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mix-パッケージ&#34;&gt;mix パッケージ&lt;/h2&gt;
&lt;p&gt;リポジトリはこれ:&lt;/p&gt;
&lt;h5 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;183&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/mix.hs&#34;&gt;&lt;/iframe&gt;&lt;/h5&gt;
&lt;p&gt;mix パッケージの目的は rio パッケージの &lt;code&gt;RIO env a&lt;/code&gt; モナドの &lt;code&gt;env&lt;/code&gt; の部分を extensible パッケージを用いて簡単に構築することであり，&lt;code&gt;env&lt;/code&gt; をプラグインとして構築する． プラグインで構築という部分は &lt;a href=&#34;https://hackage.haskell.org/package/tonatona&#34;&gt;tonatona&lt;/a&gt; から着想を得た(tonatona も rio のラッパーパッケージなはず)． 例えば，&lt;code&gt;rio&lt;/code&gt; パッケージのロガーを利用して次のような簡易的なプログラムをかける:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Mix&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  name &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name)&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;  MixLogger.logDebug &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is debug: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;  MixLogger.logInfo  &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34;&gt;&lt;/a&gt;  MixLogger.logWarn  &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is warn: &amp;quot;&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34;&gt;&lt;/a&gt;  MixLogger.logError &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is error: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34;&gt;&lt;/a&gt;    plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name   &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Hoge&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tonatona との違いは &lt;code&gt;RIO env a&lt;/code&gt; の &lt;code&gt;env&lt;/code&gt; に当たる部分に対して，特別なインスタンス宣言がいらない点だ． 単純に，設定っぽい extensible の拡張可能レコード(&lt;code&gt;#logger &amp;lt;@=&amp;gt; ...&lt;/code&gt; とか)を記述するだけで良い． これの実行結果は次のようになる:&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code&gt;$ stack runghc mix/sample/Main.hs
2019-05-21 22:33:49.378471: [debug] This is debug: Hoge
@(mix/sample/Main.hs:23:3)
2019-05-21 22:33:49.381893: [info] This is info: Hoge
@(mix/sample/Main.hs:24:3)
2019-05-21 22:33:49.381943: [warn] This is warn: Hoge
@(mix/sample/Main.hs:25:3)
2019-05-21 22:33:49.382005: [error] This is error: Hoge
@(mix/sample/Main.hs:26:3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なぜ mix ではインスタンス宣言などせずに自由にプラグインのオンオフや設定のカスタマイズをすることができるのだろうか？ 言わずもがな，&lt;code&gt;extensible&lt;/code&gt; の魔法によるものである．&lt;/p&gt;
&lt;h3 id=&#34;extensible-の魔法&#34;&gt;extensible の魔法&lt;/h3&gt;
&lt;p&gt;もっとも鬼門になったのは rio のロガーだ． rio のロガーは次のように利用する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; logFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  opt &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  withLogFunc opt &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \logFunc &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; runRIO &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;{&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;    logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;    logDebug &lt;span class=&#34;st&#34;&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;withLogFunc opt&lt;/code&gt; の型は &lt;code&gt;MonadUnliftIO m =&amp;gt; (LogFunc -&amp;gt; m a) -&amp;gt; m a&lt;/code&gt; となっている． なぜこのような形になっているのかの秘密は(たぶん) &lt;code&gt;MonadUnliftIO&lt;/code&gt; にあるのだが今回は割愛する． この型，よく見ると継続になっているのがわかるだろうか？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;withLogFunc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadUnliftIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LogOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;LogFunc&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 継続(Continuation)のモナドトランスフォーム仕様の型&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; r m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; runContT ::&lt;/span&gt; ((a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;継続は &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンスなのでモナディックに扱える． そして，extensible の拡張可能レコードの特徴として &lt;strong&gt;レコードのフィールドをモナディックに走査できる！&lt;/strong&gt; というのがある(正確には &lt;code&gt;Applicative&lt;/code&gt; ですが)． 例えば &lt;a href=&#34;http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Product.html#v:hsequence&#34;&gt;&lt;code&gt;hsequence&lt;/code&gt;&lt;/a&gt; という関数が走査する関数だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;hsequence ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Comp&lt;/span&gt; f h &lt;span class=&#34;op&#34;&gt;:*&lt;/span&gt; xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (h &lt;span class=&#34;op&#34;&gt;:*&lt;/span&gt; xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;Plugin&lt;/code&gt; という型はただの継続で，&lt;code&gt;Mix.run plugin&lt;/code&gt; は単純に &lt;code&gt;runContT&lt;/code&gt; した中で &lt;code&gt;runRIO env action&lt;/code&gt; しているだけだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; a m env&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadIO&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; env a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;run plugin act &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;`runRIO`&lt;/span&gt; act) &lt;span class=&#34;ot&#34;&gt;`withPlugin`&lt;/span&gt; plugin&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;withPlugin ::&lt;/span&gt; (env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;withPlugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; runContT&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;toPlugin ::&lt;/span&gt; ((env &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; a m env&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;toPlugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思いついてしまえば極めて簡単な仕組みだ(なおパフォーマンスについては特に考えていません)．&lt;/p&gt;
&lt;h2 id=&#34;プラグイン&#34;&gt;プラグイン&lt;/h2&gt;
&lt;p&gt;プラグインと言ったもののただの継続だ． 今あるのは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logger&lt;/li&gt;
&lt;li&gt;Config&lt;/li&gt;
&lt;li&gt;API Client (GitHub, Drone)&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だけで，ちょうど最近作ってたOSSで必要になった分だけ． そのうちDB系のやつを作ってもいいかもしれない． これらは全て mix と同じリポジトリに置いてある．&lt;/p&gt;
&lt;h3 id=&#34;logger-と-config&#34;&gt;Logger と Config&lt;/h3&gt;
&lt;p&gt;この2つは mix ライブラリに入っている． Logger は上記に載せた rio の Logger のラッパー． Config というのは設定ファイルを指しているつもり． &lt;code&gt;&amp;quot;config&amp;quot;&lt;/code&gt; フィールドと任意の型と紐づかせている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Config&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixConfig&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;  config &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixConfig.askConfig&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;  MixLogger.logInfo &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; config &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name)&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;    plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;config &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;name &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id=&#34;cb7-22&#34;&gt;&lt;a href=&#34;#cb7-22&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Config は試しに作ってみたけど，いまいち使い道がない．&lt;/p&gt;
&lt;h3 id=&#34;api-client&#34;&gt;API Client&lt;/h3&gt;
&lt;p&gt;API クライアントを利用するのに必要な情報(API トークンなど)を &lt;code&gt;env&lt;/code&gt; に載せて，クライアントを利用するときにほんの少しだけ簡単に利用できるプラグイン． GitHub と &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; のものを作った． GitHub のクライアントは &lt;a href=&#34;https://hackage.haskell.org/package/github&#34;&gt;github&lt;/a&gt; パッケージを Drone のクライアントは(僕が作った) &lt;a href=&#34;https://hackage.haskell.org/package/drone&#34;&gt;drone&lt;/a&gt; パッケージを使う． 各プラグインのパッケージは &lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github&#34;&gt;mix-plugin-github&lt;/a&gt; と &lt;a href=&#34;https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-drone&#34;&gt;mix-plugin-drone&lt;/a&gt; として matsubara0507/mix.hs リポジトリに置いてある．&lt;/p&gt;
&lt;p&gt;こんな感じに使える:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Drone&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub.Endpoints.Users&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Drone&lt;/span&gt;       &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixDrone&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.GitHub&lt;/span&gt;      &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt;           &lt;span class=&#34;dt&#34;&gt;System.Environment&lt;/span&gt;     (getEnv)&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixGitHub.Token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;drone&amp;quot;&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixDrone.Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;  gToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;GH_TOKEN&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;  dHost  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;DRONE_HOST&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;  dToken &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; fromString &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class=&#34;st&#34;&gt;&amp;quot;DRONE_TOKEN&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; logConf &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;      dClient &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;host &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; dHost &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;port &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;token &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; dToken &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;      plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logConf&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;github &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixGitHub.buildPlugin gToken&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;drone  &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixDrone.buildPlugin dClient &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;  &lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;  Mix.run plugin app&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;RIO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb8-29&#34;&gt;&lt;a href=&#34;#cb8-29&#34;&gt;&lt;/a&gt;app &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-30&#34;&gt;&lt;a href=&#34;#cb8-30&#34;&gt;&lt;/a&gt;  MixLogger.logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch GitHub user info:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-31&#34;&gt;&lt;a href=&#34;#cb8-31&#34;&gt;&lt;/a&gt;  resp &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixGitHub.fetch GitHub.userInfoCurrent&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb8-32&#34;&gt;&lt;a href=&#34;#cb8-32&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; resp &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-33&#34;&gt;&lt;a href=&#34;#cb8-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class=&#34;st&#34;&gt;&amp;quot;GitHub fetch error....&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-34&#34;&gt;&lt;a href=&#34;#cb8-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; ghLogin user &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-35&#34;&gt;&lt;a href=&#34;#cb8-35&#34;&gt;&lt;/a&gt;  MixLogger.logInfo &lt;span class=&#34;st&#34;&gt;&amp;quot;fetch Drone user info:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-36&#34;&gt;&lt;a href=&#34;#cb8-36&#34;&gt;&lt;/a&gt;  tryAny (responseBody &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; MixDrone.fetch Drone.getSelf) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-37&#34;&gt;&lt;a href=&#34;#cb8-37&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class=&#34;st&#34;&gt;&amp;quot;Drone CI fetch error...&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-38&#34;&gt;&lt;a href=&#34;#cb8-38&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; user &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; display (&lt;span class=&#34;st&#34;&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; user &lt;span class=&#34;op&#34;&gt;^.&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;login &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-39&#34;&gt;&lt;a href=&#34;#cb8-39&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-40&#34;&gt;&lt;a href=&#34;#cb8-40&#34;&gt;&lt;/a&gt;    ghLogin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; GitHub.untagName &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; GitHub.userLogin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行するとこんな感じ:&lt;/p&gt;
&lt;pre class=&#34;code&#34;&gt;&lt;code&gt;$ GH_TOKEN=xxx DRONE_HOST=cloud.drone.io DRONE_TOKEN=yyy stack runghc -- Main.hs
fetch GitHub user info:
Hi matsubara0507!!
fetch Drone user info:
Hi matsubara0507!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本来は &lt;code&gt;env&lt;/code&gt; を &lt;code&gt;Reader&lt;/code&gt; モナドから取ってきて使うのを省いているだけなので，まぁ対して変わらない． 試しに実験的に作ってみただけ． インターフェースを揃えるとか，もう少し手を加えてもいいかもしれない．&lt;/p&gt;
&lt;h3 id=&#34;shell-コマンド&#34;&gt;Shell コマンド&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/shelly&#34;&gt;shelly&lt;/a&gt; というパッケージを利用したシェルコマンドの実行を支援する． &lt;code&gt;env&lt;/code&gt; にはシェルコマンドを実行したいパスを保存し，与えたシェルコマンドを &lt;code&gt;cd&lt;/code&gt; した上で実行してくれる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mix.Plugin.Shell&lt;/span&gt;  &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixShell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shelly&lt;/span&gt;            &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class=&#34;st&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;   , &lt;span class=&#34;st&#34;&gt;&amp;quot;work&amp;quot;&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; Mix.run plugin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;  paths &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; MixShell.exec &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Shell.ls &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;  forM_ paths &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \path &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; MixLogger.logInfo (display &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Shell.toTextIgnore path)&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;    plugin ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plugin&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Env&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;    plugin &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;logger &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;handle &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; stdout &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;verbose &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;work   &lt;span class=&#34;op&#34;&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;過去のツールをこれで mix で置き換えていきたい2019です． ちなみにパッケージの名前は現在(2019/5)所属してる社名から(せっかく入社したならって気分)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html</id><title type="text">Drone Plugin を作ってみた: slack-notify-log</title><updated>2019-05-26T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;とある事情で Drone CI のビルドログを Slack にスニペットとして通知したくなった． 公式の &lt;a href=&#34;https://github.com/drone-plugins/drone-slack&#34;&gt;&lt;code&gt;plugin/slack&lt;/code&gt;&lt;/a&gt; では出来なそうだったので，Plugin を自作した，というお話．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/drone-slack-notify-log&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;色々調べてみたものの，同じビルド中の別のステップでのログを取得する方法がわからなかった… ので，最終手段として Drone API を使って引っ張ってくる方法をとった． ほぼほぼドキュメントは無いが，Drone API は &lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone/drone-go&lt;/a&gt; を使うことで簡単に呼び出すことができる． ざっくりと次のような感じで呼び出している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/drone/drone-go/drone&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/pkg/errors&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;	log &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;st&#34;&gt;&amp;quot;golang.org/x/oauth2&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  config := &lt;span class=&#34;bu&#34;&gt;new&lt;/span&gt;(oauth2.Config)&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;  client := drone.NewClient(&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;    p.Config.DroneHost,&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;    config.Client(&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;      context.Background(),&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;      &amp;amp;oauth2.Token{&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;        AccessToken: p.Config.DroneToken,&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34;&gt;&lt;/a&gt;      },&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34;&gt;&lt;/a&gt;    ),&lt;/span&gt;
&lt;span id=&#34;cb1-21&#34;&gt;&lt;a href=&#34;#cb1-21&#34;&gt;&lt;/a&gt;  )&lt;/span&gt;
&lt;span id=&#34;cb1-22&#34;&gt;&lt;a href=&#34;#cb1-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-23&#34;&gt;&lt;a href=&#34;#cb1-23&#34;&gt;&lt;/a&gt;  logs, err := client.Logs(p.Repo.Owner, p.Repo.Name, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/span&gt;
&lt;span id=&#34;cb1-24&#34;&gt;&lt;a href=&#34;#cb1-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb1-25&#34;&gt;&lt;a href=&#34;#cb1-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;can&amp;#39;t fetch drone logs: builds/%d/logs/%d/%d&amp;quot;&lt;/span&gt;, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/span&gt;
&lt;span id=&#34;cb1-26&#34;&gt;&lt;a href=&#34;#cb1-26&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb1-27&#34;&gt;&lt;a href=&#34;#cb1-27&#34;&gt;&lt;/a&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Success: fetch drone logs (lines num is %d)&amp;quot;&lt;/span&gt;, &lt;span class=&#34;bu&#34;&gt;len&lt;/span&gt;(logs))&lt;/span&gt;
&lt;span id=&#34;cb1-28&#34;&gt;&lt;a href=&#34;#cb1-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-29&#34;&gt;&lt;a href=&#34;#cb1-29&#34;&gt;&lt;/a&gt;  ...&lt;/span&gt;
&lt;span id=&#34;cb1-30&#34;&gt;&lt;a href=&#34;#cb1-30&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，実際の Plugin の使い方はこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; notify drone log to slack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/slack-notify-log&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;    template&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;      {{#success build.status}}&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;        {{repo.name}} is Success!&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;      {{else}}&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;        {{repo.name}} is Failure...&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;      {{/success}}&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;token&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;from_secret&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; slack_token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bot-test&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;step_number&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;drone_host&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;from_secret&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone_host&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;drone_token&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;from_secret&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone_token&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; success&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; failure&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各 &lt;code&gt;settings&lt;/code&gt; は:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; : スニペットのコメント&lt;/li&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt; : slack にポストするための API トークン
&lt;ul&gt;
&lt;li&gt;個人トークンや &lt;a href=&#34;https://slack.com/apps/A0F7YS25R-bots&#34;&gt;Bots App&lt;/a&gt; などから生成する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;channel&lt;/code&gt; : 通知先チャンネル
&lt;ul&gt;
&lt;li&gt;無駄にテンプレートを利用できるようにした(ブランチやビルド結果によって通知先を変えるため)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step_number&lt;/code&gt; : 何ステップ目のログを通知したいか
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;step_number: 1&lt;/code&gt; は git clone になる点に注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_host&lt;/code&gt; : この CI を実行したい Drone のホスト
&lt;ul&gt;
&lt;li&gt;別にシークレットにする必要はないけど&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://cloud.drone.io&lt;/code&gt; とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_token&lt;/code&gt; : この CI を実行したい Drone の API トークン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行結果はこんな感じ:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/create-drone-slack-notify-log/example.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;これは matsubara0507/drone-slack-notify-log のビルドステップ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;なんか他に良い方法が絶対にある気がするんだけどな…&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html</id><title type="text">Ruby のパターンマッチング機能を MinRuby で試す</title><updated>2019-05-16T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Ruby 2.7 で導入予定で，すでに &lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;Ruby リポジトリ&lt;/a&gt;の trunk (いわゆる master ブランチのこと) にマージ済みの「パターンマッチング」機能を試してみたので，そのメモ書きです． 特に包括的に検証したわけではないので注意してください．&lt;/p&gt;
&lt;h2 id=&#34;パターンマッチング&#34;&gt;パターンマッチング&lt;/h2&gt;
&lt;p&gt;(わざわざ解説することでもないけど)&lt;/p&gt;
&lt;p&gt;パターンマッチングは &lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文のようなプログラムの分岐に使うプログラミング機能． &lt;code&gt;if&lt;/code&gt; 文が真偽値を返す条件式 (e.g. &lt;code&gt;a &amp;gt; 0 &amp;amp;&amp;amp; x == &amp;#39;hoge&amp;#39;&lt;/code&gt;) の結果により分岐し，&lt;code&gt;case&lt;/code&gt; 文が指定した変数の値によって分岐するのに対し，パターンマッチングは指定した変数のデータ構造によって分岐する．&lt;/p&gt;
&lt;p&gt;例えば Ruby に導入されたパターンマッチングだと次のようになる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; var &lt;span class=&#34;co&#34;&gt;# var のデータ構造により分岐&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is empty list&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [a]&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is singleton: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;a&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 変数 a に値を代入する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;:hoge&lt;/span&gt;, a, b]&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;var is hoge list: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;[a, b]&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# 一要素目が :hoge の3要素リスト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  puts &lt;span class=&#34;st&#34;&gt;&amp;quot;No match: &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;var&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;# else はどれにもマッチしないとき&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにデータ構造(例えば配列の要素数など)によって分岐かつ変数への代入が可能になる． パターンマッチングは様々なデータを扱うようなプログラミングを行う時に極めて簡潔にかつ直感的にプログラムを記述することができる．&lt;/p&gt;
&lt;p&gt;ちなみに，パターンマッチングがあれば基本的に &lt;code&gt;if&lt;/code&gt; 文も &lt;code&gt;case&lt;/code&gt; 文も要らない． どちらもパターンマッチングの糖衣構文として表現でき，現に Haskell ではそうなっている(たぶん)．&lt;/p&gt;
&lt;h3 id=&#34;ruby-のパターンマッチング&#34;&gt;Ruby のパターンマッチング&lt;/h3&gt;
&lt;p&gt;ちょこちょこ既に記事があるが，RubyKaigi 2019 でも作者からの発表があり参考になる:&lt;/p&gt;
&lt;iframe class=&#34;embedly-embed&#34; src=&#34;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fspeakerdeck.com%2Fplayer%2Fa853a73bba9d48ae88860f7c9b068334&amp;amp;url=https%3A%2F%2Fspeakerdeck.com%2Fk_tsj%2Fpattern-matching-new-feature-in-ruby-2-dot-7&amp;amp;image=https%3A%2F%2Fspeakerd.s3.amazonaws.com%2Fpresentations%2Fa853a73bba9d48ae88860f7c9b068334%2Fslide_0.jpg%3F510667&amp;amp;key=internal&amp;amp;type=text%2Fhtml&amp;amp;schema=speakerdeck&#34; width=&#34;500&#34; height=&#34;299&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; fullscreen&#34; allowfullscreen=&#34;true&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;すでに &lt;a href=&#34;https://www.youtube.com/watch?v=paBlgsqoKk8&#34;&gt;YouTube で動画も公開された&lt;/a&gt;． ちなみに，2012 ぐらいからずっと作っていたらしい．&lt;/p&gt;
&lt;p&gt;Elixir のピンパターン(&lt;code&gt;^var&lt;/code&gt;)など，数多くのパターンマッチング機能がある(後発の利点ですね)． ただし，変数のスコープが個人的には思ってたのと違った:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;001&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;002&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [a, &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;] &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p a&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;003&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; [b, c] &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p c&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;004&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&amp;gt; &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;=&amp;gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;irb(main):&lt;span class=&#34;dv&#34;&gt;005&lt;/span&gt;:&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&amp;gt; [a,b,c]&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;=&amp;gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;in ..&lt;/code&gt; ごとにスコープは閉じてるのが一般的な気がするけど Ruby でそれは難しいのだろうか(&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文でもこんな感じの挙動)．&lt;/p&gt;
&lt;h2 id=&#34;試す&#34;&gt;試す&lt;/h2&gt;
&lt;h3 id=&#34;ruby2.7-dev&#34;&gt;Ruby2.7-dev&lt;/h3&gt;
&lt;p&gt;前述した通り，パターンマッチングは trunk にマージされているので Ruby2.7-dev で試すことができる． trunk を試す方法はいくつかあると思うが，僕は手っ取り早く &lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt; を使った．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rbenv install 2.7.0-dev&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;minruby&#34;&gt;MinRuby&lt;/h3&gt;
&lt;p&gt;パターンマッチングを試す対象として，「&lt;a href=&#34;https://ascii.jp/elem/000/001/230/1230449/&#34;&gt;Ruby で学ぶ Ruby&lt;/a&gt;」という連載で作っている，かなり簡易的な Ruby のサブセット処理系 MinRuby を利用する．&lt;/p&gt;
&lt;p&gt;最終的な処理系は &lt;a href=&#34;https://github.com/matsubara0507/MinRuby.rb/blob/dbe9891f916877fc3c260135696f48344bceb98a/interp.rb&#34;&gt;Ruby コード一枚&lt;/a&gt;でできている(一番めんどくさい構文解析を &lt;a href=&#34;https://github.com/ruby/ruby/tree/970a25b10415bc3735e6e3c165e167e6abc3d7f4/ext/ripper&#34;&gt;ripper&lt;/a&gt; とそのラッパー &lt;a href=&#34;https://github.com/mame/minruby&#34;&gt;minruby&lt;/a&gt; というのに任せているので):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# interp.rb&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;require &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; tree[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;    tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) + evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) - evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) * evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) / evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) % evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;lt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;lt;= evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) == evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) != evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;gt;= evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;    evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv) &amp;gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;    last = &lt;span class=&#34;dv&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i]&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;      last = evaluate(tree[i], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-36&#34;&gt;&lt;a href=&#34;#cb4-36&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-37&#34;&gt;&lt;a href=&#34;#cb4-37&#34;&gt;&lt;/a&gt;    last&lt;/span&gt;
&lt;span id=&#34;cb4-38&#34;&gt;&lt;a href=&#34;#cb4-38&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-39&#34;&gt;&lt;a href=&#34;#cb4-39&#34;&gt;&lt;/a&gt;    lenv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]] = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-40&#34;&gt;&lt;a href=&#34;#cb4-40&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-41&#34;&gt;&lt;a href=&#34;#cb4-41&#34;&gt;&lt;/a&gt;    lenv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-42&#34;&gt;&lt;a href=&#34;#cb4-42&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-43&#34;&gt;&lt;a href=&#34;#cb4-43&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-44&#34;&gt;&lt;a href=&#34;#cb4-44&#34;&gt;&lt;/a&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-45&#34;&gt;&lt;a href=&#34;#cb4-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-46&#34;&gt;&lt;a href=&#34;#cb4-46&#34;&gt;&lt;/a&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-47&#34;&gt;&lt;a href=&#34;#cb4-47&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-48&#34;&gt;&lt;a href=&#34;#cb4-48&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-49&#34;&gt;&lt;a href=&#34;#cb4-49&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-50&#34;&gt;&lt;a href=&#34;#cb4-50&#34;&gt;&lt;/a&gt;      evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-51&#34;&gt;&lt;a href=&#34;#cb4-51&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-52&#34;&gt;&lt;a href=&#34;#cb4-52&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-53&#34;&gt;&lt;a href=&#34;#cb4-53&#34;&gt;&lt;/a&gt;    genv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]] = [&lt;span class=&#34;st&#34;&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-54&#34;&gt;&lt;a href=&#34;#cb4-54&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-55&#34;&gt;&lt;a href=&#34;#cb4-55&#34;&gt;&lt;/a&gt;    args = []&lt;/span&gt;
&lt;span id=&#34;cb4-56&#34;&gt;&lt;a href=&#34;#cb4-56&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-57&#34;&gt;&lt;a href=&#34;#cb4-57&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-58&#34;&gt;&lt;a href=&#34;#cb4-58&#34;&gt;&lt;/a&gt;      args[i] = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-59&#34;&gt;&lt;a href=&#34;#cb4-59&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-60&#34;&gt;&lt;a href=&#34;#cb4-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-61&#34;&gt;&lt;a href=&#34;#cb4-61&#34;&gt;&lt;/a&gt;    mhd = genv[tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb4-62&#34;&gt;&lt;a href=&#34;#cb4-62&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; mhd[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-63&#34;&gt;&lt;a href=&#34;#cb4-63&#34;&gt;&lt;/a&gt;      minruby_call(mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], args)&lt;/span&gt;
&lt;span id=&#34;cb4-64&#34;&gt;&lt;a href=&#34;#cb4-64&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-65&#34;&gt;&lt;a href=&#34;#cb4-65&#34;&gt;&lt;/a&gt;      new_lenv = {}&lt;/span&gt;
&lt;span id=&#34;cb4-66&#34;&gt;&lt;a href=&#34;#cb4-66&#34;&gt;&lt;/a&gt;      params = mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-67&#34;&gt;&lt;a href=&#34;#cb4-67&#34;&gt;&lt;/a&gt;      i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-68&#34;&gt;&lt;a href=&#34;#cb4-68&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; params[i]&lt;/span&gt;
&lt;span id=&#34;cb4-69&#34;&gt;&lt;a href=&#34;#cb4-69&#34;&gt;&lt;/a&gt;        new_lenv[params[i]] = args[i]&lt;/span&gt;
&lt;span id=&#34;cb4-70&#34;&gt;&lt;a href=&#34;#cb4-70&#34;&gt;&lt;/a&gt;        i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-71&#34;&gt;&lt;a href=&#34;#cb4-71&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-72&#34;&gt;&lt;a href=&#34;#cb4-72&#34;&gt;&lt;/a&gt;      evaluate(mhd[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-73&#34;&gt;&lt;a href=&#34;#cb4-73&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-74&#34;&gt;&lt;a href=&#34;#cb4-74&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-75&#34;&gt;&lt;a href=&#34;#cb4-75&#34;&gt;&lt;/a&gt;    ary = []&lt;/span&gt;
&lt;span id=&#34;cb4-76&#34;&gt;&lt;a href=&#34;#cb4-76&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-77&#34;&gt;&lt;a href=&#34;#cb4-77&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-78&#34;&gt;&lt;a href=&#34;#cb4-78&#34;&gt;&lt;/a&gt;      ary[i] = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-79&#34;&gt;&lt;a href=&#34;#cb4-79&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-80&#34;&gt;&lt;a href=&#34;#cb4-80&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-81&#34;&gt;&lt;a href=&#34;#cb4-81&#34;&gt;&lt;/a&gt;    ary&lt;/span&gt;
&lt;span id=&#34;cb4-82&#34;&gt;&lt;a href=&#34;#cb4-82&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-83&#34;&gt;&lt;a href=&#34;#cb4-83&#34;&gt;&lt;/a&gt;    ary = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-84&#34;&gt;&lt;a href=&#34;#cb4-84&#34;&gt;&lt;/a&gt;    idx = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-85&#34;&gt;&lt;a href=&#34;#cb4-85&#34;&gt;&lt;/a&gt;    ary[idx]&lt;/span&gt;
&lt;span id=&#34;cb4-86&#34;&gt;&lt;a href=&#34;#cb4-86&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-87&#34;&gt;&lt;a href=&#34;#cb4-87&#34;&gt;&lt;/a&gt;    ary = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-88&#34;&gt;&lt;a href=&#34;#cb4-88&#34;&gt;&lt;/a&gt;    idx = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-89&#34;&gt;&lt;a href=&#34;#cb4-89&#34;&gt;&lt;/a&gt;    val = evaluate(tree[&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-90&#34;&gt;&lt;a href=&#34;#cb4-90&#34;&gt;&lt;/a&gt;    ary[idx] = val&lt;/span&gt;
&lt;span id=&#34;cb4-91&#34;&gt;&lt;a href=&#34;#cb4-91&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-92&#34;&gt;&lt;a href=&#34;#cb4-92&#34;&gt;&lt;/a&gt;    hsh = {}&lt;/span&gt;
&lt;span id=&#34;cb4-93&#34;&gt;&lt;a href=&#34;#cb4-93&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-94&#34;&gt;&lt;a href=&#34;#cb4-94&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb4-95&#34;&gt;&lt;a href=&#34;#cb4-95&#34;&gt;&lt;/a&gt;      key = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-96&#34;&gt;&lt;a href=&#34;#cb4-96&#34;&gt;&lt;/a&gt;      val = evaluate(tree[i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb4-97&#34;&gt;&lt;a href=&#34;#cb4-97&#34;&gt;&lt;/a&gt;      hsh[key] = val&lt;/span&gt;
&lt;span id=&#34;cb4-98&#34;&gt;&lt;a href=&#34;#cb4-98&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-99&#34;&gt;&lt;a href=&#34;#cb4-99&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-100&#34;&gt;&lt;a href=&#34;#cb4-100&#34;&gt;&lt;/a&gt;    hsh&lt;/span&gt;
&lt;span id=&#34;cb4-101&#34;&gt;&lt;a href=&#34;#cb4-101&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-102&#34;&gt;&lt;a href=&#34;#cb4-102&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-103&#34;&gt;&lt;a href=&#34;#cb4-103&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-104&#34;&gt;&lt;a href=&#34;#cb4-104&#34;&gt;&lt;/a&gt;str = minruby_load()&lt;/span&gt;
&lt;span id=&#34;cb4-105&#34;&gt;&lt;a href=&#34;#cb4-105&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-106&#34;&gt;&lt;a href=&#34;#cb4-106&#34;&gt;&lt;/a&gt;tree = minruby_parse(str)&lt;/span&gt;
&lt;span id=&#34;cb4-107&#34;&gt;&lt;a href=&#34;#cb4-107&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-108&#34;&gt;&lt;a href=&#34;#cb4-108&#34;&gt;&lt;/a&gt;genv = {&lt;/span&gt;
&lt;span id=&#34;cb4-109&#34;&gt;&lt;a href=&#34;#cb4-109&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id=&#34;cb4-110&#34;&gt;&lt;a href=&#34;#cb4-110&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;require&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id=&#34;cb4-111&#34;&gt;&lt;a href=&#34;#cb4-111&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id=&#34;cb4-112&#34;&gt;&lt;a href=&#34;#cb4-112&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id=&#34;cb4-113&#34;&gt;&lt;a href=&#34;#cb4-113&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id=&#34;cb4-114&#34;&gt;&lt;a href=&#34;#cb4-114&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb4-115&#34;&gt;&lt;a href=&#34;#cb4-115&#34;&gt;&lt;/a&gt;lenv = {}&lt;/span&gt;
&lt;span id=&#34;cb4-116&#34;&gt;&lt;a href=&#34;#cb4-116&#34;&gt;&lt;/a&gt;evaluate(tree, genv, lenv)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コードを見て分かるように(?)，配列の一引数目のリテラルで &lt;code&gt;case&lt;/code&gt; 文による分岐をし，分岐先で配列の要素を引っ張っている． このようにデータ構造 + &lt;code&gt;case&lt;/code&gt; 文による分岐はパターンマッチングにうってつけのユースケースだ．&lt;/p&gt;
&lt;h3 id=&#34;minruby-パターンマッチング&#34;&gt;MinRuby + パターンマッチング&lt;/h3&gt;
&lt;p&gt;作業リポジトリはこれ:&lt;/p&gt;
&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/MinRuby.rb&#34;&gt;
&lt;/iframe&gt;
&lt;p&gt;&lt;code&gt;pattern-match&lt;/code&gt; というブランチにパターンマッチングで書き換えたコードがある． パターンマッチングで書き換えたのは &lt;code&gt;evaluate&lt;/code&gt; 関数だけなのでそこだけ載せる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; tree&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;, lit&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;    lit&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) + evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) - evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) * evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) / evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;%&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) % evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;lt; evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;lt;= evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;==&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) == evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) != evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;gt;= evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;gt; evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;, *stmts&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;    last = &lt;span class=&#34;dv&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-29&#34;&gt;&lt;a href=&#34;#cb5-29&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-30&#34;&gt;&lt;a href=&#34;#cb5-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; stmts[i]&lt;/span&gt;
&lt;span id=&#34;cb5-31&#34;&gt;&lt;a href=&#34;#cb5-31&#34;&gt;&lt;/a&gt;      last = evaluate(stmts[i], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-32&#34;&gt;&lt;a href=&#34;#cb5-32&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-33&#34;&gt;&lt;a href=&#34;#cb5-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-34&#34;&gt;&lt;a href=&#34;#cb5-34&#34;&gt;&lt;/a&gt;    last&lt;/span&gt;
&lt;span id=&#34;cb5-35&#34;&gt;&lt;a href=&#34;#cb5-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;, var_name, var_value&lt;/span&gt;
&lt;span id=&#34;cb5-36&#34;&gt;&lt;a href=&#34;#cb5-36&#34;&gt;&lt;/a&gt;    lenv[var_name] = evaluate(var_value, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-37&#34;&gt;&lt;a href=&#34;#cb5-37&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;, var_name&lt;/span&gt;
&lt;span id=&#34;cb5-38&#34;&gt;&lt;a href=&#34;#cb5-38&#34;&gt;&lt;/a&gt;    lenv[var_name]&lt;/span&gt;
&lt;span id=&#34;cb5-39&#34;&gt;&lt;a href=&#34;#cb5-39&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;, cond, exp1, exp2&lt;/span&gt;
&lt;span id=&#34;cb5-40&#34;&gt;&lt;a href=&#34;#cb5-40&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-41&#34;&gt;&lt;a href=&#34;#cb5-41&#34;&gt;&lt;/a&gt;      evaluate(exp1, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-42&#34;&gt;&lt;a href=&#34;#cb5-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-43&#34;&gt;&lt;a href=&#34;#cb5-43&#34;&gt;&lt;/a&gt;      evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-44&#34;&gt;&lt;a href=&#34;#cb5-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-45&#34;&gt;&lt;a href=&#34;#cb5-45&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;, cond, exp&lt;/span&gt;
&lt;span id=&#34;cb5-46&#34;&gt;&lt;a href=&#34;#cb5-46&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-47&#34;&gt;&lt;a href=&#34;#cb5-47&#34;&gt;&lt;/a&gt;      evaluate(exp, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-48&#34;&gt;&lt;a href=&#34;#cb5-48&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-49&#34;&gt;&lt;a href=&#34;#cb5-49&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;, func_name, func_args, func_body&lt;/span&gt;
&lt;span id=&#34;cb5-50&#34;&gt;&lt;a href=&#34;#cb5-50&#34;&gt;&lt;/a&gt;    genv[func_name] = [&lt;span class=&#34;st&#34;&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, func_args, func_body]&lt;/span&gt;
&lt;span id=&#34;cb5-51&#34;&gt;&lt;a href=&#34;#cb5-51&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;, func_name, *func_args&lt;/span&gt;
&lt;span id=&#34;cb5-52&#34;&gt;&lt;a href=&#34;#cb5-52&#34;&gt;&lt;/a&gt;    args = []&lt;/span&gt;
&lt;span id=&#34;cb5-53&#34;&gt;&lt;a href=&#34;#cb5-53&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-54&#34;&gt;&lt;a href=&#34;#cb5-54&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; func_args[i]&lt;/span&gt;
&lt;span id=&#34;cb5-55&#34;&gt;&lt;a href=&#34;#cb5-55&#34;&gt;&lt;/a&gt;      args[i] = evaluate(func_args[i], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-56&#34;&gt;&lt;a href=&#34;#cb5-56&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-57&#34;&gt;&lt;a href=&#34;#cb5-57&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-58&#34;&gt;&lt;a href=&#34;#cb5-58&#34;&gt;&lt;/a&gt;    mhd = genv[func_name]&lt;/span&gt;
&lt;span id=&#34;cb5-59&#34;&gt;&lt;a href=&#34;#cb5-59&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; mhd[&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;st&#34;&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-60&#34;&gt;&lt;a href=&#34;#cb5-60&#34;&gt;&lt;/a&gt;      minruby_call(mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], args)&lt;/span&gt;
&lt;span id=&#34;cb5-61&#34;&gt;&lt;a href=&#34;#cb5-61&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-62&#34;&gt;&lt;a href=&#34;#cb5-62&#34;&gt;&lt;/a&gt;      new_lenv = {}&lt;/span&gt;
&lt;span id=&#34;cb5-63&#34;&gt;&lt;a href=&#34;#cb5-63&#34;&gt;&lt;/a&gt;      params = mhd[&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb5-64&#34;&gt;&lt;a href=&#34;#cb5-64&#34;&gt;&lt;/a&gt;      i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-65&#34;&gt;&lt;a href=&#34;#cb5-65&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; params[i]&lt;/span&gt;
&lt;span id=&#34;cb5-66&#34;&gt;&lt;a href=&#34;#cb5-66&#34;&gt;&lt;/a&gt;        new_lenv[params[i]] = args[i]&lt;/span&gt;
&lt;span id=&#34;cb5-67&#34;&gt;&lt;a href=&#34;#cb5-67&#34;&gt;&lt;/a&gt;        i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-68&#34;&gt;&lt;a href=&#34;#cb5-68&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-69&#34;&gt;&lt;a href=&#34;#cb5-69&#34;&gt;&lt;/a&gt;      evaluate(mhd[&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-70&#34;&gt;&lt;a href=&#34;#cb5-70&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-71&#34;&gt;&lt;a href=&#34;#cb5-71&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;, ary_values&lt;/span&gt;
&lt;span id=&#34;cb5-72&#34;&gt;&lt;a href=&#34;#cb5-72&#34;&gt;&lt;/a&gt;    ary = []&lt;/span&gt;
&lt;span id=&#34;cb5-73&#34;&gt;&lt;a href=&#34;#cb5-73&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-74&#34;&gt;&lt;a href=&#34;#cb5-74&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; ary_values[i]&lt;/span&gt;
&lt;span id=&#34;cb5-75&#34;&gt;&lt;a href=&#34;#cb5-75&#34;&gt;&lt;/a&gt;      ary [i] = evaluate(ary_values[i], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-76&#34;&gt;&lt;a href=&#34;#cb5-76&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-77&#34;&gt;&lt;a href=&#34;#cb5-77&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-78&#34;&gt;&lt;a href=&#34;#cb5-78&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;, ary_exp, idx_exp&lt;/span&gt;
&lt;span id=&#34;cb5-79&#34;&gt;&lt;a href=&#34;#cb5-79&#34;&gt;&lt;/a&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-80&#34;&gt;&lt;a href=&#34;#cb5-80&#34;&gt;&lt;/a&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-81&#34;&gt;&lt;a href=&#34;#cb5-81&#34;&gt;&lt;/a&gt;    ary[idx]&lt;/span&gt;
&lt;span id=&#34;cb5-82&#34;&gt;&lt;a href=&#34;#cb5-82&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;, ary_exp, idx_exp, value_exp&lt;/span&gt;
&lt;span id=&#34;cb5-83&#34;&gt;&lt;a href=&#34;#cb5-83&#34;&gt;&lt;/a&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-84&#34;&gt;&lt;a href=&#34;#cb5-84&#34;&gt;&lt;/a&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-85&#34;&gt;&lt;a href=&#34;#cb5-85&#34;&gt;&lt;/a&gt;    val = evaluate(value_exp, genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-86&#34;&gt;&lt;a href=&#34;#cb5-86&#34;&gt;&lt;/a&gt;    ary[idx] = val&lt;/span&gt;
&lt;span id=&#34;cb5-87&#34;&gt;&lt;a href=&#34;#cb5-87&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;, *key_values&lt;/span&gt;
&lt;span id=&#34;cb5-88&#34;&gt;&lt;a href=&#34;#cb5-88&#34;&gt;&lt;/a&gt;    hsh = {}&lt;/span&gt;
&lt;span id=&#34;cb5-89&#34;&gt;&lt;a href=&#34;#cb5-89&#34;&gt;&lt;/a&gt;    i = &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-90&#34;&gt;&lt;a href=&#34;#cb5-90&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;while&lt;/span&gt; key_values[i]&lt;/span&gt;
&lt;span id=&#34;cb5-91&#34;&gt;&lt;a href=&#34;#cb5-91&#34;&gt;&lt;/a&gt;      key = evaluate(key_values[i], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-92&#34;&gt;&lt;a href=&#34;#cb5-92&#34;&gt;&lt;/a&gt;      val = evaluate(key_values[i + &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id=&#34;cb5-93&#34;&gt;&lt;a href=&#34;#cb5-93&#34;&gt;&lt;/a&gt;      hsh[key] = val&lt;/span&gt;
&lt;span id=&#34;cb5-94&#34;&gt;&lt;a href=&#34;#cb5-94&#34;&gt;&lt;/a&gt;      i = i + &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-95&#34;&gt;&lt;a href=&#34;#cb5-95&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-96&#34;&gt;&lt;a href=&#34;#cb5-96&#34;&gt;&lt;/a&gt;    hsh&lt;/span&gt;
&lt;span id=&#34;cb5-97&#34;&gt;&lt;a href=&#34;#cb5-97&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-98&#34;&gt;&lt;a href=&#34;#cb5-98&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配列にマッチさせる場合，&lt;code&gt;in [a, b, c]&lt;/code&gt; の &lt;code&gt;[]&lt;/code&gt; を省くことができる． また，&lt;code&gt;in &amp;quot;hoge&amp;quot;, *rest&lt;/code&gt; は配列の残りの要素全てを &lt;code&gt;*rest&lt;/code&gt; にマッチさせる構文だ． 他は特別な機能を使ってないのできっと読めるでしょう．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-minruby-パターンマッチング&#34;&gt;おまけ: minruby + パターンマッチング&lt;/h2&gt;
&lt;p&gt;試しに &lt;code&gt;minruby&lt;/code&gt; もパターンマッチで書き換えてみた． 差分は&lt;a href=&#34;https://github.com/matsubara0507/minruby-gem/pull/1&#34;&gt;これ&lt;/a&gt;． めちゃくちゃやっつけで作ったので穴があるかもしれない．&lt;/p&gt;
&lt;p&gt;ここでは新しく Alternative Pattern を使っている． こういうのだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# Alternative Pattern: hoge | fuga&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;:program&lt;/span&gt; | &lt;span class=&#34;st&#34;&gt;:bodystmt&lt;/span&gt;), exp1, *_&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;    make_stmts(exp1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternative Pattern には注意点があって，このパターンでは変数へのマッチを利用することができない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode ruby&#34;&gt;&lt;code class=&#34;sourceCode ruby&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# Error: illegal variable in alternative pattern&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;:program&lt;/span&gt; exp1, *_ | &lt;span class=&#34;st&#34;&gt;:bodystmt&lt;/span&gt; exp1, *_),&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;    make_stmts(exp1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここからは余談． MinRuby は &lt;code&gt;ruby interp.rb interp.rb fizzbuzz.rb&lt;/code&gt; のように自身を自身で評価することが可能だ(そのため &lt;code&gt;map&lt;/code&gt; や &lt;code&gt;foreach&lt;/code&gt; などを使わずに少し冗長なコードになっている)． しかし，パターンマッチングを導入しちゃうとこれができない． なんとかできないかなぁと思って &lt;code&gt;minruby&lt;/code&gt; をパターンマッチングで書き換えてみたけど，まぁ無理でした． いいアイデアあったら教えて．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次は型検査も試したいですね．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html</id><title type="text">GitHub Card を生成する SPA を Elm で作った</title><updated>2019-05-12T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Qiita や自分のブログに GitHub のリポジトリのリンク貼ってもなんか寂しいからいい感じのカードっぽいやつ生成するやつを作ったって話です． iframe で埋め込むことができます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;だがしかし！Qiita などに任意の iframe が埋め込めるわけないジャーーーン！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ということに，だいたい完成してから気づいた orz&lt;/p&gt;
&lt;h3 id=&#34;github-card&#34;&gt;GitHub Card&lt;/h3&gt;
&lt;p&gt;特別定義はないけど，&lt;a href=&#34;https://lab.lepture.com/github-cards/&#34;&gt;こんな感じ&lt;/a&gt;のを iframe で作りたかった．&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;マイフェィバリット JS 系プログラミング言語 Elm を使った． だいたい半日ぐらいかかった．GWの最終日．GW最高． リポジトリはこれ:&lt;/p&gt;
&lt;h4 id=&#34;section&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/github-card&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card&#34;&gt;GitHub Pages に置いた&lt;/a&gt;ので誰でも試せる． ただし，裏では GitHub API v3 をトークンなしで叩いてる…&lt;/p&gt;
&lt;p&gt;こんな感じになる:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card/#matsubara0507&#34;&gt;&lt;img src=&#34;/assets/create-my-github-cards/user-github-card.jpg&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/github-card/#matsubara0507/github-card&#34;&gt;&lt;img src=&#34;/assets/create-my-github-cards/repo-github-card.jpg&#34; style=&#34;max-width: 500px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上がユーザーのカードで下がリポジトリのカード． &lt;code&gt;Embed:&lt;/code&gt; の下に書いてある iframe タグをコピペすることで埋め込める．&lt;/p&gt;
&lt;h3 id=&#34;ちょっとした工夫&#34;&gt;ちょっとした工夫&lt;/h3&gt;
&lt;p&gt;Elm の &lt;code&gt;Browser.application&lt;/code&gt; の URL 機能を&lt;del&gt;わざわざ&lt;/del&gt;使って色々工夫してる:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://xxxx#name&lt;/code&gt; とすることで直接任意ユーザー/リポジトリのカードのページを開ける
&lt;ul&gt;
&lt;li&gt;実は &lt;code&gt;Build&lt;/code&gt; ボタンで &lt;code&gt;#name&lt;/code&gt; にジャンプしてる笑&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://xxx?target=name&lt;/code&gt; とすることで &lt;code&gt;name&lt;/code&gt; のカードだけを表示
&lt;ul&gt;
&lt;li&gt;iframe にはこっちを使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementById&lt;/code&gt; とか&lt;del&gt;わざわざ&lt;/del&gt;してぴったりの &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; を iframe に生成してる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;問題点&#34;&gt;問題点&lt;/h3&gt;
&lt;p&gt;上述した通り，GitHub API をトークンなしで利用しているので rate limit がある(同一アドレスから60req/h)． 開いた人によってはページが見れないのは悲しい…&lt;/p&gt;
&lt;h2 id=&#34;作るパート2&#34;&gt;作る(パート2)&lt;/h2&gt;
&lt;p&gt;ウンウン考えながら帰宅してたら気づいた． どーせ GitHub のユーザーやリポジトリのステータスなんてコロコロ変わるもんでもないし，&lt;strong&gt;適当に JSON で吐いておいて毎日更新する CI でも回しておけば良くない??&lt;/strong&gt; と．&lt;/p&gt;
&lt;p&gt;ということで、思いついてしまったので作ってしまった． 気づいたら朝4時．GW延長戦(????)．&lt;/p&gt;
&lt;h3 id=&#34;できたもの&#34;&gt;できたもの&lt;/h3&gt;
&lt;p&gt;集める部分と表示する部分を分けた:&lt;/p&gt;
&lt;h4 id=&#34;section-1&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/selfcat&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;h4 id=&#34;section-2&#34;&gt;&lt;iframe width=&#34;426&#34; height=&#34;162&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/my-github-cards&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;前回の &lt;a href=&#34;https://github.com/matsubara0507/github-card&#34;&gt;matsubara0507/github-card&lt;/a&gt; と違い自分専用． selfcat という CLI ツールで次のような設定ファイル &lt;code&gt;.selfcat.yaml&lt;/code&gt; にあるユーザーとリポジトリの情報を収集(GitHub API v3)し，JSON として保存する． もちろん Haskell 製．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;repos&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mix.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; selfcat&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--compact&lt;/code&gt; オプションをつけることで一つの JSON にまとめてくれる． my-github-cards の方は selfcat を使って一つにまとめて生成した JSON ファイルを読み込んで GitHub Card を表示する． 表示した見た目は前回のと同じ．&lt;/p&gt;
&lt;h3 id=&#34;selfcat&#34;&gt;selfcat&lt;/h3&gt;
&lt;p&gt;これはやってること単純:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;設定ファイルの YAML を読み込み (&lt;a href=&#34;http://hackage.haskell.org/package/yaml&#34;&gt;yaml&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;GitHub API を叩き (&lt;a href=&#34;http://hackage.haskell.org/package/github&#34;&gt;github&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;JSON を吐くだけ (&lt;a href=&#34;http://hackage.haskell.org/package/aeson&#34;&gt;aeson&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例のごとく，&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;rio&lt;/a&gt; + &lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; でサクッと作った．&lt;/p&gt;
&lt;p&gt;中身を見るとわかるのだが &lt;a href=&#34;https://github.com/matsubara0507/mix.hs&#34;&gt;mix&lt;/a&gt; というパッケージを使っている． これは rio + extensible のいつも自分が使うパターンをパッケージ化したもの． そのうちまたまとめます．&lt;/p&gt;
&lt;h3 id=&#34;生成した-json-ファイルを読み込む&#34;&gt;生成した JSON ファイルを読み込む&lt;/h3&gt;
&lt;p&gt;Elm で「生成した JSON ファイルを読み込む」というのは少し大変だった． Elm で初期値を与えるには &lt;code&gt;init&lt;/code&gt; 関数の &lt;code&gt;Flag&lt;/code&gt; というのを使う。&lt;a href=&#34;https://qiita.com/jinjor/items/245959d2da710eda18fa#browserelement&#34;&gt;このあたりが参考になる&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;で，問題はどうやってローカルの JSON を読み込むか． &lt;a href=&#34;https://github.com/matsubara0507/git-plantation/blob/8b0c44e6e6e20bd23998f7df5e0817fcf17fb6a8/src/Git/Plantation/API.hs#L47-L48&#34;&gt;git-plantation では Haskell で埋め込んでいた&lt;/a&gt;のだが，今回はサーバー側がないのでできない． ググったら出てきた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript&#34;&gt;Load JSON file locally using pure Javascript by Rich on CodePen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS 詳しくないのでこれが良い方法なのかはわからないけど，これを参考にして次のような JS を書いて &lt;code&gt;index.html&lt;/code&gt; から読み込むようにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;loadJSON&lt;/span&gt;(callback) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; xobj &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;XMLHttpRequest&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;overrideMimeType&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;static/info.json&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; () &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;         &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;readyState&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;           &lt;span class=&#34;at&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;responseText&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;         &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;   &lt;span class=&#34;va&#34;&gt;xobj&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;null&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;loadJSON&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;(response) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; json &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;parse&lt;/span&gt;(response)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;Main&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;init&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;info&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; json &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;  )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少なくとも，うまく動作はしている．&lt;/p&gt;
&lt;p&gt;いつも通り，GitHub Pages に置いたので&lt;a href=&#34;https://matsubara0507.github.io/my-github-cards/&#34;&gt;ここ&lt;/a&gt;から見れる． というか，さっきから表示している GitHub Card がこれで埋め込んだものだ．&lt;/p&gt;
&lt;h3 id=&#34;daily-cron-on-travisci&#34;&gt;Daily cron on TravisCI&lt;/h3&gt;
&lt;p&gt;更新は TravisCI の Daily cron を使う． &lt;a href=&#34;https://hub.docker.com/r/matsubara0507/selfcat/&#34;&gt;selfcat は Docker Image にした&lt;/a&gt;ので selfcat をビルドする必要はない． &lt;code&gt;docker run&lt;/code&gt; で JSON を生成し，差分があったら GitHub に push する．&lt;/p&gt;
&lt;p&gt;知らぬ間に，TravisCI の設定方法に &lt;code&gt;deploy&lt;/code&gt; という設定が増えていたんですね:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# .travis.yml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; generic&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;before_install&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker pull matsubara0507/selfcat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;stage&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; exec selfcat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; branch = master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker run --rm -e GH_TOKEN -v `pwd`:/app matsubara0507/selfcat bin/bash -c &amp;#39;cd app &amp;amp;&amp;amp; selfcat --output=docs/static/info.json --compact .selfcat.yaml&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; script&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;skip_cleanup&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; bash .travis/deploy.bash&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; master&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;deploy&lt;/code&gt; のところで読んでいるスクリプトは以下:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;-eux&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# setup ssh-agent and provide the GitHub deploy key&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;bu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ssh-agent&lt;/span&gt; -s&lt;span class=&#34;va&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;openssl&lt;/span&gt; aes-256-cbc -K &lt;span class=&#34;va&#34;&gt;$encrypted_3b94903f5871_key&lt;/span&gt; -iv &lt;span class=&#34;va&#34;&gt;$encrypted_3b94903f5871_iv&lt;/span&gt; -in .travis/id_rsa.enc -out .travis/id_rsa -d&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;chmod&lt;/span&gt; 600 .travis/id_rsa&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ssh-add&lt;/span&gt; .travis/id_rsa&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# commit the assets in docs/ if changed, and push to GitHub using SSH&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; config user.name &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;${GIT_NAME}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; config user.email &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;va&#34;&gt;${GIT_EMAIL}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; remote set-url origin git@github.com:&lt;span class=&#34;va&#34;&gt;${TRAVIS_REPO_SLUG}&lt;/span&gt;.git&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; checkout master&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; status&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; add docs&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; diff --staged --quiet &lt;span class=&#34;kw&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update docs by selfcat&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; push origin master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub の Personal Access Token を使うのが嫌なので deploy key を登録して，暗号化したものをリポジトリに置き，それを CI の中で複合して使うという方法をとっている． ググったら下記の記事が出てきてそのまま使わせてもらった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@simon.legner/deploy-to-github-pages-using-travis-ci-and-deploy-keys-db84fed7a929&#34;&gt;Deploy to GitHub Pages using Travis CI and deploy keys - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暗号化/複合の部分は TravisCI の &lt;a href=&#34;https://docs.travis-ci.com/user/encrypting-files/&#34;&gt;Encrypting Files&lt;/a&gt; を使うことで簡単に行える． 記事で1点，スクリプトの呼び出しが &lt;code&gt;script: ./.travis-deploy.sh&lt;/code&gt; では呼べなかった． ググったら &lt;a href=&#34;https://github.com/travis-ci/travis-ci/issues/5538&#34;&gt;Issue&lt;/a&gt; があり，&lt;code&gt;script: sh deploy.sh&lt;/code&gt; とすれば良いみたいだったのでそうしたらうまくいった．&lt;/p&gt;
&lt;h1 id=&#34;section-3&#34;&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/matsubara0507/my-github-cards&#34;&gt;matsubara0507/my-github-cards&lt;/a&gt; をフォークして，selfcat と TravisCI の設定(&lt;code&gt;.travis/id_rsa.enc&lt;/code&gt; と環境変数など)を変えれば誰でも my-github-cards を使える． 気が向いたらドキュメントにしよ．&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;ToDo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入力してエンターキーで Build ボタン押したことにしたい&lt;/li&gt;
&lt;li&gt;Embed のところにクリップボードにコピーボタン欲しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと，特に Elm はやっつけで書いたので全体的にコードが汚い気がする．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;自分(self)の GitHub (Octocat)の情報を集めるから selfcat です(????)。&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html</id><title type="text">Drone 1.0 を GCE 上に構築する</title><updated>2019-04-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;先月ついに &lt;a href=&#34;https://drone.io/&#34;&gt;Drone CI&lt;/a&gt; のバージョン1.0がリリースされました(rc でも無い方)． まだドキュメントの方が追いついてないところもありますが，これで大手を振って本番導入できますね！&lt;/p&gt;
&lt;p&gt;で，別に本番導入したわけじゃ無いんですけど，とあるイベントで Drone CI を使いたかったので GCE 上に立てました． 本記事はそのメモ書きです．&lt;/p&gt;
&lt;h2 id=&#34;drone-ci&#34;&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Jenkins のような OSS な CI/CD プラットフォーム． 使い勝手的には TravisCI や CircleCI に近く、&lt;code&gt;.drone.yml&lt;/code&gt; という設定ファイルにパイプラインを使って記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; node&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commands&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; npm install&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; npm test&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; database&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mysql&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;3306&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go言語製で，Docker との親和性がかなり高いという特徴を持っている． また，&lt;a href=&#34;https://cloud.drone.io/&#34;&gt;Drone Cloud&lt;/a&gt; というクラウドサービスも提供されているので，とりあえず試したい人はぜひ．&lt;/p&gt;
&lt;h2 id=&#34;drone-on-gcp&#34;&gt;Drone on GCP&lt;/h2&gt;
&lt;p&gt;Drone 自体は Docker で起動できる(&lt;a href=&#34;https://docs.drone.io/installation&#34;&gt;公式ドキュメント&lt;/a&gt;)． docker-compose を次のように記述することで簡単に起動可能だ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;drone&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/drone:1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 8000:80&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 443:443&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /var/lib/drone:/data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_SECRET}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_AGENTS_ENABLED=true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_RPC_SECRET=${DRONE_SECRET}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_SERVER_HOST=${DRONE_HOST}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_SERVER_PROTO=https&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_TLS_AUTOCERT=true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;agent&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone/agent:1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; always&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; drone&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_RPC_SERVER=http://drone&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_RPC_SECRET=${DRONE_SECRET}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_RUNNER_CAPACITY=2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-34&#34;&gt;&lt;a href=&#34;#cb2-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; DRONE_RUNNER_NAME=${HOSTNAME}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;a href=&#34;/posts/2019-01-05-docker-compose-up-drone-1-0.html&#34;&gt;ローカルで試す話は前に書いた&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回はこれを GCE 上でやることにした(GKE を試そうとも思ったが，まだ時期尚早って感じだったのでやめた)．&lt;/p&gt;
&lt;h3 id=&#34;gcpでの準備&#34;&gt;GCPでの準備&lt;/h3&gt;
&lt;p&gt;HTTPS 通信をやりたいのでドメインの取得をし，HTTP(S) LB と Managed SSL を使って簡単に証明書を発行することにした． この仕組みは下記の記事を参考にした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/koshilife/items/a75a69d03e2524f33c8e&#34;&gt;GCP managed SSL(β版)を利用したhttpsサーバ構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;β版だったためか，ところどころ違った気がするけど概ね記事の通りできた．&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;GCEインスタンスを立てる
&lt;ul&gt;
&lt;li&gt;スペックは &lt;code&gt;n1-standard-1（vCPU x 1、メモリ 3.75 GB）+ 10GB disk&lt;/code&gt; にした&lt;/li&gt;
&lt;li&gt;HTTPアクセスを許可しておく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インスタンスグループを作成&lt;/li&gt;
&lt;li&gt;HTTP(S) LB を作成
&lt;ul&gt;
&lt;li&gt;バックエンド: (2)のインスタンスグループを選んで他はデフォルト値&lt;/li&gt;
&lt;li&gt;ホストとパスのルール: 特になし&lt;/li&gt;
&lt;li&gt;フロントエンド: エフェラメルIPでHTTP/HTTPSの2つを作成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DNSのAレコードを作成
&lt;ul&gt;
&lt;li&gt;有効化されるのに長いと1時間ぐらいかかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ドメインは Google Domain で取得したのだが，そっちの DNS 設定を切っておくのを忘れて有効化に失敗していた．&lt;/p&gt;
&lt;h3 id=&#34;drone-の準備と起動&#34;&gt;Drone の準備と起動&lt;/h3&gt;
&lt;p&gt;上記手順の(1)で以下のプログラムをインストール:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nginx の設定は雑に次のような感じ(&lt;a href=&#34;https://angristan.xyz/host-your-own-ci-cd-server-with-drone/&#34;&gt;参考&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&#34;conf&#34;&gt;&lt;code&gt;server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  return 444;
}

server {
  listen 80;
  server_name [(4)で設定するドメイン];

  if ($http_x_forwarded_proto = &amp;#39;http&amp;#39;) {
    return 301 https://$server_name$request_uri;
  }

  location / {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://localhost:8000;
    proxy_redirect off;
    proxy_buffering off;
    chunked_transfer_encoding off;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで (4) で設定したドメインの HTTPS 通信のみ許可するようになった． あとは適当なところで &lt;code&gt;docker-compose up -d&lt;/code&gt; とすれば良い．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/drone-1-0-in-gce/my-drone-example.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;h3 id=&#34;drone-起動時の環境変数&#34;&gt;Drone 起動時の環境変数&lt;/h3&gt;
&lt;p&gt;このあたりのを適宜使った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRONE_USER_FILTER
&lt;ul&gt;
&lt;li&gt;認証後に閲覧できるユーザーを絞る&lt;/li&gt;
&lt;li&gt;ただし Public は誰でも見れる(はず)&lt;/li&gt;
&lt;li&gt;ちなみに Internal はここで指定したユーザー全員が見れる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_USER_CREATE
&lt;ul&gt;
&lt;li&gt;Admin ユーザーみたいな感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_LOGS_DEBUG,DRONE_LOGS_TRACE
&lt;ul&gt;
&lt;li&gt;この二つをオンにしておくと &lt;code&gt;docker logs&lt;/code&gt; でだいたいログを追える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;drone-の情報&#34;&gt;Drone の情報&lt;/h3&gt;
&lt;p&gt;冒頭で述べた通り，Drone の公式情報は綺麗にまとまってるとは言い難い． 基本は以下の公式ドキュメント:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.drone.io/&#34;&gt;Drone Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.drone.yml&lt;/code&gt; の書き方はここにまとまってるので Drone CI を使うってだけならここで概ね問題ないでしょう． API を使ったり，drone-cli を使ったり，コンテナ起動時の設定を調べたりは情報が足りない時がちょくちょくある． Drone は &lt;a href=&#34;https://github.com/search?q=org%3Adrone&amp;amp;type=Issues&#34;&gt;GitHub Issue&lt;/a&gt; の他に &lt;a href=&#34;https://discourse.org/&#34;&gt;Discourse&lt;/a&gt; というサービスを使っている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://discourse.drone.io/&#34;&gt;Drone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的なエラーなんかは StackOverflow よりここを検索した方が見つかる． またチャットサービスとして Gitter も用意しているので，そこに聞きに行ってもいいかもしれない:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/drone/home&#34;&gt;drone/home - Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁあとは OSS なので直接コードを観に行けばだいたい仕様はわかる． 特に，API に関する情報は 0.8 以前の古いものしかなく，&lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;Haskell の Drone クライアント&lt;/a&gt;を作るときは直接ソースコードを見ていた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone&#34;&gt;drone/drone - GitHub&lt;/a&gt;: &lt;code&gt;handler/api&lt;/code&gt; とか見ると良い&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone-go&#34;&gt;drone/drone-go - GitHub&lt;/a&gt;: Drone API の Go クライアント&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おしまい&#34;&gt;おしまい&lt;/h1&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id><title type="text">Re: Marp のすゝめ</title><updated>2019-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;&lt;strong&gt;2019.4.6 Marp-core-0.6.0 での更新を反映した&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://yhatt.github.io/marp/&#34;&gt;Marp&lt;/a&gt; というのは Markdown 記法で書けるスライド作成ツールです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown 記法で手軽に書ける&lt;/li&gt;
&lt;li&gt;見た目が綺麗&lt;/li&gt;
&lt;li&gt;画像の拡縮が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの特徴から個人的にかなり重宝しています． その辺りは昔&lt;a href=&#34;/posts/2016-12-14-recommend-marp.html&#34;&gt;記事にしました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから &lt;a href=&#34;https://github.com/marp-team/marp&#34;&gt;Marp Next&lt;/a&gt; というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます&#34;&gt;markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/yhatt/items/874d5bfa919c32728403&#34;&gt;Puppeteer &amp;amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，本記事での Marp Next のバージョンは &lt;code&gt;marp-cli-0.6&lt;/code&gt; ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．&lt;/p&gt;
&lt;h2 id=&#34;marp-next&#34;&gt;Marp Next&lt;/h2&gt;
&lt;p&gt;新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: center;&#34;&gt;リポジトリ&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp&#34;&gt;marp-team/marp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp 全体を取りまとめるリポジトリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marpit&#34;&gt;Marpit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-core&#34;&gt;Marp Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-cli&#34;&gt;Marp CLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の CLI ツール&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/marp-team/marp-web&#34;&gt;Marp Web&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の Web UI (まだベータっぽい)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: center;&#34;&gt;Marp Desktop&lt;/td&gt;
&lt;td&gt;Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href=&#34;https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22&#34;&gt;旧 Marp のリポジトリの Issue ラベルに &lt;code&gt;Marp Next&lt;/code&gt; や &lt;code&gt;Supports in Marp Next&lt;/code&gt; というのができている&lt;/a&gt;． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには &lt;code&gt;Support in Marp Next&lt;/code&gt; を付けたようだ．&lt;/p&gt;
&lt;h3 id=&#34;旧-marp-との非互換な機能&#34;&gt;旧 Marp との非互換な機能&lt;/h3&gt;
&lt;p&gt;これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;==AAA==&lt;/code&gt; というハイライト機能がない（辛い）&lt;/li&gt;
&lt;li&gt;打ち消し線記法 &lt;code&gt;~~AAA~~&lt;/code&gt; もない&lt;/li&gt;
&lt;li&gt;画像の拡縮ルール (Marpit)
&lt;ul&gt;
&lt;li&gt;より&lt;a href=&#34;https://marpit.marp.app/image-syntax&#34;&gt;細かいルールができて&lt;/a&gt;書きやすくなった&lt;/li&gt;
&lt;li&gt;しかし前のは記法は非互換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; がないので中央寄せができない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- *template: xxx --&amp;gt;&lt;/code&gt; のようなそのページだけ機能追加 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- _class: xxx --&amp;gt;&lt;/code&gt; のように先頭にアンダースコア &lt;code&gt;_&lt;/code&gt; を付けるスタイルになった&lt;/li&gt;
&lt;li&gt;ちなみに &lt;code&gt;&amp;lt;!-- $theme: xxx --&amp;gt;&lt;/code&gt; はあるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマの取り扱い (Marpit ??)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; だけだと中央寄せなどになっていた機能がなくなった&lt;/li&gt;
&lt;li&gt;それらはテーマのイチ &lt;code&gt;class&lt;/code&gt; となっている&lt;/li&gt;
&lt;li&gt;前の &lt;code&gt;template&lt;/code&gt; も &lt;code&gt;class&lt;/code&gt; なので組み合わせれない&lt;/li&gt;
&lt;li&gt;明示的に指定できるようになったのは嬉しい&lt;/li&gt;
&lt;li&gt;class を複数設定できるようになった！ (&lt;a href=&#34;https://github.com/marp-team/marp-core/pull/69&#34;&gt;marp-core-0.6.0~&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;KaTeX のバージョンアップ (Marp Core)
&lt;ul&gt;
&lt;li&gt;0.6.0 =&amp;gt; 0.10.0&lt;/li&gt;
&lt;li&gt;0.6.0 だと全然 LaTeX 記法をサポートしていないので&lt;a href=&#34;https://katex.org/docs/supported.html&#34;&gt;助かる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;まぁ僕はフォークしてバージョンをあげてたけど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドのサイズ・縦横比 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size&#34;&gt;テーマごとになったぽい&lt;/a&gt;？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marpit.marp.app/directives?id=tweak-theme-style&#34;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; で上書きすると変な余白ができる&lt;/li&gt;
&lt;li&gt;どっちにせよ前の &lt;code&gt;&amp;lt;!-- size: 4:3 --&amp;gt;&lt;/code&gt; みたいなのはできないっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ちなみに，コードが全部 CoffeScript から TypeScript になってた．&lt;/p&gt;
&lt;h2 id=&#34;cli-を試す&#34;&gt;CLI を試す&lt;/h2&gt;
&lt;p&gt;リッチすぎてビビる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README の通りで動いた (Mac, npx)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx @marp-team/marp-cli slide.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/marpteam/marp-cli/&#34;&gt;Docker もサポートされてる&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ただし一部機能に制限があるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown から HTML を生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pdf&lt;/code&gt; オプションで PDF を生成する
&lt;ul&gt;
&lt;li&gt;ただし &lt;strong&gt;&lt;a href=&#34;https://github.com/marp-team/marp-cli/pull/10&#34;&gt;セキュリティの関係&lt;/a&gt;でデフォルトではローカルファイルの画像などを埋め込めない&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;そのためローカル画像を使うには &lt;code&gt;--allow-local-files&lt;/code&gt; をつける&lt;/li&gt;
&lt;li&gt;日本語フォントも変になっている気がする&lt;/li&gt;
&lt;li&gt;日本語検索もダメっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; オプションで Markdown の変更を検知し再生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--server&lt;/code&gt; オプションで &lt;code&gt;localhost:8080&lt;/code&gt; で閲覧やPDFの生成ができる (watch もされます)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--preview&lt;/code&gt; でプレビューモード
&lt;ul&gt;
&lt;li&gt;待望の！！&lt;/li&gt;
&lt;li&gt;ブラウザの全画面モードを使ってるみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--theme&lt;/code&gt; でカスタムテーマを設定可能 (CSS)&lt;/li&gt;
&lt;li&gt;CLI のオプションを使わずに&lt;a href=&#34;https://github.com/marp-team/marp-cli#configuration-file&#34;&gt;設定ファイルでも設定可能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;.marprc.yml&lt;/code&gt; &lt;code&gt;marp.config.js&lt;/code&gt; のどれでも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cli-netlify-を試す&#34;&gt;CLI + Netlify を試す&lt;/h2&gt;
&lt;p&gt;試した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/pub-slides&#34;&gt;matsubara0507/pub-slides - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507-slides.netlify.com/&#34;&gt;&lt;img src=&#34;/assets/re-recommend-marp/pub-slides-with-marp.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;試し方: Marp の作者の&lt;a href=&#34;https://github.com/yhatt/marp-cli-example&#34;&gt;リポジトリ&lt;/a&gt;の &lt;code&gt;Deploy to netlify&lt;/code&gt; をクリックするだけ．&lt;/p&gt;
&lt;p&gt;この方法の場合，リポジトリの &lt;code&gt;PITCHME.md&lt;/code&gt; を &lt;code&gt;index.html&lt;/code&gt; に変換する． marp-cli の設定は &lt;code&gt;package.yml&lt;/code&gt; に書いてある． &lt;a href=&#34;https://github.com/marp-team/marp-cli#options&#34;&gt;設定方法&lt;/a&gt;はこれを参照．&lt;/p&gt;
&lt;p&gt;僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slides&lt;/code&gt; 以下の &lt;code&gt;*.md&lt;/code&gt; を全部変換
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.md&lt;/code&gt; が &lt;code&gt;index.html&lt;/code&gt; のスライドになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後述する自作テーマをサブモジュールで設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slides/assets&lt;/code&gt; にある画像を &lt;code&gt;public&lt;/code&gt; にコピーしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のように少しだけ設定を書き換えた．&lt;/p&gt;
&lt;h2 id=&#34;web-ui-を試す&#34;&gt;Web UI を試す&lt;/h2&gt;
&lt;p&gt;すでに&lt;a href=&#34;https://web.marp.app/&#34;&gt;ここ&lt;/a&gt;から試せる． 手元で試すなら:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でできた．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/re-recommend-marp/editing_marp_next.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルの読み込みや保存が可能&lt;/li&gt;
&lt;li&gt;プレゼンテーションモードは(まだ)なかった&lt;/li&gt;
&lt;li&gt;PDFのエクスポートはブラウザの印刷機能を使うようだった&lt;/li&gt;
&lt;li&gt;カスタムテーマの設定などはまだできない？？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;テーマを移植する&#34;&gt;テーマを移植する&lt;/h2&gt;
&lt;p&gt;オリジナルテーマを作ってたので Marp Next にも移植した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;olive&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/marp-themes&#34;&gt;marp-themes&lt;/a&gt; というリポジトリを作り，そこに置いてある． やったことは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss&#34;&gt;gaia の scss&lt;/a&gt; を持ってきて主に色を変更
&lt;ul&gt;
&lt;li&gt;カスタムテーマとして指定できるのは CSS だけなので &lt;code&gt;scss&lt;/code&gt; コマンドで手動変換する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像の中央寄せをできるようにした
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# ![](path/to/image.jpg)&lt;/code&gt; とすると中央寄せになるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h1&lt;/code&gt; から &lt;code&gt;h6&lt;/code&gt; のどれでも良いです&lt;/li&gt;
&lt;li&gt;ただし，雑に &lt;code&gt;img&lt;/code&gt; タグに適用してるので emoji を含ませるとずれる…&lt;/li&gt;
&lt;li&gt;marpit に修正入れてもらった方が良いかな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lead&lt;/code&gt; + &lt;code&gt;invert&lt;/code&gt; などの class を作っておいた
&lt;ul&gt;
&lt;li&gt;scss で書いてるので &lt;code&gt;lead&lt;/code&gt; を適当に mixi-in にして include するだけ&lt;/li&gt;
&lt;li&gt;これもできれば &lt;code&gt;class&lt;/code&gt; の組み合わせができるようになって欲しい&lt;/li&gt;
&lt;li&gt;marp-core-0.6.0 から class を複数設定できるようになったので、これはいらない ;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;olive&#34;&gt;Olive&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;colors&#34;&gt;Colors&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id=&#34;haskell&#34;&gt;Haskell&lt;/h3&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう既に十分使える状態になっていました． すごい！&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id><title type="text">Drone Plugin を作ってみた: git-with-ssh</title><updated>2019-01-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;最近 &lt;a href=&#34;https://drone.io&#34;&gt;Drone&lt;/a&gt; という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．&lt;/p&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;表題の通り，git-with-ssh という Plugin を作った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh&#34;&gt;matsubara0507/drone-git-with-ssh - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker:git&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;SSH_KEY&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;from_secret&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commands&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &amp;quot;$SSH_KEY&amp;quot; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; echo -e &amp;quot;Host github.com\n\tStrictHostKeyChecking no\n&amp;quot; &amp;gt; /root/.ssh/config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この方法は &lt;a href=&#34;https://github.com/drone/drone/issues/1891#issuecomment-269629929&#34;&gt;Issue で作者本人が提案している&lt;/a&gt;ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．&lt;/p&gt;
&lt;p&gt;しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; clone gh-pages&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ssh_private_key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;from_secret&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; deploy_key&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ssh_hosts&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; github.com&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commands&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)&lt;/p&gt;
&lt;h2 id=&#34;作る&#34;&gt;作る&lt;/h2&gt;
&lt;p&gt;だいたい&lt;a href=&#34;https://docs.drone.io/plugins&#34;&gt;公式ドキュメント&lt;/a&gt;と，&lt;a href=&#34;https://github.com/drone-plugins&#34;&gt;drone-plugin 組織アカウント&lt;/a&gt;にある公式のリポジトリのコードとにらめっこすればなんとかなった．&lt;/p&gt;
&lt;h3 id=&#34;drone-plugin&#34;&gt;Drone Plugin&lt;/h3&gt;
&lt;p&gt;Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，&lt;code&gt;.drone.yml&lt;/code&gt; の &lt;code&gt;settings&lt;/code&gt; 以下の値を &lt;code&gt;PLUGIN_&lt;/code&gt; というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の &lt;code&gt;git-with-ssh&lt;/code&gt; の例だと:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．&lt;/p&gt;
&lt;p&gt;今回は本家のを参考にするために Go 言語で作った．&lt;/p&gt;
&lt;h3 id=&#34;main.go-と-plugin.go&#34;&gt;main.go と plugin.go&lt;/h3&gt;
&lt;p&gt;Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/joho/godotenv&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;  log &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;github.com/urfave/cli&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; build = &lt;span class=&#34;st&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;  app := cli.NewApp()&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;  app.Name = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;  app.Usage = &lt;span class=&#34;st&#34;&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;  app.Action = run&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;  app.Version = fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;1.0.0+%s&amp;quot;&lt;/span&gt;, build)&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;  app.Flags = []cli.Flag{&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;    cli.StringFlag{&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;      Name:   &lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;      Usage:  &lt;span class=&#34;st&#34;&gt;&amp;quot;SSH private key for git&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;      EnvVar: &lt;span class=&#34;st&#34;&gt;&amp;quot;PLUGIN_SSH_PRIVATE_KEY&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;    },&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;    ...&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;// ここに CLI の引数を定義&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := app.Run(os.Args); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;    log.Fatal(err)&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb4-36&#34;&gt;&lt;a href=&#34;#cb4-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-37&#34;&gt;&lt;a href=&#34;#cb4-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-38&#34;&gt;&lt;a href=&#34;#cb4-38&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb4-39&#34;&gt;&lt;a href=&#34;#cb4-39&#34;&gt;&lt;/a&gt;    _ = godotenv.Load(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb4-40&#34;&gt;&lt;a href=&#34;#cb4-40&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb4-41&#34;&gt;&lt;a href=&#34;#cb4-41&#34;&gt;&lt;/a&gt;  plugin := Plugin{&lt;/span&gt;
&lt;span id=&#34;cb4-42&#34;&gt;&lt;a href=&#34;#cb4-42&#34;&gt;&lt;/a&gt;    SSHKey: c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;),&lt;/span&gt;
&lt;span id=&#34;cb4-43&#34;&gt;&lt;a href=&#34;#cb4-43&#34;&gt;&lt;/a&gt;    ...&lt;/span&gt;
&lt;span id=&#34;cb4-44&#34;&gt;&lt;a href=&#34;#cb4-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;// ここで CLI の引数からロジックへ橋渡し&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-45&#34;&gt;&lt;a href=&#34;#cb4-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;// Plugin 型とかは plugin.go に書いてある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-46&#34;&gt;&lt;a href=&#34;#cb4-46&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb4-47&#34;&gt;&lt;a href=&#34;#cb4-47&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/span&gt;
&lt;span id=&#34;cb4-48&#34;&gt;&lt;a href=&#34;#cb4-48&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CLI には &lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;&lt;code&gt;urfave/cli&lt;/code&gt;&lt;/a&gt; を使っている． 理由は特に知らない． &lt;code&gt;go build&lt;/code&gt; することで実行ファイルが生成される．&lt;/p&gt;
&lt;h3 id=&#34;脱線-vs.-改行&#34;&gt;脱線: vs. 改行&lt;/h3&gt;
&lt;p&gt;少し Drone Plugin とは本質的に関係ない話． &lt;code&gt;plugin.go&lt;/code&gt; では &lt;code&gt;id_rsa&lt;/code&gt; を次のように生成している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// plugin.go&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;...&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; Plugin &lt;span class=&#34;kw&#34;&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  Home     &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;  SSHKey   &lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;  Hosts    []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;  Commands []&lt;span class=&#34;dt&#34;&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;  sshDir := fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/.ssh&amp;quot;&lt;/span&gt;, p.Home)&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := os.MkdirAll(sshDir, &lt;span class=&#34;dv&#34;&gt;0700&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; err := ioutil.WriteFile(fmt.Sprintf(&lt;span class=&#34;st&#34;&gt;&amp;quot;%s/id_rsa&amp;quot;&lt;/span&gt;, sshDir), []&lt;span class=&#34;dt&#34;&gt;byte&lt;/span&gt;(p.SSHKey), &lt;span class=&#34;dv&#34;&gt;0600&lt;/span&gt;); err != &lt;span class=&#34;ot&#34;&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;  log.Infof(&lt;span class=&#34;st&#34;&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;  ...&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，&lt;code&gt;id_rsa&lt;/code&gt; の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;./drone-git-with-ssh&lt;/span&gt; --ssh_private_key=&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと &lt;code&gt;id_rsa&lt;/code&gt; の中身は &lt;code&gt;aaa\nbbb&lt;/code&gt; となる． &lt;code&gt;--ssh_private_key=$&amp;#39;aaa\nbbb&amp;#39;&lt;/code&gt; としたら一応動作するが環境変数などが使えなくなるので，&lt;a href=&#34;https://blog.konboi.com/post/2018/05/01/225336/&#34;&gt;内部で明示的に置換すると良い&lt;/a&gt;ようだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode go&#34;&gt;&lt;code class=&#34;sourceCode go&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// main.go&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;...&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class=&#34;dt&#34;&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  ...&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;  plugin := Plugin{&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;    SSHKey: strings.Replace(c.String(&lt;span class=&#34;st&#34;&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;), &lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;`&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;-1&lt;/span&gt;),&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;    ...&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;return&lt;/span&gt; plugin.Exec()&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;docker-イメージ&#34;&gt;Docker イメージ&lt;/h3&gt;
&lt;p&gt;他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; docker:git&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ADD&lt;/span&gt; release/linux/amd64/drone-git-with-ssh /bin/&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;/bin/drone-git-with-ssh&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; で指定するベースイメージには普通，&lt;a href=&#34;https://hub.docker.com/r/plugins/base/&#34;&gt;&lt;code&gt;plugins/base&lt;/code&gt;&lt;/a&gt; を使うようだが，これは &lt;code&gt;scratch&lt;/code&gt; にちょっとだけ毛が生えた程度のイメージで &lt;code&gt;git&lt;/code&gt; がない． なので &lt;a href=&#34;https://hub.docker.com/_/docker&#34;&gt;&lt;code&gt;docker:git&lt;/code&gt;&lt;/a&gt; をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;va&#34;&gt;GOOS=&lt;/span&gt;linux &lt;span class=&#34;va&#34;&gt;GOARCH=&lt;/span&gt;amd64 &lt;span class=&#34;va&#34;&gt;CGO_ENABLED=&lt;/span&gt;0 &lt;span class=&#34;ex&#34;&gt;go&lt;/span&gt; build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;$ &lt;span class=&#34;ex&#34;&gt;docker&lt;/span&gt; build --rm -t matsubara0507/git-with-ssh .&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;drone-を設定する&#34;&gt;Drone を設定する&lt;/h3&gt;
&lt;p&gt;せっかくなので Drone で Docker イメージのビルドなどを CI してみる． &lt;a href=&#34;https://cloud.drone.io/&#34;&gt;Drone Cloud&lt;/a&gt; という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．&lt;/p&gt;
&lt;p&gt;テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commands&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build docker image (dry_run)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;from_secret&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;dry-run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;co&#34;&gt; # Push をしないフラグ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pull_request&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; push docker image&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; plugins/docker&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-28&#34;&gt;&lt;a href=&#34;#cb10-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-29&#34;&gt;&lt;a href=&#34;#cb10-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;from_secret&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker_hub_password&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-30&#34;&gt;&lt;a href=&#34;#cb10-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-31&#34;&gt;&lt;a href=&#34;#cb10-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-32&#34;&gt;&lt;a href=&#34;#cb10-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-33&#34;&gt;&lt;a href=&#34;#cb10-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-34&#34;&gt;&lt;a href=&#34;#cb10-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-35&#34;&gt;&lt;a href=&#34;#cb10-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exclude&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-36&#34;&gt;&lt;a href=&#34;#cb10-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pull_request&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker Hub への操作には &lt;a href=&#34;https://github.com/drone-plugins/drone-docker&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． &lt;code&gt;from_secret: key&lt;/code&gt; とすることで，Drone の Web UI で設定した &lt;code&gt;key&lt;/code&gt; という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，&lt;code&gt;when.event.exclude.pull_request&lt;/code&gt; とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．&lt;/p&gt;
&lt;h3 id=&#34;テストをどうするか&#34;&gt;テストをどうするか&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;plugin.go&lt;/code&gt; はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# .drone.yml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; pipeline&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; default&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; build go&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commands&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; go build&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; test&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; golang:1.11&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;SSH_KEY&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commands&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; printf $SSH_KEY &amp;gt; ./test/expected/.ssh/id_rsa &amp;amp;&amp;amp; chmod 600 ./test/expected/.ssh/id_rsa&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands &amp;#39;pwd&amp;#39; --commands &amp;#39;ls&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; diff ./test/result/.ssh ./test/expected/.ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expected な &lt;code&gt;id_rsa&lt;/code&gt; をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか &lt;code&gt;id_rsa&lt;/code&gt; という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために &lt;code&gt;--home&lt;/code&gt; というオプションで任意のディレクトリに SSH の設定 &lt;code&gt;.ssh&lt;/code&gt; を生成してくれるようにした． デフォルトは &lt;code&gt;/root&lt;/code&gt; だが．&lt;/p&gt;
&lt;h3 id=&#34;おまけ-バッチ&#34;&gt;おまけ: バッチ&lt;/h3&gt;
&lt;p&gt;公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md&#34;&gt;&lt;img src=&#34;/assets/create-drone-git-with-ssh/badges.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;付けたのは4つ:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;Drone のビルド結果&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/&#34;&gt;Go Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goreportcard.com/&#34;&gt;Go Report Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://microbadger.com/&#34;&gt;MicroBadger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．&lt;/p&gt;
&lt;p&gt;Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．&lt;/p&gt;
&lt;h2 id=&#34;section-1&#34;&gt;&lt;/h2&gt;
&lt;p&gt;MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．&lt;/p&gt;
  &lt;/div&gt;</summary></entry></feed>